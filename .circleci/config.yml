# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

orbs:
  android: circleci/android@2.0.3

jobs:
  share-env-vars:
    docker:
      - image: cimg/base:stable # Adjust as needed for your environment
    steps:
      - checkout
      - run:
          name: Check Git Message and Set RUN_E2E
          command: |
            #!/usr/bin/env bash
            set -e
            set -o pipefail
            set -x

            echo "$CIRCLE_SHA1" # Prints the commit SHA
            # verify your needed variable here
            echo "$CIRCLE_COMPARE_URL"

            if [[ "$CIRCLE_SHA1" == *"Run E2E test suite"* ]]; then
              echo "RUN_E2E=true" >> $BASH_ENV
            fi
      - run:
          name: Print RUN_E2E for Debug
          command: | 
              echo "RUN_E2E is set to: $RUN_E2E"
  
  build-qa-debug:
    machine:
      image: android:2024.04.1 # Select an Android image with the right SDK/tools
    environment:
      ANDROID_KEYSTORE_PATH: "$KEYSTORE_PATH"  # Set your path
      ANDROID_KEYSTORE_BASE64: "$KEYSTORE_BASE64"
      # Make sure necessary secrets are set in CircleCI's project settings for access
      
    steps:
      - checkout
      - run:
          name: Download Keystore
          command: |
            # Download keystore using the environment variable for the URL
            echo $KEYSTORE_PATH
            echo "$KEYSTORE_PATH"
            echo "$KEYSTORE_BASE64" | base64 -d > "$KEYSTORE_PATH"
      - run:
          name: Build QaDebug with Gradle
          command: |
            # Run the Gradle tasks to assemble the debug APKs
            ./gradlew -p apps :student:assembleQaDebug :student:assembleQaDebugAndroidTest --build-cache
      - store_artifacts:
          path: ./apps/student/build/outputs/apk/qa/debug/student-qa-debug.apk
          destination: APP_QA_DEBUG
      - store_artifacts:
          path: ./apps/student/build/outputs/apk/androidTest/qa/debug/student-qa-debug-androidTest.apk
          destination: TEST_QA_DEBUG
  
  build-and-comment-dev-debug-minify:
    machine:
      image: android:2024.04.1 # Use an Android image with required SDK/tools
    environment:
      ANDROID_KEYSTORE_PATH: "$KEYSTORE_PATH"  # Adjust path as needed
      ANDROID_KEYSTORE_BASE64: "$KEYSTORE_BASE64"
      # Make sure all the sensitive values below are added to CircleCI's environment variables
      ANDROID_KEYSTORE_PASSWORD: "$ANDROID_KEYSTORE_PASSWORD"
      DEBUG_KEY_ALIAS: "$DEBUG_KEY_ALIAS"
      DEBUG_KEY_PASSWORD: "$DEBUG_KEY_PASSWORD"
    steps:
      - checkout
      - run:
          name: Download Keystore
          command: |
            # Download keystore using the environment variable for the URL
            echo "$KEYSTORE_BASE64" | base64 -d > "$KEYSTORE_PATH"
      - run:
          name: Build DevDebugMinify with Gradle
          command: |
            # Run the Gradle task with required signing options
            ./gradlew -p apps clean :student:assembleDevDebugMinify --build-cache \
              -Pandroid.injected.signing.store.file="$ANDROID_KEYSTORE_PATH" \
              -Pandroid.injected.signing.store.password="$ANDROID_KEYSTORE_PASSWORD" \
              -Pandroid.injected.signing.key.alias="$DEBUG_KEY_ALIAS" \
              -Pandroid.injected.signing.key.password="$DEBUG_KEY_PASSWORD"     
      # Optionally, add a comment back to the VCS (e.g., GitHub)
      - run:
          name: Comment on PR with Build Details
          command: |
            if [ -n "$CIRCLE_PULL_REQUEST" ]; then
              curl -X POST -H "Authorization: token $GITHUB_TOKEN" \
                -d '{"body": "DevDebugMinify build completed successfully."}' \
                "https://api.github.com/repos/your_org/your_repo/issues/${CIRCLE_PULL_REQUEST##*/}/comments"
            fi

  unit-tests:
    machine:
      image: android:2024.04.1 # Use an Android image with required SDK/tools
    environment:
      # Define environment variables as needed; replace paths as necessary
      SOURCE_DIR: "~/project"  # Adjust the project directory as needed
    steps:
      - checkout
      - run:
          name: Run Android Unit Tests
          command: |
            # Navigate to the project location
            cd "$SOURCE_DIR/apps"
            
            # Run unit tests for the specified module and variant
            ./gradlew :student:testDevDebugUnitTest
      - store_test_results:
          path: "$SOURCE_DIR/apps/student/build/test-results/testDevDebugUnitTest"
      - store_artifacts:
          path: "$SOURCE_DIR/apps/student/build/reports/tests/testDevDebugUnitTest"

workflows:
  say-hello-workflow: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - share-env-vars
      - build-qa-debug:
          requires: [share-env-vars]
      - build-and-comment-dev-debug-minify:
          requires: [share-env-vars]
      - unit-tests:
          requires: [build-qa-debug, build-and-comment-dev-debug-minify]
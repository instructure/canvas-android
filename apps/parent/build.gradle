/*
 * Copyright (C) 2016 - present  Instructure, Inc.
 *
 *     This program is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, version 3 of the License.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */
import com.instructure.android.buildtools.transform.ProjectTransformer
import com.instructure.android.buildtools.transform.MasqueradeUITransformer
import com.instructure.android.buildtools.transform.LocaleTransformer

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply from: 'jacoco.gradle' // ./gradlew testDevDebugUnitTestCoverage
apply plugin: 'com.google.android.gms.oss-licenses-plugin'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'okreplay'
apply from: '../../gradle/coverage.gradle'

android {
    compileSdkVersion Versions.COMPILE_SDK
    buildToolsVersion Versions.BUILD_TOOLS

    defaultConfig {
        applicationId "com.instructure.parentapp"
        minSdkVersion Versions.MIN_SDK
        targetSdkVersion Versions.TARGET_SDK
        versionCode = 22
        versionName = "2.0.5"

        multiDexEnabled = true
        testInstrumentationRunner 'com.instructure.canvas.espresso.CanvasRunner'
        testInstrumentationRunnerArguments disableAnalytics: 'true'

        buildConfigField "boolean", "IS_TESTING", "false"
        buildConfigField "boolean", "IS_ROBO_TEST", "false"
        buildConfigField "String", "GAMMA_DOMAIN", "\"\""
        buildConfigField "String", "EDGE_DOMAIN", "\"\""

        /* Fields for robo test flavor */
        buildConfigField "String", "ROBO_TEST_API_KEY", "\"\""
        buildConfigField "String", "ROBO_TEST_USER_ID", "\"\""
        buildConfigField "String", "ROBO_TEST_USERNAME", "\"\""

        /* Add private data */
        PrivateData.merge(project, "parent")
        buildConfigField "String", "LOGIN_CLIENT_ID", "\"$loginClientId\""
        buildConfigField "String", "LOGIN_CLIENT_SECRET", "\"$loginClientSecret\""
        addManifestPlaceholders([
                fabricApiKey:"$fabricApiKey"
        ])
    }

    flavorDimensions 'default'
    productFlavors {
        dev {
            dimension 'default'
            buildConfigField "String", "GAMMA_DOMAIN", "\"https://airwolf-iad-gamma.inscloudgate.net\""
        }

        prod {
            dimension 'default'
        }

        qa {
            dimension 'default'
            buildConfigField "boolean", "IS_TESTING", "true"
            buildConfigField "String", "GAMMA_DOMAIN", "\"https://airwolf-iad-gamma.inscloudgate.net\""
            buildConfigField "String", "EDGE_DOMAIN", "\"https://airwolf-edge.inseng.net\""
        }

        robo {
            dimension 'default'
            buildConfigField "boolean", "IS_ROBO_TEST", "true"
            buildConfigField "String", "ROBO_TEST_API_KEY", "\"$roboTestApiKey\""
            buildConfigField "String", "ROBO_TEST_USER_ID", "\"$roboTestUserId\""
            buildConfigField "String", "ROBO_TEST_USERNAME", "\"$roboTestUsername\""
            buildConfigField "String", "GAMMA_DOMAIN", "\"https://airwolf-iad-gamma.inscloudgate.net\""
            buildConfigField "String", "EDGE_DOMAIN", "\"https://airwolf-edge.inseng.net\""
        }
    }

    buildTypes {
        debug {
            // ./gradlew -Pcoverage :app:assembleQaDebug :app:assembleQaDebugAndroidTest
            // ./gradlew :app:connectedQaDebugAndroidTest
            // ./gradlew :app:createQaDebugCoverageReport
            testCoverageEnabled = project.hasProperty('coverage')
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            minifyEnabled false
            shrinkResources false
            pseudoLocalesEnabled true
        }

        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "boolean", "IS_TESTING", "false"
            buildConfigField "String", "GAMMA_DOMAIN", "\"\""
            buildConfigField "String", "EDGE_DOMAIN", "\"\""
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'LICENSE.txt'
        // Required for Espresso.
        exclude 'META-INF/maven/com.google.guava/guava/pom.properties'
        exclude 'META-INF/maven/com.google.guava/guava/pom.xml'
    }

    lintOptions {
        abortOnError false
    }

    dexOptions {
        preDexLibraries = false
        javaMaxHeapSize '4g'
    }

    /*
    All direct/transitive dependencies shared between your test and production APKs need to be
    excluded from the test APK! This is necessary because both APKs will contain the same classes. Not
    excluding these dependencies from your test configuration will result in an dex pre-verifier error
    at runtime. More info in this tools bug: (https://code.google.com/p/android/issues/detail?id=192497)
    https://github.com/googlecodelabs/android-testing/blob/49e2cf7584b7aee421630da07350d6e4ca2fe6f7/app/build.gradle#L91
    */
    configurations.implementation.dependencies.each { compileDependency ->
        println "Excluding implementation dependency: ${compileDependency.getName()}"
        configurations.androidTestImplementation.dependencies.each { androidTestCompileDependency ->
            configurations.androidTestImplementation.exclude module: "${compileDependency.getName()}"
        }
    }

    registerTransform(
            new ProjectTransformer(
                    android,
                    new MasqueradeUITransformer('com.instructure.parentapp.activity.LoginActivity.class'),
                    new LocaleTransformer()
            )
    )

    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    /* Modules */
    implementation project(path: ':login-api-2')

    /* Open Source Licensing Dependency */
    implementation Libs.PLAY_SERVICES_OSS_LICENSES

    /* Android Test Dependencies */
    androidTestImplementation Libs.JUNIT
    androidTestImplementation project(':canvas_espresso')
    androidTestImplementation project(':dataseedingapi')

    /* Unit Test Dependencies */
    testImplementation Libs.JUNIT
    testImplementation Libs.ROBOLECTRIC

    /* Crashlytics */
    implementation(Libs.CRASHLYTICS) {
        transitive = true
    }

    /* Support Dependencies */
    implementation Libs.ANDROIDX_DESIGN
    implementation Libs.ANDROIDX_PERCENT
    implementation Libs.ANDROIDX_CARDVIEW
}

apply plugin: 'com.google.gms.google-services'

// ./gradlew -Pcoverage firebaseJacoco
task firebaseJacoco(type: JacocoReport) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports for Firebase test lab."

    def flavor = 'qa'

    classDirectories = fileTree(
            dir: "${project.buildDir}/intermediates/classes/${flavor}",
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/*$ViewInjector*.*',
                       '**/*$ViewBinder*.*',
                       '**/BuildConfig.*',
                       '**/Manifest*.*']
    )

    // project.buildDir is /canvas-android/apps/parent/build
    sourceDirectories = files(['src/main/java'] + android.sourceSets[flavor].java.srcDirs)
    executionData = files("${project.buildDir}/firebase.ec")

    reports {
        // default path: /canvas-android/apps/parent/build/reports/jacoco/firebaseJacoco/html/
        html.enabled true
        csv.enabled  false
        xml.enabled  false
    }
}

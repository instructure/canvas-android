/*
 * Copyright (C) 2017 - present  Instructure, Inc.
 *
 *     This program is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, version 3 of the License.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
import com.instructure.android.buildtools.transform.ProjectTransformer
import com.instructure.android.buildtools.transform.MasqueradeUITransformer
import com.instructure.android.buildtools.transform.LocaleTransformer

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.google.firebase.crashlytics'
apply from: '../../gradle/coverage.gradle'
apply plugin: 'dagger.hilt.android.plugin'

def updatePriority = 2
def coverageEnabled = project.hasProperty('coverage')

if (coverageEnabled) {
    apply from: '../../gradle/jacoco.gradle'
}

android {
    packagingOptions {
        exclude 'META-INF/rxjava.properties'
    }

    compileSdkVersion Versions.COMPILE_SDK
    buildToolsVersion Versions.BUILD_TOOLS

    defaultConfig {
        minSdkVersion Versions.MIN_SDK
        targetSdkVersion Versions.TARGET_SDK
        versionCode = 44
        versionName = '1.15.0'
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true
        testInstrumentationRunner 'com.instructure.teacher.ui.espresso.TeacherHiltTestRunner'
        testInstrumentationRunnerArguments disableAnalytics: 'true'

        /* BuildConfig fields */
        buildConfigField "boolean", "IS_TESTING", "false"

        /* Release Versions */
        buildConfigField "boolean", "POINT_ONE", "true"
        buildConfigField "boolean", "POINT_TWO", "true"
        buildConfigField "boolean", "POINT_THREE", "true"
        buildConfigField "boolean", "POINT_FOUR", "true"
        buildConfigField "boolean", "POINT_FIVE", "true"
        buildConfigField "boolean", "POINT_SIX", "true"
        buildConfigField "boolean", "POINT_SEVEN", "true"
        buildConfigField "boolean", "POINT_EIGHT", "true"
        buildConfigField "boolean", "POINT_NINE", "true"

        /* Add private data */
        PrivateData.merge(project, "teacher")
        buildConfigField "String", "PSPDFKIT_LICENSE_KEY", "\"$pspdfkitLicenseKey\""
    }

    bundle {
        language {
            // Specifies that the app bundle should not support configuration APKs for language resources. These
            // resources are instead packaged with each base and dynamic feature APK.
            enableSplit = false
        }
    }

    flavorDimensions "icecream"
    productFlavors {

        dev {
            dimension "icecream"
            matchingFallbacks = ['debug']
        }

        prod {
            dimension "icecream"
        }

        qa {
            dimension "icecream"
            buildConfigField "boolean", "IS_TESTING", "true"
        }
    }

    buildTypes {
        debug {
            testCoverageEnabled = coverageEnabled
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            minifyEnabled false
            shrinkResources false
            pseudoLocalesEnabled true

            firebaseCrashlytics {
                // If you don't need crash reporting for your debug build,
                // you can speed up your build by disabling mapping file uploading.
                mappingFileUploadEnabled false
            }
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            buildConfigField "boolean", "POINT_ONE", "true"
            buildConfigField "boolean", "POINT_TWO", "true"
            buildConfigField "boolean", "POINT_THREE", "true"
            buildConfigField "boolean", "POINT_FOUR", "true"
            buildConfigField "boolean", "POINT_FIVE", "true"
            buildConfigField "boolean", "POINT_SIX", "false"
            buildConfigField "boolean", "POINT_SEVEN", "false"
            buildConfigField "boolean", "POINT_EIGHT", "false"
            buildConfigField "boolean", "POINT_NINE", "false"

        }
    }

    configurations.all {
        resolutionStrategy {
            force 'android.arch.lifecycle:runtime:1.0.3'

            force Libs.KOTLIN_COROUTINES_CORE
        }
    }

    lintOptions {
        abortOnError false
    }

    dexOptions {
        javaMaxHeapSize "4g"
    }

    lintOptions {
        disable 'MissingTranslation'
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
        // Required for Espresso.
        exclude 'META-INF/maven/com.google.guava/guava/pom.properties'
        exclude 'META-INF/maven/com.google.guava/guava/pom.xml'
    }

    testOptions {
        animationsDisabled = true
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
        unitTests.includeAndroidResources = true
    }

    registerTransform(
            new ProjectTransformer(
                    android,
                    new MasqueradeUITransformer('com.instructure.teacher.activities.LoginActivity.class'),
                    new LocaleTransformer(project)
            )
    )

    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    buildFeatures {
        dataBinding true
    }
}

androidExtensions {
    experimental = true
}

dependencies {
    /* Modules */
    implementation project(path: ':login-api-2')
    implementation project(path: ':rceditor')
    implementation project(path: ':annotations')
    implementation project(path: ':interactions')

    /* Kotlin */
    implementation Libs.KOTLIN_STD_LIB

    /* Mobius */
    implementation Libs.MOBIUS_CORE
    testImplementation Libs.MOBIUS_TEST
    implementation Libs.MOBIUS_ANDROID
    implementation Libs.MOBIUS_EXTRAS

    implementation (Libs.FIREBASE_ANALYTICS) {
        transitive = true
    }

    implementation (Libs.FIREBASE_CRASHLYTICS) {
        transitive = true
    }

    /* Test Dependencies */
    testImplementation Libs.JUNIT
    testImplementation Libs.ROBOLECTRIC
    testImplementation Libs.ANDROIDX_TEST_JUNIT
    testImplementation Libs.MOCKK
    testImplementation Libs.KOTLIN_COROUTINES_TEST
    testImplementation Libs.THREETEN_BP

    /* AndroidTest Dependencies */
    androidTestImplementation project(':espresso')
    androidTestImplementation project(':dataseedingapi')
    androidTestImplementation Libs.JUNIT
    androidTestImplementation project(path: ':panda_annotations')

    androidTestUtil(Libs.TEST_ORCHESTRATOR) {
        exclude module: 'support-annotations'
    }

    /* Sliding Panel */
    implementation Libs.SLIDING_UP_PANEL

    /* Media handling */
    implementation Libs.ANDROID_SVG
    implementation Libs.PHOTO_VIEW

    /* Flexbox Layout */
    implementation Libs.FLEXBOX_LAYOUT
    implementation Libs.KEYBOARD_VISIBILITY_LISTENER

    /* Support libs */
    implementation Libs.ANDROIDX_APPCOMPAT
    implementation Libs.ANDROIDX_BROWSER
    implementation Libs.ANDROIDX_CARDVIEW
    implementation Libs.ANDROIDX_CONSTRAINT_LAYOUT
    implementation Libs.ANDROIDX_DESIGN
    implementation Libs.ANDROIDX_PALETTE
    implementation Libs.ANDROIDX_PERCENT
    implementation Libs.ANDROIDX_ANNOTATION
    implementation Libs.ANDROIDX_FRAGMENT
    implementation Libs.ANDROIDX_VECTOR
    implementation Libs.PLAY_CORE
    implementation Libs.PLAY_CORE_KTX
    implementation Libs.FIREBASE_MESSAGING
    testImplementation Libs.ANDROIDX_CORE_TESTING

    /* AAC */
    implementation Libs.VIEW_MODEL
    implementation Libs.LIVE_DATA
    implementation Libs.VIEW_MODE_SAVED_STATE
    implementation Libs.FRAGMENT_KTX
    kapt Libs.LIFECYCLE_COMPILER

    /* DI */
    implementation Libs.HILT
    kapt Libs.HILT_COMPILER
    androidTestImplementation Libs.HILT_TESTING
    kaptAndroidTestQa Libs.HILT_TESTING_COMPILER

    androidTestImplementation Libs.UI_AUTOMATOR
}

apply plugin: 'com.google.gms.google-services'

if (coverageEnabled) {
    // ./gradlew -Pcoverage firebaseJacoco
    task firebaseJacoco(type: JacocoReport) {
        group = "Reporting"
        description = "Generate Jacoco coverage reports for Firebase test lab."

        def productFlavor = 'qa'
        def buildType = 'debug'

        classDirectories.setFrom fileTree(
                dir: "${project.buildDir}/tmp/kotlin-classes/qaDebug",
                excludes: ['**/R.class',
                           '**/R$*.class',
                           '**/*$ViewInjector*.*',
                           '**/*$ViewBinder*.*',
                           '**/BuildConfig.*',
                           '**/Manifest*.*']
        )

        // project.buildDir is /canvas-android/apps/teacher/build
        sourceDirectories.setFrom files(['src/main/java'] + android.sourceSets[productFlavor].java.srcDirs)
        executionData.setFrom fileTree(dir: "results", includes: ['**/*.ec'])

        reports {
            // default path: /canvas-android/apps/teacher/build/reports/jacoco/firebaseJacoco/html/
            html.enabled true
            csv.enabled  false
            xml.enabled  false
        }
    }

    task combinedJacoco(type: JacocoReport) {
        group = "Reporting"
        description = "Generate Jacoco coverage reports for FTL + unit tests."

        def productFlavor = 'qa'
        def buildType = 'debug'

        classDirectories.setFrom fileTree(
                dir: "${project.buildDir}/tmp/kotlin-classes/qaDebug",
                excludes: ['**/R.class',
                           '**/R$*.class',
                           '**/*$ViewInjector*.*',
                           '**/*$ViewBinder*.*',
                           '**/BuildConfig.*',
                           '**/Manifest*.*'],
                //includes: ['**/com/instructure/*']
        )

        // project.buildDir is /canvas-android/apps/teacher/build
        sourceDirectories.setFrom files(['src/main/java'] + android.sourceSets[productFlavor].java.srcDirs)
        executionData.setFrom fileTree(dir: ".", includes: ['results/**/*.ec', '**/testQaDebugUnitTest.exec'])

        reports {
            // default path: /canvas-android/apps/teacher/build/reports/jacoco/firebaseJacoco/html/
            html.enabled true
            csv.enabled  false
            xml.enabled  false
        }
    }
}

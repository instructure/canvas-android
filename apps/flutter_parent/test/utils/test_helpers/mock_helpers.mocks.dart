// Mocks generated by Mockito 5.4.2 from annotations
// in flutter_parent/test/utils/test_helpers/mock_helpers.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i22;
import 'dart:convert' as _i27;
import 'dart:io' as _i25;
import 'dart:ui' as _i57;

import 'package:android_intent_plus/android_intent.dart' as _i54;
import 'package:barcode_scan2/barcode_scan2.dart' as _i10;
import 'package:built_collection/built_collection.dart' as _i111;
import 'package:dio/dio.dart' as _i4;
import 'package:firebase_core/firebase_core.dart' as _i24;
import 'package:firebase_crashlytics/firebase_crashlytics.dart' as _i82;
import 'package:firebase_remote_config/firebase_remote_config.dart' as _i95;
import 'package:firebase_remote_config_platform_interface/firebase_remote_config_platform_interface.dart'
    as _i31;
import 'package:fluro/fluro.dart' as _i93;
import 'package:flutter/foundation.dart' as _i26;
import 'package:flutter/material.dart' as _i40;
import 'package:flutter/services.dart' as _i32;
import 'package:flutter_downloader/flutter_downloader.dart' as _i133;
import 'package:flutter_local_notifications/flutter_local_notifications.dart'
    as _i89;
import 'package:flutter_parent/l10n/app_localizations.dart' as _i61;
import 'package:flutter_parent/models/account_notification.dart' as _i38;
import 'package:flutter_parent/models/account_permissions.dart' as _i3;
import 'package:flutter_parent/models/alert.dart' as _i35;
import 'package:flutter_parent/models/alert_threshold.dart' as _i56;
import 'package:flutter_parent/models/announcement.dart' as _i37;
import 'package:flutter_parent/models/assignment.dart' as _i6;
import 'package:flutter_parent/models/assignment_group.dart' as _i59;
import 'package:flutter_parent/models/attachment.dart' as _i39;
import 'package:flutter_parent/models/authenticated_url.dart' as _i29;
import 'package:flutter_parent/models/calendar_filter.dart' as _i66;
import 'package:flutter_parent/models/canvas_page.dart' as _i16;
import 'package:flutter_parent/models/canvas_token.dart' as _i8;
import 'package:flutter_parent/models/color_change_response.dart' as _i45;
import 'package:flutter_parent/models/conversation.dart' as _i21;
import 'package:flutter_parent/models/course.dart' as _i12;
import 'package:flutter_parent/models/course_permissions.dart' as _i15;
import 'package:flutter_parent/models/course_settings.dart' as _i14;
import 'package:flutter_parent/models/course_tab.dart' as _i69;
import 'package:flutter_parent/models/enrollment.dart' as _i71;
import 'package:flutter_parent/models/feature_flags.dart' as _i46;
import 'package:flutter_parent/models/grading_period.dart' as _i74;
import 'package:flutter_parent/models/grading_period_response.dart' as _i13;
import 'package:flutter_parent/models/help_link.dart' as _i110;
import 'package:flutter_parent/models/message.dart' as _i116;
import 'package:flutter_parent/models/mobile_verify_result.dart' as _i9;
import 'package:flutter_parent/models/planner_item.dart' as _i108;
import 'package:flutter_parent/models/recipient.dart' as _i84;
import 'package:flutter_parent/models/reminder.dart' as _i60;
import 'package:flutter_parent/models/schedule_item.dart' as _i23;
import 'package:flutter_parent/models/school_domain.dart' as _i50;
import 'package:flutter_parent/models/terms_of_service.dart' as _i2;
import 'package:flutter_parent/models/unread_count.dart' as _i28;
import 'package:flutter_parent/models/user.dart' as _i17;
import 'package:flutter_parent/models/user_color.dart' as _i99;
import 'package:flutter_parent/models/user_colors.dart' as _i44;
import 'package:flutter_parent/network/api/accounts_api.dart' as _i49;
import 'package:flutter_parent/network/api/alert_api.dart' as _i55;
import 'package:flutter_parent/network/api/announcement_api.dart' as _i105;
import 'package:flutter_parent/network/api/assignment_api.dart' as _i58;
import 'package:flutter_parent/network/api/auth_api.dart' as _i62;
import 'package:flutter_parent/network/api/calendar_events_api.dart' as _i64;
import 'package:flutter_parent/network/api/course_api.dart' as _i68;
import 'package:flutter_parent/network/api/enrollments_api.dart' as _i78;
import 'package:flutter_parent/network/api/error_report_api.dart' as _i79;
import 'package:flutter_parent/network/api/features_api.dart' as _i127;
import 'package:flutter_parent/network/api/file_api.dart' as _i112;
import 'package:flutter_parent/network/api/inbox_api.dart' as _i83;
import 'package:flutter_parent/network/api/oauth_api.dart' as _i86;
import 'package:flutter_parent/network/api/page_api.dart' as _i88;
import 'package:flutter_parent/network/api/planner_api.dart' as _i107;
import 'package:flutter_parent/network/api/user_api.dart' as _i124;
import 'package:flutter_parent/network/utils/analytics.dart' as _i52;
import 'package:flutter_parent/network/utils/paged_list.dart' as _i5;
import 'package:flutter_parent/screens/account_creation/account_creation_interactor.dart'
    as _i51;
import 'package:flutter_parent/screens/alert_thresholds/alert_thresholds_interactor.dart'
    as _i102;
import 'package:flutter_parent/screens/alerts/alerts_interactor.dart' as _i34;
import 'package:flutter_parent/screens/announcements/announcement_details_interactor.dart'
    as _i103;
import 'package:flutter_parent/screens/announcements/announcement_details_screen.dart'
    as _i104;
import 'package:flutter_parent/screens/announcements/announcement_view_state.dart'
    as _i36;
import 'package:flutter_parent/screens/assignments/assignment_details_interactor.dart'
    as _i7;
import 'package:flutter_parent/screens/aup/acceptable_use_policy_interactor.dart'
    as _i106;
import 'package:flutter_parent/screens/calendar/calendar_widget/calendar_filter_screen/calendar_filter_list_interactor.dart'
    as _i67;
import 'package:flutter_parent/screens/courses/courses_interactor.dart' as _i72;
import 'package:flutter_parent/screens/courses/details/course_details_interactor.dart'
    as _i70;
import 'package:flutter_parent/screens/courses/details/course_details_model.dart'
    as _i18;
import 'package:flutter_parent/screens/courses/routing_shell/course_routing_shell_interactor.dart'
    as _i19;
import 'package:flutter_parent/screens/courses/routing_shell/course_routing_shell_screen.dart'
    as _i75;
import 'package:flutter_parent/screens/dashboard/alert_notifier.dart' as _i42;
import 'package:flutter_parent/screens/dashboard/dashboard_interactor.dart'
    as _i121;
import 'package:flutter_parent/screens/dashboard/inbox_notifier.dart' as _i41;
import 'package:flutter_parent/screens/domain_search/domain_search_interactor.dart'
    as _i120;
import 'package:flutter_parent/screens/events/event_details_interactor.dart'
    as _i81;
import 'package:flutter_parent/screens/help/help_screen_interactor.dart'
    as _i109;
import 'package:flutter_parent/screens/inbox/attachment_utils/attachment_handler.dart'
    as _i76;
import 'package:flutter_parent/screens/inbox/conversation_details/conversation_details_interactor.dart'
    as _i115;
import 'package:flutter_parent/screens/inbox/conversation_list/conversation_list_interactor.dart'
    as _i117;
import 'package:flutter_parent/screens/inbox/create_conversation/create_conversation_interactor.dart'
    as _i20;
import 'package:flutter_parent/screens/inbox/reply/conversation_reply_interactor.dart'
    as _i119;
import 'package:flutter_parent/screens/manage_students/manage_students_interactor.dart'
    as _i122;
import 'package:flutter_parent/screens/manage_students/student_color_picker_interactor.dart'
    as _i123;
import 'package:flutter_parent/screens/masquerade/masquerade_screen_interactor.dart'
    as _i125;
import 'package:flutter_parent/screens/pairing/pairing_interactor.dart' as _i87;
import 'package:flutter_parent/screens/pairing/pairing_util.dart' as _i91;
import 'package:flutter_parent/screens/qr_login/qr_login_tutorial_screen_interactor.dart'
    as _i43;
import 'package:flutter_parent/screens/settings/settings_interactor.dart'
    as _i126;
import 'package:flutter_parent/screens/splash/splash_screen_interactor.dart'
    as _i47;
import 'package:flutter_parent/screens/web_login/web_login_interactor.dart'
    as _i100;
import 'package:flutter_parent/utils/base_model.dart' as _i73;
import 'package:flutter_parent/utils/common_widgets/error_report/error_report_interactor.dart'
    as _i80;
import 'package:flutter_parent/utils/common_widgets/view_attachment/fetcher/attachment_fetcher_interactor.dart'
    as _i128;
import 'package:flutter_parent/utils/common_widgets/view_attachment/view_attachment_interactor.dart'
    as _i134;
import 'package:flutter_parent/utils/common_widgets/view_attachment/viewers/audio_video_attachment_viewer_interactor.dart'
    as _i129;
import 'package:flutter_parent/utils/common_widgets/web_view/web_content_interactor.dart'
    as _i101;
import 'package:flutter_parent/utils/db/calendar_filter_db.dart' as _i65;
import 'package:flutter_parent/utils/db/reminder_db.dart' as _i94;
import 'package:flutter_parent/utils/db/user_colors_db.dart' as _i98;
import 'package:flutter_parent/utils/notification_util.dart' as _i85;
import 'package:flutter_parent/utils/permission_handler.dart' as _i130;
import 'package:flutter_parent/utils/qr_utils.dart' as _i30;
import 'package:flutter_parent/utils/quick_nav.dart' as _i92;
import 'package:flutter_parent/utils/url_launcher.dart' as _i97;
import 'package:flutter_parent/utils/veneers/android_intent_veneer.dart'
    as _i53;
import 'package:flutter_parent/utils/veneers/barcode_scan_veneer.dart' as _i63;
import 'package:flutter_parent/utils/veneers/flutter_downloader_veneer.dart'
    as _i132;
import 'package:flutter_parent/utils/veneers/flutter_snackbar_veneer.dart'
    as _i96;
import 'package:flutter_parent/utils/veneers/path_provider_veneer.dart'
    as _i113;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i77;
import 'package:path_provider/path_provider.dart' as _i114;
import 'package:permission_handler/permission_handler.dart' as _i131;
import 'package:sqflite/sqflite.dart' as _i11;
import 'package:timezone/timezone.dart' as _i90;
import 'package:tuple/tuple.dart' as _i118;
import 'package:video_player/video_player.dart' as _i48;
import 'package:webview_flutter/webview_flutter.dart' as _i33;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTermsOfService_0 extends _i1.SmartFake
    implements _i2.TermsOfService {
  _FakeTermsOfService_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAccountPermissions_1 extends _i1.SmartFake
    implements _i3.AccountPermissions {
  _FakeAccountPermissions_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_2<T> extends _i1.SmartFake implements _i4.Response<T> {
  _FakeResponse_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePagedList_3<T> extends _i1.SmartFake implements _i5.PagedList<T> {
  _FakePagedList_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAssignment_4 extends _i1.SmartFake implements _i6.Assignment {
  _FakeAssignment_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAssignmentDetails_5 extends _i1.SmartFake
    implements _i7.AssignmentDetails {
  _FakeAssignmentDetails_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCanvasToken_6 extends _i1.SmartFake implements _i8.CanvasToken {
  _FakeCanvasToken_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMobileVerifyResult_7 extends _i1.SmartFake
    implements _i9.MobileVerifyResult {
  _FakeMobileVerifyResult_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeScanResult_8 extends _i1.SmartFake implements _i10.ScanResult {
  _FakeScanResult_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDatabase_9 extends _i1.SmartFake implements _i11.Database {
  _FakeDatabase_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCourse_10 extends _i1.SmartFake implements _i12.Course {
  _FakeCourse_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGradingPeriodResponse_11 extends _i1.SmartFake
    implements _i13.GradingPeriodResponse {
  _FakeGradingPeriodResponse_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCourseSettings_12 extends _i1.SmartFake
    implements _i14.CourseSettings {
  _FakeCourseSettings_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCoursePermissions_13 extends _i1.SmartFake
    implements _i15.CoursePermissions {
  _FakeCoursePermissions_13(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCanvasPage_14 extends _i1.SmartFake implements _i16.CanvasPage {
  _FakeCanvasPage_14(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUser_15 extends _i1.SmartFake implements _i17.User {
  _FakeUser_15(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGradeDetails_16 extends _i1.SmartFake implements _i18.GradeDetails {
  _FakeGradeDetails_16(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCourseShellData_17 extends _i1.SmartFake
    implements _i19.CourseShellData {
  _FakeCourseShellData_17(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCreateConversationData_18 extends _i1.SmartFake
    implements _i20.CreateConversationData {
  _FakeCreateConversationData_18(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeConversation_19 extends _i1.SmartFake implements _i21.Conversation {
  _FakeConversation_19(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFuture_20<T1> extends _i1.SmartFake implements _i22.Future<T1> {
  _FakeFuture_20(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeQueryCursor_21 extends _i1.SmartFake implements _i11.QueryCursor {
  _FakeQueryCursor_21(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBatch_22 extends _i1.SmartFake implements _i11.Batch {
  _FakeBatch_22(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBaseOptions_23 extends _i1.SmartFake implements _i4.BaseOptions {
  _FakeBaseOptions_23(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHttpClientAdapter_24 extends _i1.SmartFake
    implements _i4.HttpClientAdapter {
  _FakeHttpClientAdapter_24(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTransformer_25 extends _i1.SmartFake implements _i4.Transformer {
  _FakeTransformer_25(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeInterceptors_26 extends _i1.SmartFake implements _i4.Interceptors {
  _FakeInterceptors_26(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeScheduleItem_27 extends _i1.SmartFake implements _i23.ScheduleItem {
  _FakeScheduleItem_27(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFirebaseApp_28 extends _i1.SmartFake implements _i24.FirebaseApp {
  _FakeFirebaseApp_28(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDuration_29 extends _i1.SmartFake implements Duration {
  _FakeDuration_29(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHttpClientRequest_30 extends _i1.SmartFake
    implements _i25.HttpClientRequest {
  _FakeHttpClientRequest_30(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUri_31 extends _i1.SmartFake implements Uri {
  _FakeUri_31(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHttpHeaders_32 extends _i1.SmartFake implements _i25.HttpHeaders {
  _FakeHttpHeaders_32(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHttpClientResponse_33 extends _i1.SmartFake
    implements _i26.HttpClientResponse {
  _FakeHttpClientResponse_33(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEncoding_34 extends _i1.SmartFake implements _i27.Encoding {
  _FakeEncoding_34(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSocket_35 extends _i1.SmartFake implements _i25.Socket {
  _FakeSocket_35(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamSubscription_36<T> extends _i1.SmartFake
    implements _i22.StreamSubscription<T> {
  _FakeStreamSubscription_36(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUnreadCount_37 extends _i1.SmartFake implements _i28.UnreadCount {
  _FakeUnreadCount_37(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAuthenticatedUrl_38 extends _i1.SmartFake
    implements _i29.AuthenticatedUrl {
  _FakeAuthenticatedUrl_38(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeQRPairingScanResult_39 extends _i1.SmartFake
    implements _i30.QRPairingScanResult {
  _FakeQRPairingScanResult_39(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDateTime_40 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_40(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRemoteConfigSettings_41 extends _i1.SmartFake
    implements _i31.RemoteConfigSettings {
  _FakeRemoteConfigSettings_41(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRemoteConfigValue_42 extends _i1.SmartFake
    implements _i31.RemoteConfigValue {
  _FakeRemoteConfigValue_42(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMethodChannel_43 extends _i1.SmartFake
    implements _i32.MethodChannel {
  _FakeMethodChannel_43(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeJavascriptChannel_44 extends _i1.SmartFake
    implements _i33.JavascriptChannel {
  _FakeJavascriptChannel_44(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAlertsList_45 extends _i1.SmartFake implements _i34.AlertsList {
  _FakeAlertsList_45(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAlert_46 extends _i1.SmartFake implements _i35.Alert {
  _FakeAlert_46(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAnnouncementViewState_47 extends _i1.SmartFake
    implements _i36.AnnouncementViewState {
  _FakeAnnouncementViewState_47(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAnnouncement_48 extends _i1.SmartFake implements _i37.Announcement {
  _FakeAnnouncement_48(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAccountNotification_49 extends _i1.SmartFake
    implements _i38.AccountNotification {
  _FakeAccountNotification_49(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAttachment_50 extends _i1.SmartFake implements _i39.Attachment {
  _FakeAttachment_50(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFile_51 extends _i1.SmartFake implements _i25.File {
  _FakeFile_51(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDirectory_52 extends _i1.SmartFake implements _i25.Directory {
  _FakeDirectory_52(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWidget_53 extends _i1.SmartFake implements _i40.Widget {
  _FakeWidget_53(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString(
          {_i26.DiagnosticLevel? minLevel = _i26.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeInheritedWidget_54 extends _i1.SmartFake
    implements _i40.InheritedWidget {
  _FakeInheritedWidget_54(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString(
          {_i26.DiagnosticLevel? minLevel = _i26.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeDiagnosticsNode_55 extends _i1.SmartFake
    implements _i26.DiagnosticsNode {
  _FakeDiagnosticsNode_55(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({
    _i26.TextTreeConfiguration? parentConfiguration,
    _i26.DiagnosticLevel? minLevel = _i26.DiagnosticLevel.info,
  }) =>
      super.toString();
}

class _FakeInboxCountNotifier_56 extends _i1.SmartFake
    implements _i41.InboxCountNotifier {
  _FakeInboxCountNotifier_56(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAlertCountNotifier_57 extends _i1.SmartFake
    implements _i42.AlertCountNotifier {
  _FakeAlertCountNotifier_57(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBarcodeScanResult_58 extends _i1.SmartFake
    implements _i43.BarcodeScanResult {
  _FakeBarcodeScanResult_58(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserColors_59 extends _i1.SmartFake implements _i44.UserColors {
  _FakeUserColors_59(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeColorChangeResponse_60 extends _i1.SmartFake
    implements _i45.ColorChangeResponse {
  _FakeColorChangeResponse_60(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFeatureFlags_61 extends _i1.SmartFake implements _i46.FeatureFlags {
  _FakeFeatureFlags_61(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSplashScreenData_62 extends _i1.SmartFake
    implements _i47.SplashScreenData {
  _FakeSplashScreenData_62(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCancelToken_63 extends _i1.SmartFake implements _i4.CancelToken {
  _FakeCancelToken_63(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDioException_64 extends _i1.SmartFake implements _i4.DioException {
  _FakeDioException_64(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeVideoPlayerValue_65 extends _i1.SmartFake
    implements _i48.VideoPlayerValue {
  _FakeVideoPlayerValue_65(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AccountsApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockAccountsApi extends _i1.Mock implements _i49.AccountsApi {
  @override
  _i22.Future<List<_i50.SchoolDomain>> searchDomains(String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchDomains,
          [query],
        ),
        returnValue:
            _i22.Future<List<_i50.SchoolDomain>>.value(<_i50.SchoolDomain>[]),
        returnValueForMissingStub:
            _i22.Future<List<_i50.SchoolDomain>>.value(<_i50.SchoolDomain>[]),
      ) as _i22.Future<List<_i50.SchoolDomain>>);
  @override
  _i22.Future<_i2.TermsOfService> getTermsOfService() => (super.noSuchMethod(
        Invocation.method(
          #getTermsOfService,
          [],
        ),
        returnValue:
            _i22.Future<_i2.TermsOfService>.value(_FakeTermsOfService_0(
          this,
          Invocation.method(
            #getTermsOfService,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i2.TermsOfService>.value(_FakeTermsOfService_0(
          this,
          Invocation.method(
            #getTermsOfService,
            [],
          ),
        )),
      ) as _i22.Future<_i2.TermsOfService>);
  @override
  _i22.Future<_i2.TermsOfService?> getTermsOfServiceForAccount(
    String? accountId,
    String? domain,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTermsOfServiceForAccount,
          [
            accountId,
            domain,
          ],
        ),
        returnValue: _i22.Future<_i2.TermsOfService?>.value(),
        returnValueForMissingStub: _i22.Future<_i2.TermsOfService?>.value(),
      ) as _i22.Future<_i2.TermsOfService?>);
  @override
  _i22.Future<_i3.AccountPermissions> getAccountPermissions() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAccountPermissions,
          [],
        ),
        returnValue:
            _i22.Future<_i3.AccountPermissions>.value(_FakeAccountPermissions_1(
          this,
          Invocation.method(
            #getAccountPermissions,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i3.AccountPermissions>.value(_FakeAccountPermissions_1(
          this,
          Invocation.method(
            #getAccountPermissions,
            [],
          ),
        )),
      ) as _i22.Future<_i3.AccountPermissions>);
  @override
  _i22.Future<bool> getPairingAllowed() => (super.noSuchMethod(
        Invocation.method(
          #getPairingAllowed,
          [],
        ),
        returnValue: _i22.Future<bool>.value(false),
        returnValueForMissingStub: _i22.Future<bool>.value(false),
      ) as _i22.Future<bool>);
  @override
  _i22.Future<_i4.Response<dynamic>> createNewAccount(
    String? accountId,
    String? pairingCode,
    String? fullname,
    String? email,
    String? password,
    String? domain,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createNewAccount,
          [
            accountId,
            pairingCode,
            fullname,
            email,
            password,
            domain,
          ],
        ),
        returnValue:
            _i22.Future<_i4.Response<dynamic>>.value(_FakeResponse_2<dynamic>(
          this,
          Invocation.method(
            #createNewAccount,
            [
              accountId,
              pairingCode,
              fullname,
              email,
              password,
              domain,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i4.Response<dynamic>>.value(_FakeResponse_2<dynamic>(
          this,
          Invocation.method(
            #createNewAccount,
            [
              accountId,
              pairingCode,
              fullname,
              email,
              password,
              domain,
            ],
          ),
        )),
      ) as _i22.Future<_i4.Response<dynamic>>);
}

/// A class which mocks [AccountCreationInteractor].
///
/// See the documentation for Mockito's code generation for more information.
class MockAccountCreationInteractor extends _i1.Mock
    implements _i51.AccountCreationInteractor {
  @override
  _i22.Future<_i2.TermsOfService?> getToSForAccount(
    String? accountId,
    String? domain,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getToSForAccount,
          [
            accountId,
            domain,
          ],
        ),
        returnValue: _i22.Future<_i2.TermsOfService?>.value(),
        returnValueForMissingStub: _i22.Future<_i2.TermsOfService?>.value(),
      ) as _i22.Future<_i2.TermsOfService?>);
  @override
  _i22.Future<_i4.Response<dynamic>> createNewAccount(
    String? accountId,
    String? pairingCode,
    String? fullname,
    String? email,
    String? password,
    String? domain,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createNewAccount,
          [
            accountId,
            pairingCode,
            fullname,
            email,
            password,
            domain,
          ],
        ),
        returnValue:
            _i22.Future<_i4.Response<dynamic>>.value(_FakeResponse_2<dynamic>(
          this,
          Invocation.method(
            #createNewAccount,
            [
              accountId,
              pairingCode,
              fullname,
              email,
              password,
              domain,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i4.Response<dynamic>>.value(_FakeResponse_2<dynamic>(
          this,
          Invocation.method(
            #createNewAccount,
            [
              accountId,
              pairingCode,
              fullname,
              email,
              password,
              domain,
            ],
          ),
        )),
      ) as _i22.Future<_i4.Response<dynamic>>);
}

/// A class which mocks [Analytics].
///
/// See the documentation for Mockito's code generation for more information.
class MockAnalytics extends _i1.Mock implements _i52.Analytics {
  @override
  void setCurrentScreen(String? screenName) => super.noSuchMethod(
        Invocation.method(
          #setCurrentScreen,
          [screenName],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void logEvent(
    String? event, {
    Map<String, dynamic>? extras = const {},
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #logEvent,
          [event],
          {#extras: extras},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void logMessage(String? message) => super.noSuchMethod(
        Invocation.method(
          #logMessage,
          [message],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setEnvironmentProperties() => super.noSuchMethod(
        Invocation.method(
          #setEnvironmentProperties,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [AndroidIntentVeneer].
///
/// See the documentation for Mockito's code generation for more information.
class MockAndroidIntentVeneer extends _i1.Mock
    implements _i53.AndroidIntentVeneer {
  @override
  dynamic launch(_i54.AndroidIntent? intent) => super.noSuchMethod(
        Invocation.method(
          #launch,
          [intent],
        ),
        returnValueForMissingStub: null,
      );
  @override
  dynamic launchPhone(String? phoneNumber) => super.noSuchMethod(
        Invocation.method(
          #launchPhone,
          [phoneNumber],
        ),
        returnValueForMissingStub: null,
      );
  @override
  dynamic launchEmail(String? url) => super.noSuchMethod(
        Invocation.method(
          #launchEmail,
          [url],
        ),
        returnValueForMissingStub: null,
      );
  @override
  dynamic launchEmailWithBody(
    String? subject,
    String? emailBody, {
    String? recipientEmail = r'mobilesupport@instructure.com',
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #launchEmailWithBody,
          [
            subject,
            emailBody,
          ],
          {#recipientEmail: recipientEmail},
        ),
        returnValueForMissingStub: null,
      );
  @override
  String encodeQueryParameters(Map<String, String>? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #encodeQueryParameters,
          [params],
        ),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
}

/// A class which mocks [AlertsApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockAlertsApi extends _i1.Mock implements _i55.AlertsApi {
  @override
  _i22.Future<List<_i35.Alert>?> getAlertsDepaginated(
    String? studentId,
    bool? forceRefresh,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAlertsDepaginated,
          [
            studentId,
            forceRefresh,
          ],
        ),
        returnValue: _i22.Future<List<_i35.Alert>?>.value(),
        returnValueForMissingStub: _i22.Future<List<_i35.Alert>?>.value(),
      ) as _i22.Future<List<_i35.Alert>?>);
  @override
  _i22.Future<_i35.Alert?> updateAlertWorkflow(
    String? studentId,
    String? alertId,
    String? workflowState,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateAlertWorkflow,
          [
            studentId,
            alertId,
            workflowState,
          ],
        ),
        returnValue: _i22.Future<_i35.Alert?>.value(),
        returnValueForMissingStub: _i22.Future<_i35.Alert?>.value(),
      ) as _i22.Future<_i35.Alert?>);
  @override
  _i22.Future<_i28.UnreadCount?> getUnreadCount(String? studentId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUnreadCount,
          [studentId],
        ),
        returnValue: _i22.Future<_i28.UnreadCount?>.value(),
        returnValueForMissingStub: _i22.Future<_i28.UnreadCount?>.value(),
      ) as _i22.Future<_i28.UnreadCount?>);
  @override
  _i22.Future<List<_i56.AlertThreshold>?> getAlertThresholds(
    String? studentId,
    bool? forceRefresh,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAlertThresholds,
          [
            studentId,
            forceRefresh,
          ],
        ),
        returnValue: _i22.Future<List<_i56.AlertThreshold>?>.value(),
        returnValueForMissingStub:
            _i22.Future<List<_i56.AlertThreshold>?>.value(),
      ) as _i22.Future<List<_i56.AlertThreshold>?>);
  @override
  _i22.Future<_i56.AlertThreshold?> deleteAlert(
          _i56.AlertThreshold? threshold) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteAlert,
          [threshold],
        ),
        returnValue: _i22.Future<_i56.AlertThreshold?>.value(),
        returnValueForMissingStub: _i22.Future<_i56.AlertThreshold?>.value(),
      ) as _i22.Future<_i56.AlertThreshold?>);
  @override
  _i22.Future<_i56.AlertThreshold?> createThreshold(
    _i35.AlertType? type,
    String? studentId, {
    String? value,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createThreshold,
          [
            type,
            studentId,
          ],
          {#value: value},
        ),
        returnValue: _i22.Future<_i56.AlertThreshold?>.value(),
        returnValueForMissingStub: _i22.Future<_i56.AlertThreshold?>.value(),
      ) as _i22.Future<_i56.AlertThreshold?>);
}

/// A class which mocks [AlertCountNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockAlertCountNotifier extends _i1.Mock
    implements _i42.AlertCountNotifier {
  @override
  int get value => (super.noSuchMethod(
        Invocation.getter(#value),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  set value(int? newValue) => super.noSuchMethod(
        Invocation.setter(
          #value,
          newValue,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  dynamic update(String? studentId) => super.noSuchMethod(
        Invocation.method(
          #update,
          [studentId],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addListener(_i57.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(_i57.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [AssignmentApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockAssignmentApi extends _i1.Mock implements _i58.AssignmentApi {
  @override
  _i22.Future<List<_i6.Assignment>> getAssignmentsWithSubmissionsDepaginated(
    int? courseId,
    int? studentId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAssignmentsWithSubmissionsDepaginated,
          [
            courseId,
            studentId,
          ],
        ),
        returnValue:
            _i22.Future<List<_i6.Assignment>>.value(<_i6.Assignment>[]),
        returnValueForMissingStub:
            _i22.Future<List<_i6.Assignment>>.value(<_i6.Assignment>[]),
      ) as _i22.Future<List<_i6.Assignment>>);
  @override
  _i22.Future<List<_i59.AssignmentGroup>>
      getAssignmentGroupsWithSubmissionsDepaginated(
    String? courseId,
    String? studentId,
    String? gradingPeriodId, {
    bool? forceRefresh = false,
  }) =>
          (super.noSuchMethod(
            Invocation.method(
              #getAssignmentGroupsWithSubmissionsDepaginated,
              [
                courseId,
                studentId,
                gradingPeriodId,
              ],
              {#forceRefresh: forceRefresh},
            ),
            returnValue: _i22.Future<List<_i59.AssignmentGroup>>.value(
                <_i59.AssignmentGroup>[]),
            returnValueForMissingStub:
                _i22.Future<List<_i59.AssignmentGroup>>.value(
                    <_i59.AssignmentGroup>[]),
          ) as _i22.Future<List<_i59.AssignmentGroup>>);
  @override
  _i22.Future<_i5.PagedList<_i6.Assignment>> getAssignmentsWithSubmissionsPaged(
    String? courseId,
    String? studentId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAssignmentsWithSubmissionsPaged,
          [
            courseId,
            studentId,
          ],
        ),
        returnValue: _i22.Future<_i5.PagedList<_i6.Assignment>>.value(
            _FakePagedList_3<_i6.Assignment>(
          this,
          Invocation.method(
            #getAssignmentsWithSubmissionsPaged,
            [
              courseId,
              studentId,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i5.PagedList<_i6.Assignment>>.value(
                _FakePagedList_3<_i6.Assignment>(
          this,
          Invocation.method(
            #getAssignmentsWithSubmissionsPaged,
            [
              courseId,
              studentId,
            ],
          ),
        )),
      ) as _i22.Future<_i5.PagedList<_i6.Assignment>>);
  @override
  _i22.Future<_i6.Assignment> getAssignment(
    String? courseId,
    String? assignmentId, {
    bool? forceRefresh = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAssignment,
          [
            courseId,
            assignmentId,
          ],
          {#forceRefresh: forceRefresh},
        ),
        returnValue: _i22.Future<_i6.Assignment>.value(_FakeAssignment_4(
          this,
          Invocation.method(
            #getAssignment,
            [
              courseId,
              assignmentId,
            ],
            {#forceRefresh: forceRefresh},
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i6.Assignment>.value(_FakeAssignment_4(
          this,
          Invocation.method(
            #getAssignment,
            [
              courseId,
              assignmentId,
            ],
            {#forceRefresh: forceRefresh},
          ),
        )),
      ) as _i22.Future<_i6.Assignment>);
}

/// A class which mocks [AssignmentDetailsInteractor].
///
/// See the documentation for Mockito's code generation for more information.
class MockAssignmentDetailsInteractor extends _i1.Mock
    implements _i7.AssignmentDetailsInteractor {
  @override
  _i22.Future<_i7.AssignmentDetails> loadAssignmentDetails(
    bool? forceRefresh,
    String? courseId,
    String? assignmentId,
    String? studentId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadAssignmentDetails,
          [
            forceRefresh,
            courseId,
            assignmentId,
            studentId,
          ],
        ),
        returnValue:
            _i22.Future<_i7.AssignmentDetails>.value(_FakeAssignmentDetails_5(
          this,
          Invocation.method(
            #loadAssignmentDetails,
            [
              forceRefresh,
              courseId,
              assignmentId,
              studentId,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i7.AssignmentDetails>.value(_FakeAssignmentDetails_5(
          this,
          Invocation.method(
            #loadAssignmentDetails,
            [
              forceRefresh,
              courseId,
              assignmentId,
              studentId,
            ],
          ),
        )),
      ) as _i22.Future<_i7.AssignmentDetails>);
  @override
  _i22.Future<_i7.AssignmentDetails> loadQuizDetails(
    bool? forceRefresh,
    String? courseId,
    String? assignmentId,
    String? studentId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadQuizDetails,
          [
            forceRefresh,
            courseId,
            assignmentId,
            studentId,
          ],
        ),
        returnValue:
            _i22.Future<_i7.AssignmentDetails>.value(_FakeAssignmentDetails_5(
          this,
          Invocation.method(
            #loadQuizDetails,
            [
              forceRefresh,
              courseId,
              assignmentId,
              studentId,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i7.AssignmentDetails>.value(_FakeAssignmentDetails_5(
          this,
          Invocation.method(
            #loadQuizDetails,
            [
              forceRefresh,
              courseId,
              assignmentId,
              studentId,
            ],
          ),
        )),
      ) as _i22.Future<_i7.AssignmentDetails>);
  @override
  _i22.Future<_i60.Reminder?> loadReminder(String? assignmentId) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadReminder,
          [assignmentId],
        ),
        returnValue: _i22.Future<_i60.Reminder?>.value(),
        returnValueForMissingStub: _i22.Future<_i60.Reminder?>.value(),
      ) as _i22.Future<_i60.Reminder?>);
  @override
  _i22.Future<void> createReminder(
    _i61.AppLocalizations? l10n,
    DateTime? date,
    String? assignmentId,
    String? courseId,
    String? title,
    String? body,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createReminder,
          [
            l10n,
            date,
            assignmentId,
            courseId,
            title,
            body,
          ],
        ),
        returnValue: _i22.Future<void>.value(),
        returnValueForMissingStub: _i22.Future<void>.value(),
      ) as _i22.Future<void>);
  @override
  _i22.Future<void> deleteReminder(_i60.Reminder? reminder) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteReminder,
          [reminder],
        ),
        returnValue: _i22.Future<void>.value(),
        returnValueForMissingStub: _i22.Future<void>.value(),
      ) as _i22.Future<void>);
}

/// A class which mocks [AuthApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthApi extends _i1.Mock implements _i62.AuthApi {
  @override
  _i22.Future<_i8.CanvasToken?> refreshToken() => (super.noSuchMethod(
        Invocation.method(
          #refreshToken,
          [],
        ),
        returnValue: _i22.Future<_i8.CanvasToken?>.value(),
        returnValueForMissingStub: _i22.Future<_i8.CanvasToken?>.value(),
      ) as _i22.Future<_i8.CanvasToken?>);
  @override
  _i22.Future<_i8.CanvasToken> getTokens(
    _i9.MobileVerifyResult? verifyResult,
    String? requestCode,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTokens,
          [
            verifyResult,
            requestCode,
          ],
        ),
        returnValue: _i22.Future<_i8.CanvasToken>.value(_FakeCanvasToken_6(
          this,
          Invocation.method(
            #getTokens,
            [
              verifyResult,
              requestCode,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i8.CanvasToken>.value(_FakeCanvasToken_6(
          this,
          Invocation.method(
            #getTokens,
            [
              verifyResult,
              requestCode,
            ],
          ),
        )),
      ) as _i22.Future<_i8.CanvasToken>);
  @override
  _i22.Future<_i9.MobileVerifyResult> mobileVerify(
    String? domain, {
    bool? forceBetaDomain = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #mobileVerify,
          [domain],
          {#forceBetaDomain: forceBetaDomain},
        ),
        returnValue:
            _i22.Future<_i9.MobileVerifyResult>.value(_FakeMobileVerifyResult_7(
          this,
          Invocation.method(
            #mobileVerify,
            [domain],
            {#forceBetaDomain: forceBetaDomain},
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i9.MobileVerifyResult>.value(_FakeMobileVerifyResult_7(
          this,
          Invocation.method(
            #mobileVerify,
            [domain],
            {#forceBetaDomain: forceBetaDomain},
          ),
        )),
      ) as _i22.Future<_i9.MobileVerifyResult>);
  @override
  _i22.Future<void> deleteToken(
    String? domain,
    String? token,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteToken,
          [
            domain,
            token,
          ],
        ),
        returnValue: _i22.Future<void>.value(),
        returnValueForMissingStub: _i22.Future<void>.value(),
      ) as _i22.Future<void>);
}

/// A class which mocks [BarcodeScanVeneer].
///
/// See the documentation for Mockito's code generation for more information.
class MockBarcodeScanVeneer extends _i1.Mock implements _i63.BarcodeScanVeneer {
  @override
  _i22.Future<_i10.ScanResult> scanBarcode() => (super.noSuchMethod(
        Invocation.method(
          #scanBarcode,
          [],
        ),
        returnValue: _i22.Future<_i10.ScanResult>.value(_FakeScanResult_8(
          this,
          Invocation.method(
            #scanBarcode,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i10.ScanResult>.value(_FakeScanResult_8(
          this,
          Invocation.method(
            #scanBarcode,
            [],
          ),
        )),
      ) as _i22.Future<_i10.ScanResult>);
  @override
  _i22.Future<int> getNumberOfCameras() => (super.noSuchMethod(
        Invocation.method(
          #getNumberOfCameras,
          [],
        ),
        returnValue: _i22.Future<int>.value(0),
        returnValueForMissingStub: _i22.Future<int>.value(0),
      ) as _i22.Future<int>);
}

/// A class which mocks [CalendarEventsApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockCalendarEventsApi extends _i1.Mock implements _i64.CalendarEventsApi {
  @override
  _i22.Future<List<_i23.ScheduleItem>> getAllCalendarEvents({
    bool? allEvents = false,
    String? type = r'event',
    String? startDate = null,
    String? endDate = null,
    List<String>? contexts = const [],
    bool? forceRefresh = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllCalendarEvents,
          [],
          {
            #allEvents: allEvents,
            #type: type,
            #startDate: startDate,
            #endDate: endDate,
            #contexts: contexts,
            #forceRefresh: forceRefresh,
          },
        ),
        returnValue:
            _i22.Future<List<_i23.ScheduleItem>>.value(<_i23.ScheduleItem>[]),
        returnValueForMissingStub:
            _i22.Future<List<_i23.ScheduleItem>>.value(<_i23.ScheduleItem>[]),
      ) as _i22.Future<List<_i23.ScheduleItem>>);
  @override
  _i22.Future<_i23.ScheduleItem?> getEvent(
    String? eventId,
    bool? forceRefresh,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getEvent,
          [
            eventId,
            forceRefresh,
          ],
        ),
        returnValue: _i22.Future<_i23.ScheduleItem?>.value(),
        returnValueForMissingStub: _i22.Future<_i23.ScheduleItem?>.value(),
      ) as _i22.Future<_i23.ScheduleItem?>);
  @override
  _i22.Future<List<_i23.ScheduleItem>> getUserCalendarItems(
    String? userId,
    DateTime? startDay,
    DateTime? endDay,
    String? type, {
    Set<String>? contexts = const {},
    bool? forceRefresh = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserCalendarItems,
          [
            userId,
            startDay,
            endDay,
            type,
          ],
          {
            #contexts: contexts,
            #forceRefresh: forceRefresh,
          },
        ),
        returnValue:
            _i22.Future<List<_i23.ScheduleItem>>.value(<_i23.ScheduleItem>[]),
        returnValueForMissingStub:
            _i22.Future<List<_i23.ScheduleItem>>.value(<_i23.ScheduleItem>[]),
      ) as _i22.Future<List<_i23.ScheduleItem>>);
  @override
  Map<String, Object> getQueryParams(
    DateTime? startDay,
    DateTime? endDay,
    String? type, {
    Set<String>? contexts = const {},
    bool? includeSubmissions = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getQueryParams,
          [
            startDay,
            endDay,
            type,
          ],
          {
            #contexts: contexts,
            #includeSubmissions: includeSubmissions,
          },
        ),
        returnValue: <String, Object>{},
        returnValueForMissingStub: <String, Object>{},
      ) as Map<String, Object>);
}

/// A class which mocks [CalendarFilterDb].
///
/// See the documentation for Mockito's code generation for more information.
class MockCalendarFilterDb extends _i1.Mock implements _i65.CalendarFilterDb {
  @override
  _i11.Database get db => (super.noSuchMethod(
        Invocation.getter(#db),
        returnValue: _FakeDatabase_9(
          this,
          Invocation.getter(#db),
        ),
        returnValueForMissingStub: _FakeDatabase_9(
          this,
          Invocation.getter(#db),
        ),
      ) as _i11.Database);
  @override
  set db(_i11.Database? _db) => super.noSuchMethod(
        Invocation.setter(
          #db,
          _db,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i22.Future<_i66.CalendarFilter?> insertOrUpdate(_i66.CalendarFilter? data) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertOrUpdate,
          [data],
        ),
        returnValue: _i22.Future<_i66.CalendarFilter?>.value(),
        returnValueForMissingStub: _i22.Future<_i66.CalendarFilter?>.value(),
      ) as _i22.Future<_i66.CalendarFilter?>);
  @override
  _i22.Future<_i66.CalendarFilter?> getById(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getById,
          [id],
        ),
        returnValue: _i22.Future<_i66.CalendarFilter?>.value(),
        returnValueForMissingStub: _i22.Future<_i66.CalendarFilter?>.value(),
      ) as _i22.Future<_i66.CalendarFilter?>);
  @override
  _i22.Future<_i66.CalendarFilter?> getByObserveeId(
    String? userDomain,
    String? userId,
    String? observeeId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getByObserveeId,
          [
            userDomain,
            userId,
            observeeId,
          ],
        ),
        returnValue: _i22.Future<_i66.CalendarFilter?>.value(),
        returnValueForMissingStub: _i22.Future<_i66.CalendarFilter?>.value(),
      ) as _i22.Future<_i66.CalendarFilter?>);
  @override
  _i22.Future<int> deleteById(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteById,
          [id],
        ),
        returnValue: _i22.Future<int>.value(0),
        returnValueForMissingStub: _i22.Future<int>.value(0),
      ) as _i22.Future<int>);
  @override
  _i22.Future<int> deleteAllForUser(
    String? userDomain,
    String? userId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteAllForUser,
          [
            userDomain,
            userId,
          ],
        ),
        returnValue: _i22.Future<int>.value(0),
        returnValueForMissingStub: _i22.Future<int>.value(0),
      ) as _i22.Future<int>);
}

/// A class which mocks [CalendarFilterListInteractor].
///
/// See the documentation for Mockito's code generation for more information.
class MockCalendarFilterListInteractor extends _i1.Mock
    implements _i67.CalendarFilterListInteractor {
  @override
  _i22.Future<List<_i12.Course>> getCoursesForSelectedStudent(
          {bool? isRefresh = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCoursesForSelectedStudent,
          [],
          {#isRefresh: isRefresh},
        ),
        returnValue: _i22.Future<List<_i12.Course>>.value(<_i12.Course>[]),
        returnValueForMissingStub:
            _i22.Future<List<_i12.Course>>.value(<_i12.Course>[]),
      ) as _i22.Future<List<_i12.Course>>);
}

/// A class which mocks [CourseApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockCourseApi extends _i1.Mock implements _i68.CourseApi {
  @override
  _i22.Future<List<_i12.Course>> getObserveeCourses(
          {bool? forceRefresh = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getObserveeCourses,
          [],
          {#forceRefresh: forceRefresh},
        ),
        returnValue: _i22.Future<List<_i12.Course>>.value(<_i12.Course>[]),
        returnValueForMissingStub:
            _i22.Future<List<_i12.Course>>.value(<_i12.Course>[]),
      ) as _i22.Future<List<_i12.Course>>);
  @override
  _i22.Future<_i12.Course> getCourse(
    String? courseId, {
    bool? forceRefresh = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCourse,
          [courseId],
          {#forceRefresh: forceRefresh},
        ),
        returnValue: _i22.Future<_i12.Course>.value(_FakeCourse_10(
          this,
          Invocation.method(
            #getCourse,
            [courseId],
            {#forceRefresh: forceRefresh},
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i12.Course>.value(_FakeCourse_10(
          this,
          Invocation.method(
            #getCourse,
            [courseId],
            {#forceRefresh: forceRefresh},
          ),
        )),
      ) as _i22.Future<_i12.Course>);
  @override
  _i22.Future<_i13.GradingPeriodResponse> getGradingPeriods(
    String? courseId, {
    bool? forceRefresh = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getGradingPeriods,
          [courseId],
          {#forceRefresh: forceRefresh},
        ),
        returnValue: _i22.Future<_i13.GradingPeriodResponse>.value(
            _FakeGradingPeriodResponse_11(
          this,
          Invocation.method(
            #getGradingPeriods,
            [courseId],
            {#forceRefresh: forceRefresh},
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i13.GradingPeriodResponse>.value(
                _FakeGradingPeriodResponse_11(
          this,
          Invocation.method(
            #getGradingPeriods,
            [courseId],
            {#forceRefresh: forceRefresh},
          ),
        )),
      ) as _i22.Future<_i13.GradingPeriodResponse>);
  @override
  _i22.Future<List<_i69.CourseTab>> getCourseTabs(
    String? courseId, {
    bool? forceRefresh = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCourseTabs,
          [courseId],
          {#forceRefresh: forceRefresh},
        ),
        returnValue:
            _i22.Future<List<_i69.CourseTab>>.value(<_i69.CourseTab>[]),
        returnValueForMissingStub:
            _i22.Future<List<_i69.CourseTab>>.value(<_i69.CourseTab>[]),
      ) as _i22.Future<List<_i69.CourseTab>>);
  @override
  _i22.Future<_i14.CourseSettings> getCourseSettings(
    String? courseId, {
    bool? forceRefresh = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCourseSettings,
          [courseId],
          {#forceRefresh: forceRefresh},
        ),
        returnValue:
            _i22.Future<_i14.CourseSettings>.value(_FakeCourseSettings_12(
          this,
          Invocation.method(
            #getCourseSettings,
            [courseId],
            {#forceRefresh: forceRefresh},
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i14.CourseSettings>.value(_FakeCourseSettings_12(
          this,
          Invocation.method(
            #getCourseSettings,
            [courseId],
            {#forceRefresh: forceRefresh},
          ),
        )),
      ) as _i22.Future<_i14.CourseSettings>);
  @override
  _i22.Future<_i15.CoursePermissions> getCoursePermissions(
    String? courseId, {
    bool? forceRefresh = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCoursePermissions,
          [courseId],
          {#forceRefresh: forceRefresh},
        ),
        returnValue:
            _i22.Future<_i15.CoursePermissions>.value(_FakeCoursePermissions_13(
          this,
          Invocation.method(
            #getCoursePermissions,
            [courseId],
            {#forceRefresh: forceRefresh},
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i15.CoursePermissions>.value(_FakeCoursePermissions_13(
          this,
          Invocation.method(
            #getCoursePermissions,
            [courseId],
            {#forceRefresh: forceRefresh},
          ),
        )),
      ) as _i22.Future<_i15.CoursePermissions>);
}

/// A class which mocks [CourseDetailsInteractor].
///
/// See the documentation for Mockito's code generation for more information.
class MockCourseDetailsInteractor extends _i1.Mock
    implements _i70.CourseDetailsInteractor {
  @override
  _i22.Future<_i12.Course> loadCourse(
    String? courseId, {
    bool? forceRefresh = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadCourse,
          [courseId],
          {#forceRefresh: forceRefresh},
        ),
        returnValue: _i22.Future<_i12.Course>.value(_FakeCourse_10(
          this,
          Invocation.method(
            #loadCourse,
            [courseId],
            {#forceRefresh: forceRefresh},
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i12.Course>.value(_FakeCourse_10(
          this,
          Invocation.method(
            #loadCourse,
            [courseId],
            {#forceRefresh: forceRefresh},
          ),
        )),
      ) as _i22.Future<_i12.Course>);
  @override
  _i22.Future<List<_i69.CourseTab>> loadCourseTabs(
    String? courseId, {
    bool? forceRefresh = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadCourseTabs,
          [courseId],
          {#forceRefresh: forceRefresh},
        ),
        returnValue:
            _i22.Future<List<_i69.CourseTab>>.value(<_i69.CourseTab>[]),
        returnValueForMissingStub:
            _i22.Future<List<_i69.CourseTab>>.value(<_i69.CourseTab>[]),
      ) as _i22.Future<List<_i69.CourseTab>>);
  @override
  _i22.Future<_i14.CourseSettings> loadCourseSettings(
    String? courseId, {
    bool? forceRefresh = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadCourseSettings,
          [courseId],
          {#forceRefresh: forceRefresh},
        ),
        returnValue:
            _i22.Future<_i14.CourseSettings>.value(_FakeCourseSettings_12(
          this,
          Invocation.method(
            #loadCourseSettings,
            [courseId],
            {#forceRefresh: forceRefresh},
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i14.CourseSettings>.value(_FakeCourseSettings_12(
          this,
          Invocation.method(
            #loadCourseSettings,
            [courseId],
            {#forceRefresh: forceRefresh},
          ),
        )),
      ) as _i22.Future<_i14.CourseSettings>);
  @override
  _i22.Future<List<_i59.AssignmentGroup>> loadAssignmentGroups(
    String? courseId,
    String? studentId,
    String? gradingPeriodId, {
    bool? forceRefresh = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadAssignmentGroups,
          [
            courseId,
            studentId,
            gradingPeriodId,
          ],
          {#forceRefresh: forceRefresh},
        ),
        returnValue: _i22.Future<List<_i59.AssignmentGroup>>.value(
            <_i59.AssignmentGroup>[]),
        returnValueForMissingStub:
            _i22.Future<List<_i59.AssignmentGroup>>.value(
                <_i59.AssignmentGroup>[]),
      ) as _i22.Future<List<_i59.AssignmentGroup>>);
  @override
  _i22.Future<_i13.GradingPeriodResponse> loadGradingPeriods(
    String? courseId, {
    bool? forceRefresh = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadGradingPeriods,
          [courseId],
          {#forceRefresh: forceRefresh},
        ),
        returnValue: _i22.Future<_i13.GradingPeriodResponse>.value(
            _FakeGradingPeriodResponse_11(
          this,
          Invocation.method(
            #loadGradingPeriods,
            [courseId],
            {#forceRefresh: forceRefresh},
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i13.GradingPeriodResponse>.value(
                _FakeGradingPeriodResponse_11(
          this,
          Invocation.method(
            #loadGradingPeriods,
            [courseId],
            {#forceRefresh: forceRefresh},
          ),
        )),
      ) as _i22.Future<_i13.GradingPeriodResponse>);
  @override
  _i22.Future<List<_i71.Enrollment>> loadEnrollmentsForGradingPeriod(
    String? courseId,
    String? studentId,
    String? gradingPeriodId, {
    bool? forceRefresh = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadEnrollmentsForGradingPeriod,
          [
            courseId,
            studentId,
            gradingPeriodId,
          ],
          {#forceRefresh: forceRefresh},
        ),
        returnValue:
            _i22.Future<List<_i71.Enrollment>>.value(<_i71.Enrollment>[]),
        returnValueForMissingStub:
            _i22.Future<List<_i71.Enrollment>>.value(<_i71.Enrollment>[]),
      ) as _i22.Future<List<_i71.Enrollment>>);
  @override
  _i22.Future<List<_i23.ScheduleItem>> loadScheduleItems(
    String? courseId,
    String? type,
    bool? refresh,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadScheduleItems,
          [
            courseId,
            type,
            refresh,
          ],
        ),
        returnValue:
            _i22.Future<List<_i23.ScheduleItem>>.value(<_i23.ScheduleItem>[]),
        returnValueForMissingStub:
            _i22.Future<List<_i23.ScheduleItem>>.value(<_i23.ScheduleItem>[]),
      ) as _i22.Future<List<_i23.ScheduleItem>>);
  @override
  _i22.Future<_i16.CanvasPage> loadFrontPage(
    String? courseId, {
    bool? forceRefresh = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadFrontPage,
          [courseId],
          {#forceRefresh: forceRefresh},
        ),
        returnValue: _i22.Future<_i16.CanvasPage>.value(_FakeCanvasPage_14(
          this,
          Invocation.method(
            #loadFrontPage,
            [courseId],
            {#forceRefresh: forceRefresh},
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i16.CanvasPage>.value(_FakeCanvasPage_14(
          this,
          Invocation.method(
            #loadFrontPage,
            [courseId],
            {#forceRefresh: forceRefresh},
          ),
        )),
      ) as _i22.Future<_i16.CanvasPage>);
}

/// A class which mocks [CoursesInteractor].
///
/// See the documentation for Mockito's code generation for more information.
class MockCoursesInteractor extends _i1.Mock implements _i72.CoursesInteractor {
  @override
  _i22.Future<List<_i12.Course>> getCourses({
    bool? isRefresh = false,
    String? studentId = null,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCourses,
          [],
          {
            #isRefresh: isRefresh,
            #studentId: studentId,
          },
        ),
        returnValue: _i22.Future<List<_i12.Course>>.value(<_i12.Course>[]),
        returnValueForMissingStub:
            _i22.Future<List<_i12.Course>>.value(<_i12.Course>[]),
      ) as _i22.Future<List<_i12.Course>>);
}

/// A class which mocks [CourseDetailsModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockCourseDetailsModel extends _i1.Mock
    implements _i18.CourseDetailsModel {
  @override
  _i17.User get student => (super.noSuchMethod(
        Invocation.getter(#student),
        returnValue: _FakeUser_15(
          this,
          Invocation.getter(#student),
        ),
        returnValueForMissingStub: _FakeUser_15(
          this,
          Invocation.getter(#student),
        ),
      ) as _i17.User);
  @override
  set student(_i17.User? _student) => super.noSuchMethod(
        Invocation.setter(
          #student,
          _student,
        ),
        returnValueForMissingStub: null,
      );
  @override
  String get courseId => (super.noSuchMethod(
        Invocation.getter(#courseId),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  set courseId(String? _courseId) => super.noSuchMethod(
        Invocation.setter(
          #courseId,
          _courseId,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set course(_i12.Course? _course) => super.noSuchMethod(
        Invocation.setter(
          #course,
          _course,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set courseSettings(_i14.CourseSettings? _courseSettings) =>
      super.noSuchMethod(
        Invocation.setter(
          #courseSettings,
          _courseSettings,
        ),
        returnValueForMissingStub: null,
      );
  @override
  List<_i69.CourseTab> get tabs => (super.noSuchMethod(
        Invocation.getter(#tabs),
        returnValue: <_i69.CourseTab>[],
        returnValueForMissingStub: <_i69.CourseTab>[],
      ) as List<_i69.CourseTab>);
  @override
  set tabs(List<_i69.CourseTab>? _tabs) => super.noSuchMethod(
        Invocation.setter(
          #tabs,
          _tabs,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get forceRefresh => (super.noSuchMethod(
        Invocation.getter(#forceRefresh),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  set forceRefresh(bool? _forceRefresh) => super.noSuchMethod(
        Invocation.setter(
          #forceRefresh,
          _forceRefresh,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get hasHomePageAsFrontPage => (super.noSuchMethod(
        Invocation.getter(#hasHomePageAsFrontPage),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get hasHomePageAsSyllabus => (super.noSuchMethod(
        Invocation.getter(#hasHomePageAsSyllabus),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get showSummary => (super.noSuchMethod(
        Invocation.getter(#showSummary),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i73.ViewState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i73.ViewState.Idle,
        returnValueForMissingStub: _i73.ViewState.Idle,
      ) as _i73.ViewState);
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i22.Future<void> loadData({bool? refreshCourse = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadData,
          [],
          {#refreshCourse: refreshCourse},
        ),
        returnValue: _i22.Future<void>.value(),
        returnValueForMissingStub: _i22.Future<void>.value(),
      ) as _i22.Future<void>);
  @override
  _i22.Future<_i18.GradeDetails> loadAssignments(
          {bool? forceRefresh = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadAssignments,
          [],
          {#forceRefresh: forceRefresh},
        ),
        returnValue: _i22.Future<_i18.GradeDetails>.value(_FakeGradeDetails_16(
          this,
          Invocation.method(
            #loadAssignments,
            [],
            {#forceRefresh: forceRefresh},
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i18.GradeDetails>.value(_FakeGradeDetails_16(
          this,
          Invocation.method(
            #loadAssignments,
            [],
            {#forceRefresh: forceRefresh},
          ),
        )),
      ) as _i22.Future<_i18.GradeDetails>);
  @override
  _i22.Future<List<_i23.ScheduleItem>> loadSummary({bool? refresh = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadSummary,
          [],
          {#refresh: refresh},
        ),
        returnValue:
            _i22.Future<List<_i23.ScheduleItem>>.value(<_i23.ScheduleItem>[]),
        returnValueForMissingStub:
            _i22.Future<List<_i23.ScheduleItem>>.value(<_i23.ScheduleItem>[]),
      ) as _i22.Future<List<_i23.ScheduleItem>>);
  @override
  int tabCount() => (super.noSuchMethod(
        Invocation.method(
          #tabCount,
          [],
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  dynamic updateGradingPeriod(_i74.GradingPeriod? period) => super.noSuchMethod(
        Invocation.method(
          #updateGradingPeriod,
          [period],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setState({required _i73.ViewState? viewState}) => super.noSuchMethod(
        Invocation.method(
          #setState,
          [],
          {#viewState: viewState},
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i22.Future<void> work(_i22.Future<dynamic> Function()? loadBlock) =>
      (super.noSuchMethod(
        Invocation.method(
          #work,
          [loadBlock],
        ),
        returnValue: _i22.Future<void>.value(),
        returnValueForMissingStub: _i22.Future<void>.value(),
      ) as _i22.Future<void>);
  @override
  void addListener(_i57.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(_i57.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [CourseRoutingShellInteractor].
///
/// See the documentation for Mockito's code generation for more information.
class MockCourseRoutingShellInteractor extends _i1.Mock
    implements _i19.CourseRoutingShellInteractor {
  @override
  _i22.Future<_i19.CourseShellData> loadCourseShell(
    _i75.CourseShellType? type,
    String? courseId, {
    bool? forceRefresh = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadCourseShell,
          [
            type,
            courseId,
          ],
          {#forceRefresh: forceRefresh},
        ),
        returnValue:
            _i22.Future<_i19.CourseShellData>.value(_FakeCourseShellData_17(
          this,
          Invocation.method(
            #loadCourseShell,
            [
              type,
              courseId,
            ],
            {#forceRefresh: forceRefresh},
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i19.CourseShellData>.value(_FakeCourseShellData_17(
          this,
          Invocation.method(
            #loadCourseShell,
            [
              type,
              courseId,
            ],
            {#forceRefresh: forceRefresh},
          ),
        )),
      ) as _i22.Future<_i19.CourseShellData>);
}

/// A class which mocks [CreateConversationInteractor].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreateConversationInteractor extends _i1.Mock
    implements _i20.CreateConversationInteractor {
  @override
  _i22.Future<_i20.CreateConversationData> loadData(
    String? courseId,
    String? studentId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadData,
          [
            courseId,
            studentId,
          ],
        ),
        returnValue: _i22.Future<_i20.CreateConversationData>.value(
            _FakeCreateConversationData_18(
          this,
          Invocation.method(
            #loadData,
            [
              courseId,
              studentId,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i20.CreateConversationData>.value(
                _FakeCreateConversationData_18(
          this,
          Invocation.method(
            #loadData,
            [
              courseId,
              studentId,
            ],
          ),
        )),
      ) as _i22.Future<_i20.CreateConversationData>);
  @override
  _i22.Future<_i21.Conversation> createConversation(
    String? courseId,
    List<String>? recipientIds,
    String? subject,
    String? body,
    List<String>? attachmentIds,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createConversation,
          [
            courseId,
            recipientIds,
            subject,
            body,
            attachmentIds,
          ],
        ),
        returnValue: _i22.Future<_i21.Conversation>.value(_FakeConversation_19(
          this,
          Invocation.method(
            #createConversation,
            [
              courseId,
              recipientIds,
              subject,
              body,
              attachmentIds,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i21.Conversation>.value(_FakeConversation_19(
          this,
          Invocation.method(
            #createConversation,
            [
              courseId,
              recipientIds,
              subject,
              body,
              attachmentIds,
            ],
          ),
        )),
      ) as _i22.Future<_i21.Conversation>);
  @override
  _i22.Future<_i76.AttachmentHandler?> addAttachment(
          _i40.BuildContext? context) =>
      (super.noSuchMethod(
        Invocation.method(
          #addAttachment,
          [context],
        ),
        returnValue: _i22.Future<_i76.AttachmentHandler?>.value(),
        returnValueForMissingStub: _i22.Future<_i76.AttachmentHandler?>.value(),
      ) as _i22.Future<_i76.AttachmentHandler?>);
}

/// A class which mocks [Database].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabase extends _i1.Mock implements _i11.Database {
  @override
  String get path => (super.noSuchMethod(
        Invocation.getter(#path),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  bool get isOpen => (super.noSuchMethod(
        Invocation.getter(#isOpen),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i11.Database get database => (super.noSuchMethod(
        Invocation.getter(#database),
        returnValue: _FakeDatabase_9(
          this,
          Invocation.getter(#database),
        ),
        returnValueForMissingStub: _FakeDatabase_9(
          this,
          Invocation.getter(#database),
        ),
      ) as _i11.Database);
  @override
  _i22.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i22.Future<void>.value(),
        returnValueForMissingStub: _i22.Future<void>.value(),
      ) as _i22.Future<void>);
  @override
  _i22.Future<T> transaction<T>(
    _i22.Future<T> Function(_i11.Transaction)? action, {
    bool? exclusive,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #transaction,
          [action],
          {#exclusive: exclusive},
        ),
        returnValue: _i77.ifNotNull(
              _i77.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #transaction,
                  [action],
                  {#exclusive: exclusive},
                ),
              ),
              (T v) => _i22.Future<T>.value(v),
            ) ??
            _FakeFuture_20<T>(
              this,
              Invocation.method(
                #transaction,
                [action],
                {#exclusive: exclusive},
              ),
            ),
        returnValueForMissingStub: _i77.ifNotNull(
              _i77.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #transaction,
                  [action],
                  {#exclusive: exclusive},
                ),
              ),
              (T v) => _i22.Future<T>.value(v),
            ) ??
            _FakeFuture_20<T>(
              this,
              Invocation.method(
                #transaction,
                [action],
                {#exclusive: exclusive},
              ),
            ),
      ) as _i22.Future<T>);
  @override
  _i22.Future<T> devInvokeMethod<T>(
    String? method, [
    Object? arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #devInvokeMethod,
          [
            method,
            arguments,
          ],
        ),
        returnValue: _i77.ifNotNull(
              _i77.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #devInvokeMethod,
                  [
                    method,
                    arguments,
                  ],
                ),
              ),
              (T v) => _i22.Future<T>.value(v),
            ) ??
            _FakeFuture_20<T>(
              this,
              Invocation.method(
                #devInvokeMethod,
                [
                  method,
                  arguments,
                ],
              ),
            ),
        returnValueForMissingStub: _i77.ifNotNull(
              _i77.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #devInvokeMethod,
                  [
                    method,
                    arguments,
                  ],
                ),
              ),
              (T v) => _i22.Future<T>.value(v),
            ) ??
            _FakeFuture_20<T>(
              this,
              Invocation.method(
                #devInvokeMethod,
                [
                  method,
                  arguments,
                ],
              ),
            ),
      ) as _i22.Future<T>);
  @override
  _i22.Future<T> devInvokeSqlMethod<T>(
    String? method,
    String? sql, [
    List<Object?>? arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #devInvokeSqlMethod,
          [
            method,
            sql,
            arguments,
          ],
        ),
        returnValue: _i77.ifNotNull(
              _i77.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #devInvokeSqlMethod,
                  [
                    method,
                    sql,
                    arguments,
                  ],
                ),
              ),
              (T v) => _i22.Future<T>.value(v),
            ) ??
            _FakeFuture_20<T>(
              this,
              Invocation.method(
                #devInvokeSqlMethod,
                [
                  method,
                  sql,
                  arguments,
                ],
              ),
            ),
        returnValueForMissingStub: _i77.ifNotNull(
              _i77.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #devInvokeSqlMethod,
                  [
                    method,
                    sql,
                    arguments,
                  ],
                ),
              ),
              (T v) => _i22.Future<T>.value(v),
            ) ??
            _FakeFuture_20<T>(
              this,
              Invocation.method(
                #devInvokeSqlMethod,
                [
                  method,
                  sql,
                  arguments,
                ],
              ),
            ),
      ) as _i22.Future<T>);
  @override
  _i22.Future<void> execute(
    String? sql, [
    List<Object?>? arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [
            sql,
            arguments,
          ],
        ),
        returnValue: _i22.Future<void>.value(),
        returnValueForMissingStub: _i22.Future<void>.value(),
      ) as _i22.Future<void>);
  @override
  _i22.Future<int> rawInsert(
    String? sql, [
    List<Object?>? arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #rawInsert,
          [
            sql,
            arguments,
          ],
        ),
        returnValue: _i22.Future<int>.value(0),
        returnValueForMissingStub: _i22.Future<int>.value(0),
      ) as _i22.Future<int>);
  @override
  _i22.Future<int> insert(
    String? table,
    Map<String, Object?>? values, {
    String? nullColumnHack,
    _i11.ConflictAlgorithm? conflictAlgorithm,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #insert,
          [
            table,
            values,
          ],
          {
            #nullColumnHack: nullColumnHack,
            #conflictAlgorithm: conflictAlgorithm,
          },
        ),
        returnValue: _i22.Future<int>.value(0),
        returnValueForMissingStub: _i22.Future<int>.value(0),
      ) as _i22.Future<int>);
  @override
  _i22.Future<List<Map<String, Object?>>> query(
    String? table, {
    bool? distinct,
    List<String>? columns,
    String? where,
    List<Object?>? whereArgs,
    String? groupBy,
    String? having,
    String? orderBy,
    int? limit,
    int? offset,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #query,
          [table],
          {
            #distinct: distinct,
            #columns: columns,
            #where: where,
            #whereArgs: whereArgs,
            #groupBy: groupBy,
            #having: having,
            #orderBy: orderBy,
            #limit: limit,
            #offset: offset,
          },
        ),
        returnValue: _i22.Future<List<Map<String, Object?>>>.value(
            <Map<String, Object?>>[]),
        returnValueForMissingStub:
            _i22.Future<List<Map<String, Object?>>>.value(
                <Map<String, Object?>>[]),
      ) as _i22.Future<List<Map<String, Object?>>>);
  @override
  _i22.Future<List<Map<String, Object?>>> rawQuery(
    String? sql, [
    List<Object?>? arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #rawQuery,
          [
            sql,
            arguments,
          ],
        ),
        returnValue: _i22.Future<List<Map<String, Object?>>>.value(
            <Map<String, Object?>>[]),
        returnValueForMissingStub:
            _i22.Future<List<Map<String, Object?>>>.value(
                <Map<String, Object?>>[]),
      ) as _i22.Future<List<Map<String, Object?>>>);
  @override
  _i22.Future<_i11.QueryCursor> rawQueryCursor(
    String? sql,
    List<Object?>? arguments, {
    int? bufferSize,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #rawQueryCursor,
          [
            sql,
            arguments,
          ],
          {#bufferSize: bufferSize},
        ),
        returnValue: _i22.Future<_i11.QueryCursor>.value(_FakeQueryCursor_21(
          this,
          Invocation.method(
            #rawQueryCursor,
            [
              sql,
              arguments,
            ],
            {#bufferSize: bufferSize},
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i11.QueryCursor>.value(_FakeQueryCursor_21(
          this,
          Invocation.method(
            #rawQueryCursor,
            [
              sql,
              arguments,
            ],
            {#bufferSize: bufferSize},
          ),
        )),
      ) as _i22.Future<_i11.QueryCursor>);
  @override
  _i22.Future<_i11.QueryCursor> queryCursor(
    String? table, {
    bool? distinct,
    List<String>? columns,
    String? where,
    List<Object?>? whereArgs,
    String? groupBy,
    String? having,
    String? orderBy,
    int? limit,
    int? offset,
    int? bufferSize,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #queryCursor,
          [table],
          {
            #distinct: distinct,
            #columns: columns,
            #where: where,
            #whereArgs: whereArgs,
            #groupBy: groupBy,
            #having: having,
            #orderBy: orderBy,
            #limit: limit,
            #offset: offset,
            #bufferSize: bufferSize,
          },
        ),
        returnValue: _i22.Future<_i11.QueryCursor>.value(_FakeQueryCursor_21(
          this,
          Invocation.method(
            #queryCursor,
            [table],
            {
              #distinct: distinct,
              #columns: columns,
              #where: where,
              #whereArgs: whereArgs,
              #groupBy: groupBy,
              #having: having,
              #orderBy: orderBy,
              #limit: limit,
              #offset: offset,
              #bufferSize: bufferSize,
            },
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i11.QueryCursor>.value(_FakeQueryCursor_21(
          this,
          Invocation.method(
            #queryCursor,
            [table],
            {
              #distinct: distinct,
              #columns: columns,
              #where: where,
              #whereArgs: whereArgs,
              #groupBy: groupBy,
              #having: having,
              #orderBy: orderBy,
              #limit: limit,
              #offset: offset,
              #bufferSize: bufferSize,
            },
          ),
        )),
      ) as _i22.Future<_i11.QueryCursor>);
  @override
  _i22.Future<int> rawUpdate(
    String? sql, [
    List<Object?>? arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #rawUpdate,
          [
            sql,
            arguments,
          ],
        ),
        returnValue: _i22.Future<int>.value(0),
        returnValueForMissingStub: _i22.Future<int>.value(0),
      ) as _i22.Future<int>);
  @override
  _i22.Future<int> update(
    String? table,
    Map<String, Object?>? values, {
    String? where,
    List<Object?>? whereArgs,
    _i11.ConflictAlgorithm? conflictAlgorithm,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [
            table,
            values,
          ],
          {
            #where: where,
            #whereArgs: whereArgs,
            #conflictAlgorithm: conflictAlgorithm,
          },
        ),
        returnValue: _i22.Future<int>.value(0),
        returnValueForMissingStub: _i22.Future<int>.value(0),
      ) as _i22.Future<int>);
  @override
  _i22.Future<int> rawDelete(
    String? sql, [
    List<Object?>? arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #rawDelete,
          [
            sql,
            arguments,
          ],
        ),
        returnValue: _i22.Future<int>.value(0),
        returnValueForMissingStub: _i22.Future<int>.value(0),
      ) as _i22.Future<int>);
  @override
  _i22.Future<int> delete(
    String? table, {
    String? where,
    List<Object?>? whereArgs,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [table],
          {
            #where: where,
            #whereArgs: whereArgs,
          },
        ),
        returnValue: _i22.Future<int>.value(0),
        returnValueForMissingStub: _i22.Future<int>.value(0),
      ) as _i22.Future<int>);
  @override
  _i11.Batch batch() => (super.noSuchMethod(
        Invocation.method(
          #batch,
          [],
        ),
        returnValue: _FakeBatch_22(
          this,
          Invocation.method(
            #batch,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeBatch_22(
          this,
          Invocation.method(
            #batch,
            [],
          ),
        ),
      ) as _i11.Batch);
}

/// A class which mocks [Dio].
///
/// See the documentation for Mockito's code generation for more information.
class MockDio extends _i1.Mock implements _i4.Dio {
  @override
  _i4.BaseOptions get options => (super.noSuchMethod(
        Invocation.getter(#options),
        returnValue: _FakeBaseOptions_23(
          this,
          Invocation.getter(#options),
        ),
        returnValueForMissingStub: _FakeBaseOptions_23(
          this,
          Invocation.getter(#options),
        ),
      ) as _i4.BaseOptions);
  @override
  set options(_i4.BaseOptions? _options) => super.noSuchMethod(
        Invocation.setter(
          #options,
          _options,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.HttpClientAdapter get httpClientAdapter => (super.noSuchMethod(
        Invocation.getter(#httpClientAdapter),
        returnValue: _FakeHttpClientAdapter_24(
          this,
          Invocation.getter(#httpClientAdapter),
        ),
        returnValueForMissingStub: _FakeHttpClientAdapter_24(
          this,
          Invocation.getter(#httpClientAdapter),
        ),
      ) as _i4.HttpClientAdapter);
  @override
  set httpClientAdapter(_i4.HttpClientAdapter? _httpClientAdapter) =>
      super.noSuchMethod(
        Invocation.setter(
          #httpClientAdapter,
          _httpClientAdapter,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.Transformer get transformer => (super.noSuchMethod(
        Invocation.getter(#transformer),
        returnValue: _FakeTransformer_25(
          this,
          Invocation.getter(#transformer),
        ),
        returnValueForMissingStub: _FakeTransformer_25(
          this,
          Invocation.getter(#transformer),
        ),
      ) as _i4.Transformer);
  @override
  set transformer(_i4.Transformer? _transformer) => super.noSuchMethod(
        Invocation.setter(
          #transformer,
          _transformer,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.Interceptors get interceptors => (super.noSuchMethod(
        Invocation.getter(#interceptors),
        returnValue: _FakeInterceptors_26(
          this,
          Invocation.getter(#interceptors),
        ),
        returnValueForMissingStub: _FakeInterceptors_26(
          this,
          Invocation.getter(#interceptors),
        ),
      ) as _i4.Interceptors);
  @override
  void close({bool? force = false}) => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
          {#force: force},
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i22.Future<_i4.Response<T>> head<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i4.Options? options,
    _i4.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i22.Future<_i4.Response<T>>.value(_FakeResponse_2<T>(
          this,
          Invocation.method(
            #head,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i4.Response<T>>.value(_FakeResponse_2<T>(
          this,
          Invocation.method(
            #head,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
      ) as _i22.Future<_i4.Response<T>>);
  @override
  _i22.Future<_i4.Response<T>> headUri<T>(
    Uri? uri, {
    Object? data,
    _i4.Options? options,
    _i4.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #headUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i22.Future<_i4.Response<T>>.value(_FakeResponse_2<T>(
          this,
          Invocation.method(
            #headUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i4.Response<T>>.value(_FakeResponse_2<T>(
          this,
          Invocation.method(
            #headUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
      ) as _i22.Future<_i4.Response<T>>);
  @override
  _i22.Future<_i4.Response<T>> get<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i4.Options? options,
    _i4.CancelToken? cancelToken,
    _i4.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i22.Future<_i4.Response<T>>.value(_FakeResponse_2<T>(
          this,
          Invocation.method(
            #get,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i4.Response<T>>.value(_FakeResponse_2<T>(
          this,
          Invocation.method(
            #get,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i22.Future<_i4.Response<T>>);
  @override
  _i22.Future<_i4.Response<T>> getUri<T>(
    Uri? uri, {
    Object? data,
    _i4.Options? options,
    _i4.CancelToken? cancelToken,
    _i4.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i22.Future<_i4.Response<T>>.value(_FakeResponse_2<T>(
          this,
          Invocation.method(
            #getUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i4.Response<T>>.value(_FakeResponse_2<T>(
          this,
          Invocation.method(
            #getUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i22.Future<_i4.Response<T>>);
  @override
  _i22.Future<_i4.Response<T>> post<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i4.Options? options,
    _i4.CancelToken? cancelToken,
    _i4.ProgressCallback? onSendProgress,
    _i4.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i22.Future<_i4.Response<T>>.value(_FakeResponse_2<T>(
          this,
          Invocation.method(
            #post,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i4.Response<T>>.value(_FakeResponse_2<T>(
          this,
          Invocation.method(
            #post,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i22.Future<_i4.Response<T>>);
  @override
  _i22.Future<_i4.Response<T>> postUri<T>(
    Uri? uri, {
    Object? data,
    _i4.Options? options,
    _i4.CancelToken? cancelToken,
    _i4.ProgressCallback? onSendProgress,
    _i4.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #postUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i22.Future<_i4.Response<T>>.value(_FakeResponse_2<T>(
          this,
          Invocation.method(
            #postUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i4.Response<T>>.value(_FakeResponse_2<T>(
          this,
          Invocation.method(
            #postUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i22.Future<_i4.Response<T>>);
  @override
  _i22.Future<_i4.Response<T>> put<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i4.Options? options,
    _i4.CancelToken? cancelToken,
    _i4.ProgressCallback? onSendProgress,
    _i4.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i22.Future<_i4.Response<T>>.value(_FakeResponse_2<T>(
          this,
          Invocation.method(
            #put,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i4.Response<T>>.value(_FakeResponse_2<T>(
          this,
          Invocation.method(
            #put,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i22.Future<_i4.Response<T>>);
  @override
  _i22.Future<_i4.Response<T>> putUri<T>(
    Uri? uri, {
    Object? data,
    _i4.Options? options,
    _i4.CancelToken? cancelToken,
    _i4.ProgressCallback? onSendProgress,
    _i4.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #putUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i22.Future<_i4.Response<T>>.value(_FakeResponse_2<T>(
          this,
          Invocation.method(
            #putUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i4.Response<T>>.value(_FakeResponse_2<T>(
          this,
          Invocation.method(
            #putUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i22.Future<_i4.Response<T>>);
  @override
  _i22.Future<_i4.Response<T>> patch<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i4.Options? options,
    _i4.CancelToken? cancelToken,
    _i4.ProgressCallback? onSendProgress,
    _i4.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i22.Future<_i4.Response<T>>.value(_FakeResponse_2<T>(
          this,
          Invocation.method(
            #patch,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i4.Response<T>>.value(_FakeResponse_2<T>(
          this,
          Invocation.method(
            #patch,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i22.Future<_i4.Response<T>>);
  @override
  _i22.Future<_i4.Response<T>> patchUri<T>(
    Uri? uri, {
    Object? data,
    _i4.Options? options,
    _i4.CancelToken? cancelToken,
    _i4.ProgressCallback? onSendProgress,
    _i4.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patchUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i22.Future<_i4.Response<T>>.value(_FakeResponse_2<T>(
          this,
          Invocation.method(
            #patchUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i4.Response<T>>.value(_FakeResponse_2<T>(
          this,
          Invocation.method(
            #patchUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i22.Future<_i4.Response<T>>);
  @override
  _i22.Future<_i4.Response<T>> delete<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i4.Options? options,
    _i4.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i22.Future<_i4.Response<T>>.value(_FakeResponse_2<T>(
          this,
          Invocation.method(
            #delete,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i4.Response<T>>.value(_FakeResponse_2<T>(
          this,
          Invocation.method(
            #delete,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
      ) as _i22.Future<_i4.Response<T>>);
  @override
  _i22.Future<_i4.Response<T>> deleteUri<T>(
    Uri? uri, {
    Object? data,
    _i4.Options? options,
    _i4.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i22.Future<_i4.Response<T>>.value(_FakeResponse_2<T>(
          this,
          Invocation.method(
            #deleteUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i4.Response<T>>.value(_FakeResponse_2<T>(
          this,
          Invocation.method(
            #deleteUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
      ) as _i22.Future<_i4.Response<T>>);
  @override
  _i22.Future<_i4.Response<dynamic>> download(
    String? urlPath,
    dynamic savePath, {
    _i4.ProgressCallback? onReceiveProgress,
    Map<String, dynamic>? queryParameters,
    _i4.CancelToken? cancelToken,
    bool? deleteOnError = true,
    String? lengthHeader = r'content-length',
    Object? data,
    _i4.Options? options,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #download,
          [
            urlPath,
            savePath,
          ],
          {
            #onReceiveProgress: onReceiveProgress,
            #queryParameters: queryParameters,
            #cancelToken: cancelToken,
            #deleteOnError: deleteOnError,
            #lengthHeader: lengthHeader,
            #data: data,
            #options: options,
          },
        ),
        returnValue:
            _i22.Future<_i4.Response<dynamic>>.value(_FakeResponse_2<dynamic>(
          this,
          Invocation.method(
            #download,
            [
              urlPath,
              savePath,
            ],
            {
              #onReceiveProgress: onReceiveProgress,
              #queryParameters: queryParameters,
              #cancelToken: cancelToken,
              #deleteOnError: deleteOnError,
              #lengthHeader: lengthHeader,
              #data: data,
              #options: options,
            },
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i4.Response<dynamic>>.value(_FakeResponse_2<dynamic>(
          this,
          Invocation.method(
            #download,
            [
              urlPath,
              savePath,
            ],
            {
              #onReceiveProgress: onReceiveProgress,
              #queryParameters: queryParameters,
              #cancelToken: cancelToken,
              #deleteOnError: deleteOnError,
              #lengthHeader: lengthHeader,
              #data: data,
              #options: options,
            },
          ),
        )),
      ) as _i22.Future<_i4.Response<dynamic>>);
  @override
  _i22.Future<_i4.Response<dynamic>> downloadUri(
    Uri? uri,
    dynamic savePath, {
    _i4.ProgressCallback? onReceiveProgress,
    _i4.CancelToken? cancelToken,
    bool? deleteOnError = true,
    String? lengthHeader = r'content-length',
    Object? data,
    _i4.Options? options,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #downloadUri,
          [
            uri,
            savePath,
          ],
          {
            #onReceiveProgress: onReceiveProgress,
            #cancelToken: cancelToken,
            #deleteOnError: deleteOnError,
            #lengthHeader: lengthHeader,
            #data: data,
            #options: options,
          },
        ),
        returnValue:
            _i22.Future<_i4.Response<dynamic>>.value(_FakeResponse_2<dynamic>(
          this,
          Invocation.method(
            #downloadUri,
            [
              uri,
              savePath,
            ],
            {
              #onReceiveProgress: onReceiveProgress,
              #cancelToken: cancelToken,
              #deleteOnError: deleteOnError,
              #lengthHeader: lengthHeader,
              #data: data,
              #options: options,
            },
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i4.Response<dynamic>>.value(_FakeResponse_2<dynamic>(
          this,
          Invocation.method(
            #downloadUri,
            [
              uri,
              savePath,
            ],
            {
              #onReceiveProgress: onReceiveProgress,
              #cancelToken: cancelToken,
              #deleteOnError: deleteOnError,
              #lengthHeader: lengthHeader,
              #data: data,
              #options: options,
            },
          ),
        )),
      ) as _i22.Future<_i4.Response<dynamic>>);
  @override
  _i22.Future<_i4.Response<T>> request<T>(
    String? url, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i4.CancelToken? cancelToken,
    _i4.Options? options,
    _i4.ProgressCallback? onSendProgress,
    _i4.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #request,
          [url],
          {
            #data: data,
            #queryParameters: queryParameters,
            #cancelToken: cancelToken,
            #options: options,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i22.Future<_i4.Response<T>>.value(_FakeResponse_2<T>(
          this,
          Invocation.method(
            #request,
            [url],
            {
              #data: data,
              #queryParameters: queryParameters,
              #cancelToken: cancelToken,
              #options: options,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i4.Response<T>>.value(_FakeResponse_2<T>(
          this,
          Invocation.method(
            #request,
            [url],
            {
              #data: data,
              #queryParameters: queryParameters,
              #cancelToken: cancelToken,
              #options: options,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i22.Future<_i4.Response<T>>);
  @override
  _i22.Future<_i4.Response<T>> requestUri<T>(
    Uri? uri, {
    Object? data,
    _i4.CancelToken? cancelToken,
    _i4.Options? options,
    _i4.ProgressCallback? onSendProgress,
    _i4.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #requestUri,
          [uri],
          {
            #data: data,
            #cancelToken: cancelToken,
            #options: options,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i22.Future<_i4.Response<T>>.value(_FakeResponse_2<T>(
          this,
          Invocation.method(
            #requestUri,
            [uri],
            {
              #data: data,
              #cancelToken: cancelToken,
              #options: options,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i4.Response<T>>.value(_FakeResponse_2<T>(
          this,
          Invocation.method(
            #requestUri,
            [uri],
            {
              #data: data,
              #cancelToken: cancelToken,
              #options: options,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i22.Future<_i4.Response<T>>);
  @override
  _i22.Future<_i4.Response<T>> fetch<T>(_i4.RequestOptions? requestOptions) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetch,
          [requestOptions],
        ),
        returnValue: _i22.Future<_i4.Response<T>>.value(_FakeResponse_2<T>(
          this,
          Invocation.method(
            #fetch,
            [requestOptions],
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i4.Response<T>>.value(_FakeResponse_2<T>(
          this,
          Invocation.method(
            #fetch,
            [requestOptions],
          ),
        )),
      ) as _i22.Future<_i4.Response<T>>);
}

/// A class which mocks [EnrollmentsApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockEnrollmentsApi extends _i1.Mock implements _i78.EnrollmentsApi {
  @override
  _i22.Future<List<_i71.Enrollment>> getObserveeEnrollments(
          {bool? forceRefresh = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getObserveeEnrollments,
          [],
          {#forceRefresh: forceRefresh},
        ),
        returnValue:
            _i22.Future<List<_i71.Enrollment>>.value(<_i71.Enrollment>[]),
        returnValueForMissingStub:
            _i22.Future<List<_i71.Enrollment>>.value(<_i71.Enrollment>[]),
      ) as _i22.Future<List<_i71.Enrollment>>);
  @override
  _i22.Future<List<_i71.Enrollment>> getSelfEnrollments(
          {bool? forceRefresh = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSelfEnrollments,
          [],
          {#forceRefresh: forceRefresh},
        ),
        returnValue:
            _i22.Future<List<_i71.Enrollment>>.value(<_i71.Enrollment>[]),
        returnValueForMissingStub:
            _i22.Future<List<_i71.Enrollment>>.value(<_i71.Enrollment>[]),
      ) as _i22.Future<List<_i71.Enrollment>>);
  @override
  _i22.Future<List<_i71.Enrollment>> getEnrollmentsByGradingPeriod(
    String? courseId,
    String? studentId,
    String? gradingPeriodId, {
    bool? forceRefresh = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getEnrollmentsByGradingPeriod,
          [
            courseId,
            studentId,
            gradingPeriodId,
          ],
          {#forceRefresh: forceRefresh},
        ),
        returnValue:
            _i22.Future<List<_i71.Enrollment>>.value(<_i71.Enrollment>[]),
        returnValueForMissingStub:
            _i22.Future<List<_i71.Enrollment>>.value(<_i71.Enrollment>[]),
      ) as _i22.Future<List<_i71.Enrollment>>);
  @override
  _i22.Future<bool?> pairWithStudent(String? pairingCode) =>
      (super.noSuchMethod(
        Invocation.method(
          #pairWithStudent,
          [pairingCode],
        ),
        returnValue: _i22.Future<bool?>.value(),
        returnValueForMissingStub: _i22.Future<bool?>.value(),
      ) as _i22.Future<bool?>);
  @override
  _i22.Future<bool> unpairStudent(String? studentId) => (super.noSuchMethod(
        Invocation.method(
          #unpairStudent,
          [studentId],
        ),
        returnValue: _i22.Future<bool>.value(false),
        returnValueForMissingStub: _i22.Future<bool>.value(false),
      ) as _i22.Future<bool>);
  @override
  _i22.Future<bool> canUnpairStudent(String? studentId) => (super.noSuchMethod(
        Invocation.method(
          #canUnpairStudent,
          [studentId],
        ),
        returnValue: _i22.Future<bool>.value(false),
        returnValueForMissingStub: _i22.Future<bool>.value(false),
      ) as _i22.Future<bool>);
}

/// A class which mocks [ErrorReportApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockErrorReportApi extends _i1.Mock implements _i79.ErrorReportApi {
  @override
  _i22.Future<void> submitErrorReport({
    String? subject,
    String? description,
    String? email,
    String? severity,
    String? stacktrace,
    String? domain,
    String? name,
    String? becomeUser,
    String? userRoles,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #submitErrorReport,
          [],
          {
            #subject: subject,
            #description: description,
            #email: email,
            #severity: severity,
            #stacktrace: stacktrace,
            #domain: domain,
            #name: name,
            #becomeUser: becomeUser,
            #userRoles: userRoles,
          },
        ),
        returnValue: _i22.Future<void>.value(),
        returnValueForMissingStub: _i22.Future<void>.value(),
      ) as _i22.Future<void>);
}

/// A class which mocks [ErrorReportInteractor].
///
/// See the documentation for Mockito's code generation for more information.
class MockErrorReportInteractor extends _i1.Mock
    implements _i80.ErrorReportInteractor {
  @override
  _i22.Future<void> submitErrorReport(
    String? subject,
    String? description,
    String? email,
    _i80.ErrorReportSeverity? severity,
    String? stacktrace,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #submitErrorReport,
          [
            subject,
            description,
            email,
            severity,
            stacktrace,
          ],
        ),
        returnValue: _i22.Future<void>.value(),
        returnValueForMissingStub: _i22.Future<void>.value(),
      ) as _i22.Future<void>);
}

/// A class which mocks [EventDetailsInteractor].
///
/// See the documentation for Mockito's code generation for more information.
class MockEventDetailsInteractor extends _i1.Mock
    implements _i81.EventDetailsInteractor {
  @override
  _i22.Future<_i23.ScheduleItem> loadEvent(
    String? eventId,
    bool? forceRefresh,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadEvent,
          [
            eventId,
            forceRefresh,
          ],
        ),
        returnValue: _i22.Future<_i23.ScheduleItem>.value(_FakeScheduleItem_27(
          this,
          Invocation.method(
            #loadEvent,
            [
              eventId,
              forceRefresh,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i23.ScheduleItem>.value(_FakeScheduleItem_27(
          this,
          Invocation.method(
            #loadEvent,
            [
              eventId,
              forceRefresh,
            ],
          ),
        )),
      ) as _i22.Future<_i23.ScheduleItem>);
  @override
  _i22.Future<_i60.Reminder?> loadReminder(String? eventId) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadReminder,
          [eventId],
        ),
        returnValue: _i22.Future<_i60.Reminder?>.value(),
        returnValueForMissingStub: _i22.Future<_i60.Reminder?>.value(),
      ) as _i22.Future<_i60.Reminder?>);
  @override
  _i22.Future<void> createReminder(
    _i61.AppLocalizations? l10n,
    DateTime? date,
    String? eventId,
    String? courseId,
    String? title,
    String? body,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createReminder,
          [
            l10n,
            date,
            eventId,
            courseId,
            title,
            body,
          ],
        ),
        returnValue: _i22.Future<void>.value(),
        returnValueForMissingStub: _i22.Future<void>.value(),
      ) as _i22.Future<void>);
  @override
  _i22.Future<void> deleteReminder(_i60.Reminder? reminder) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteReminder,
          [reminder],
        ),
        returnValue: _i22.Future<void>.value(),
        returnValueForMissingStub: _i22.Future<void>.value(),
      ) as _i22.Future<void>);
}

/// A class which mocks [FirebaseCrashlytics].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseCrashlytics extends _i1.Mock
    implements _i82.FirebaseCrashlytics {
  @override
  _i24.FirebaseApp get app => (super.noSuchMethod(
        Invocation.getter(#app),
        returnValue: _FakeFirebaseApp_28(
          this,
          Invocation.getter(#app),
        ),
        returnValueForMissingStub: _FakeFirebaseApp_28(
          this,
          Invocation.getter(#app),
        ),
      ) as _i24.FirebaseApp);
  @override
  set app(_i24.FirebaseApp? _app) => super.noSuchMethod(
        Invocation.setter(
          #app,
          _app,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get isCrashlyticsCollectionEnabled => (super.noSuchMethod(
        Invocation.getter(#isCrashlyticsCollectionEnabled),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  Map<dynamic, dynamic> get pluginConstants => (super.noSuchMethod(
        Invocation.getter(#pluginConstants),
        returnValue: <dynamic, dynamic>{},
        returnValueForMissingStub: <dynamic, dynamic>{},
      ) as Map<dynamic, dynamic>);
  @override
  _i22.Future<bool> checkForUnsentReports() => (super.noSuchMethod(
        Invocation.method(
          #checkForUnsentReports,
          [],
        ),
        returnValue: _i22.Future<bool>.value(false),
        returnValueForMissingStub: _i22.Future<bool>.value(false),
      ) as _i22.Future<bool>);
  @override
  void crash() => super.noSuchMethod(
        Invocation.method(
          #crash,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i22.Future<void> deleteUnsentReports() => (super.noSuchMethod(
        Invocation.method(
          #deleteUnsentReports,
          [],
        ),
        returnValue: _i22.Future<void>.value(),
        returnValueForMissingStub: _i22.Future<void>.value(),
      ) as _i22.Future<void>);
  @override
  _i22.Future<bool> didCrashOnPreviousExecution() => (super.noSuchMethod(
        Invocation.method(
          #didCrashOnPreviousExecution,
          [],
        ),
        returnValue: _i22.Future<bool>.value(false),
        returnValueForMissingStub: _i22.Future<bool>.value(false),
      ) as _i22.Future<bool>);
  @override
  _i22.Future<void> recordError(
    dynamic exception,
    StackTrace? stack, {
    dynamic reason,
    Iterable<Object>? information = const [],
    bool? printDetails,
    bool? fatal = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #recordError,
          [
            exception,
            stack,
          ],
          {
            #reason: reason,
            #information: information,
            #printDetails: printDetails,
            #fatal: fatal,
          },
        ),
        returnValue: _i22.Future<void>.value(),
        returnValueForMissingStub: _i22.Future<void>.value(),
      ) as _i22.Future<void>);
  @override
  _i22.Future<void> recordFlutterError(
    _i26.FlutterErrorDetails? flutterErrorDetails, {
    bool? fatal = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #recordFlutterError,
          [flutterErrorDetails],
          {#fatal: fatal},
        ),
        returnValue: _i22.Future<void>.value(),
        returnValueForMissingStub: _i22.Future<void>.value(),
      ) as _i22.Future<void>);
  @override
  _i22.Future<void> recordFlutterFatalError(
          _i26.FlutterErrorDetails? flutterErrorDetails) =>
      (super.noSuchMethod(
        Invocation.method(
          #recordFlutterFatalError,
          [flutterErrorDetails],
        ),
        returnValue: _i22.Future<void>.value(),
        returnValueForMissingStub: _i22.Future<void>.value(),
      ) as _i22.Future<void>);
  @override
  _i22.Future<void> log(String? message) => (super.noSuchMethod(
        Invocation.method(
          #log,
          [message],
        ),
        returnValue: _i22.Future<void>.value(),
        returnValueForMissingStub: _i22.Future<void>.value(),
      ) as _i22.Future<void>);
  @override
  _i22.Future<void> sendUnsentReports() => (super.noSuchMethod(
        Invocation.method(
          #sendUnsentReports,
          [],
        ),
        returnValue: _i22.Future<void>.value(),
        returnValueForMissingStub: _i22.Future<void>.value(),
      ) as _i22.Future<void>);
  @override
  _i22.Future<void> setCrashlyticsCollectionEnabled(bool? enabled) =>
      (super.noSuchMethod(
        Invocation.method(
          #setCrashlyticsCollectionEnabled,
          [enabled],
        ),
        returnValue: _i22.Future<void>.value(),
        returnValueForMissingStub: _i22.Future<void>.value(),
      ) as _i22.Future<void>);
  @override
  _i22.Future<void> setUserIdentifier(String? identifier) =>
      (super.noSuchMethod(
        Invocation.method(
          #setUserIdentifier,
          [identifier],
        ),
        returnValue: _i22.Future<void>.value(),
        returnValueForMissingStub: _i22.Future<void>.value(),
      ) as _i22.Future<void>);
  @override
  _i22.Future<void> setCustomKey(
    String? key,
    Object? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setCustomKey,
          [
            key,
            value,
          ],
        ),
        returnValue: _i22.Future<void>.value(),
        returnValueForMissingStub: _i22.Future<void>.value(),
      ) as _i22.Future<void>);
}

/// A class which mocks [HttpClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i25.HttpClient {
  @override
  Duration get idleTimeout => (super.noSuchMethod(
        Invocation.getter(#idleTimeout),
        returnValue: _FakeDuration_29(
          this,
          Invocation.getter(#idleTimeout),
        ),
        returnValueForMissingStub: _FakeDuration_29(
          this,
          Invocation.getter(#idleTimeout),
        ),
      ) as Duration);
  @override
  set idleTimeout(Duration? _idleTimeout) => super.noSuchMethod(
        Invocation.setter(
          #idleTimeout,
          _idleTimeout,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set connectionTimeout(Duration? _connectionTimeout) => super.noSuchMethod(
        Invocation.setter(
          #connectionTimeout,
          _connectionTimeout,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set maxConnectionsPerHost(int? _maxConnectionsPerHost) => super.noSuchMethod(
        Invocation.setter(
          #maxConnectionsPerHost,
          _maxConnectionsPerHost,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get autoUncompress => (super.noSuchMethod(
        Invocation.getter(#autoUncompress),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  set autoUncompress(bool? _autoUncompress) => super.noSuchMethod(
        Invocation.setter(
          #autoUncompress,
          _autoUncompress,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set userAgent(String? _userAgent) => super.noSuchMethod(
        Invocation.setter(
          #userAgent,
          _userAgent,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set authenticate(
          _i22.Future<bool> Function(
            Uri,
            String,
            String?,
          )? f) =>
      super.noSuchMethod(
        Invocation.setter(
          #authenticate,
          f,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set connectionFactory(
          _i22.Future<_i25.ConnectionTask<_i25.Socket>> Function(
            Uri,
            String?,
            int?,
          )? f) =>
      super.noSuchMethod(
        Invocation.setter(
          #connectionFactory,
          f,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set findProxy(String Function(Uri)? f) => super.noSuchMethod(
        Invocation.setter(
          #findProxy,
          f,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set authenticateProxy(
          _i22.Future<bool> Function(
            String,
            int,
            String,
            String?,
          )? f) =>
      super.noSuchMethod(
        Invocation.setter(
          #authenticateProxy,
          f,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set badCertificateCallback(
          bool Function(
            _i25.X509Certificate,
            String,
            int,
          )? callback) =>
      super.noSuchMethod(
        Invocation.setter(
          #badCertificateCallback,
          callback,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set keyLog(dynamic Function(String)? callback) => super.noSuchMethod(
        Invocation.setter(
          #keyLog,
          callback,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i22.Future<_i25.HttpClientRequest> open(
    String? method,
    String? host,
    int? port,
    String? path,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #open,
          [
            method,
            host,
            port,
            path,
          ],
        ),
        returnValue:
            _i22.Future<_i25.HttpClientRequest>.value(_FakeHttpClientRequest_30(
          this,
          Invocation.method(
            #open,
            [
              method,
              host,
              port,
              path,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i25.HttpClientRequest>.value(_FakeHttpClientRequest_30(
          this,
          Invocation.method(
            #open,
            [
              method,
              host,
              port,
              path,
            ],
          ),
        )),
      ) as _i22.Future<_i25.HttpClientRequest>);
  @override
  _i22.Future<_i25.HttpClientRequest> openUrl(
    String? method,
    Uri? url,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #openUrl,
          [
            method,
            url,
          ],
        ),
        returnValue:
            _i22.Future<_i25.HttpClientRequest>.value(_FakeHttpClientRequest_30(
          this,
          Invocation.method(
            #openUrl,
            [
              method,
              url,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i25.HttpClientRequest>.value(_FakeHttpClientRequest_30(
          this,
          Invocation.method(
            #openUrl,
            [
              method,
              url,
            ],
          ),
        )),
      ) as _i22.Future<_i25.HttpClientRequest>);
  @override
  _i22.Future<_i25.HttpClientRequest> get(
    String? host,
    int? port,
    String? path,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [
            host,
            port,
            path,
          ],
        ),
        returnValue:
            _i22.Future<_i25.HttpClientRequest>.value(_FakeHttpClientRequest_30(
          this,
          Invocation.method(
            #get,
            [
              host,
              port,
              path,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i25.HttpClientRequest>.value(_FakeHttpClientRequest_30(
          this,
          Invocation.method(
            #get,
            [
              host,
              port,
              path,
            ],
          ),
        )),
      ) as _i22.Future<_i25.HttpClientRequest>);
  @override
  _i22.Future<_i25.HttpClientRequest> getUrl(Uri? url) => (super.noSuchMethod(
        Invocation.method(
          #getUrl,
          [url],
        ),
        returnValue:
            _i22.Future<_i25.HttpClientRequest>.value(_FakeHttpClientRequest_30(
          this,
          Invocation.method(
            #getUrl,
            [url],
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i25.HttpClientRequest>.value(_FakeHttpClientRequest_30(
          this,
          Invocation.method(
            #getUrl,
            [url],
          ),
        )),
      ) as _i22.Future<_i25.HttpClientRequest>);
  @override
  _i22.Future<_i25.HttpClientRequest> post(
    String? host,
    int? port,
    String? path,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [
            host,
            port,
            path,
          ],
        ),
        returnValue:
            _i22.Future<_i25.HttpClientRequest>.value(_FakeHttpClientRequest_30(
          this,
          Invocation.method(
            #post,
            [
              host,
              port,
              path,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i25.HttpClientRequest>.value(_FakeHttpClientRequest_30(
          this,
          Invocation.method(
            #post,
            [
              host,
              port,
              path,
            ],
          ),
        )),
      ) as _i22.Future<_i25.HttpClientRequest>);
  @override
  _i22.Future<_i25.HttpClientRequest> postUrl(Uri? url) => (super.noSuchMethod(
        Invocation.method(
          #postUrl,
          [url],
        ),
        returnValue:
            _i22.Future<_i25.HttpClientRequest>.value(_FakeHttpClientRequest_30(
          this,
          Invocation.method(
            #postUrl,
            [url],
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i25.HttpClientRequest>.value(_FakeHttpClientRequest_30(
          this,
          Invocation.method(
            #postUrl,
            [url],
          ),
        )),
      ) as _i22.Future<_i25.HttpClientRequest>);
  @override
  _i22.Future<_i25.HttpClientRequest> put(
    String? host,
    int? port,
    String? path,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [
            host,
            port,
            path,
          ],
        ),
        returnValue:
            _i22.Future<_i25.HttpClientRequest>.value(_FakeHttpClientRequest_30(
          this,
          Invocation.method(
            #put,
            [
              host,
              port,
              path,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i25.HttpClientRequest>.value(_FakeHttpClientRequest_30(
          this,
          Invocation.method(
            #put,
            [
              host,
              port,
              path,
            ],
          ),
        )),
      ) as _i22.Future<_i25.HttpClientRequest>);
  @override
  _i22.Future<_i25.HttpClientRequest> putUrl(Uri? url) => (super.noSuchMethod(
        Invocation.method(
          #putUrl,
          [url],
        ),
        returnValue:
            _i22.Future<_i25.HttpClientRequest>.value(_FakeHttpClientRequest_30(
          this,
          Invocation.method(
            #putUrl,
            [url],
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i25.HttpClientRequest>.value(_FakeHttpClientRequest_30(
          this,
          Invocation.method(
            #putUrl,
            [url],
          ),
        )),
      ) as _i22.Future<_i25.HttpClientRequest>);
  @override
  _i22.Future<_i25.HttpClientRequest> delete(
    String? host,
    int? port,
    String? path,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [
            host,
            port,
            path,
          ],
        ),
        returnValue:
            _i22.Future<_i25.HttpClientRequest>.value(_FakeHttpClientRequest_30(
          this,
          Invocation.method(
            #delete,
            [
              host,
              port,
              path,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i25.HttpClientRequest>.value(_FakeHttpClientRequest_30(
          this,
          Invocation.method(
            #delete,
            [
              host,
              port,
              path,
            ],
          ),
        )),
      ) as _i22.Future<_i25.HttpClientRequest>);
  @override
  _i22.Future<_i25.HttpClientRequest> deleteUrl(Uri? url) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteUrl,
          [url],
        ),
        returnValue:
            _i22.Future<_i25.HttpClientRequest>.value(_FakeHttpClientRequest_30(
          this,
          Invocation.method(
            #deleteUrl,
            [url],
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i25.HttpClientRequest>.value(_FakeHttpClientRequest_30(
          this,
          Invocation.method(
            #deleteUrl,
            [url],
          ),
        )),
      ) as _i22.Future<_i25.HttpClientRequest>);
  @override
  _i22.Future<_i25.HttpClientRequest> patch(
    String? host,
    int? port,
    String? path,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [
            host,
            port,
            path,
          ],
        ),
        returnValue:
            _i22.Future<_i25.HttpClientRequest>.value(_FakeHttpClientRequest_30(
          this,
          Invocation.method(
            #patch,
            [
              host,
              port,
              path,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i25.HttpClientRequest>.value(_FakeHttpClientRequest_30(
          this,
          Invocation.method(
            #patch,
            [
              host,
              port,
              path,
            ],
          ),
        )),
      ) as _i22.Future<_i25.HttpClientRequest>);
  @override
  _i22.Future<_i25.HttpClientRequest> patchUrl(Uri? url) => (super.noSuchMethod(
        Invocation.method(
          #patchUrl,
          [url],
        ),
        returnValue:
            _i22.Future<_i25.HttpClientRequest>.value(_FakeHttpClientRequest_30(
          this,
          Invocation.method(
            #patchUrl,
            [url],
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i25.HttpClientRequest>.value(_FakeHttpClientRequest_30(
          this,
          Invocation.method(
            #patchUrl,
            [url],
          ),
        )),
      ) as _i22.Future<_i25.HttpClientRequest>);
  @override
  _i22.Future<_i25.HttpClientRequest> head(
    String? host,
    int? port,
    String? path,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [
            host,
            port,
            path,
          ],
        ),
        returnValue:
            _i22.Future<_i25.HttpClientRequest>.value(_FakeHttpClientRequest_30(
          this,
          Invocation.method(
            #head,
            [
              host,
              port,
              path,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i25.HttpClientRequest>.value(_FakeHttpClientRequest_30(
          this,
          Invocation.method(
            #head,
            [
              host,
              port,
              path,
            ],
          ),
        )),
      ) as _i22.Future<_i25.HttpClientRequest>);
  @override
  _i22.Future<_i25.HttpClientRequest> headUrl(Uri? url) => (super.noSuchMethod(
        Invocation.method(
          #headUrl,
          [url],
        ),
        returnValue:
            _i22.Future<_i25.HttpClientRequest>.value(_FakeHttpClientRequest_30(
          this,
          Invocation.method(
            #headUrl,
            [url],
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i25.HttpClientRequest>.value(_FakeHttpClientRequest_30(
          this,
          Invocation.method(
            #headUrl,
            [url],
          ),
        )),
      ) as _i22.Future<_i25.HttpClientRequest>);
  @override
  void addCredentials(
    Uri? url,
    String? realm,
    _i25.HttpClientCredentials? credentials,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #addCredentials,
          [
            url,
            realm,
            credentials,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addProxyCredentials(
    String? host,
    int? port,
    String? realm,
    _i25.HttpClientCredentials? credentials,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #addProxyCredentials,
          [
            host,
            port,
            realm,
            credentials,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void close({bool? force = false}) => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
          {#force: force},
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [HttpClientRequest].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClientRequest extends _i1.Mock implements _i25.HttpClientRequest {
  @override
  bool get persistentConnection => (super.noSuchMethod(
        Invocation.getter(#persistentConnection),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  set persistentConnection(bool? _persistentConnection) => super.noSuchMethod(
        Invocation.setter(
          #persistentConnection,
          _persistentConnection,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get followRedirects => (super.noSuchMethod(
        Invocation.getter(#followRedirects),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  set followRedirects(bool? _followRedirects) => super.noSuchMethod(
        Invocation.setter(
          #followRedirects,
          _followRedirects,
        ),
        returnValueForMissingStub: null,
      );
  @override
  int get maxRedirects => (super.noSuchMethod(
        Invocation.getter(#maxRedirects),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  set maxRedirects(int? _maxRedirects) => super.noSuchMethod(
        Invocation.setter(
          #maxRedirects,
          _maxRedirects,
        ),
        returnValueForMissingStub: null,
      );
  @override
  int get contentLength => (super.noSuchMethod(
        Invocation.getter(#contentLength),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  set contentLength(int? _contentLength) => super.noSuchMethod(
        Invocation.setter(
          #contentLength,
          _contentLength,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get bufferOutput => (super.noSuchMethod(
        Invocation.getter(#bufferOutput),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  set bufferOutput(bool? _bufferOutput) => super.noSuchMethod(
        Invocation.setter(
          #bufferOutput,
          _bufferOutput,
        ),
        returnValueForMissingStub: null,
      );
  @override
  String get method => (super.noSuchMethod(
        Invocation.getter(#method),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  Uri get uri => (super.noSuchMethod(
        Invocation.getter(#uri),
        returnValue: _FakeUri_31(
          this,
          Invocation.getter(#uri),
        ),
        returnValueForMissingStub: _FakeUri_31(
          this,
          Invocation.getter(#uri),
        ),
      ) as Uri);
  @override
  _i25.HttpHeaders get headers => (super.noSuchMethod(
        Invocation.getter(#headers),
        returnValue: _FakeHttpHeaders_32(
          this,
          Invocation.getter(#headers),
        ),
        returnValueForMissingStub: _FakeHttpHeaders_32(
          this,
          Invocation.getter(#headers),
        ),
      ) as _i25.HttpHeaders);
  @override
  List<_i25.Cookie> get cookies => (super.noSuchMethod(
        Invocation.getter(#cookies),
        returnValue: <_i25.Cookie>[],
        returnValueForMissingStub: <_i25.Cookie>[],
      ) as List<_i25.Cookie>);
  @override
  _i22.Future<_i26.HttpClientResponse> get done => (super.noSuchMethod(
        Invocation.getter(#done),
        returnValue: _i22.Future<_i26.HttpClientResponse>.value(
            _FakeHttpClientResponse_33(
          this,
          Invocation.getter(#done),
        )),
        returnValueForMissingStub: _i22.Future<_i26.HttpClientResponse>.value(
            _FakeHttpClientResponse_33(
          this,
          Invocation.getter(#done),
        )),
      ) as _i22.Future<_i26.HttpClientResponse>);
  @override
  _i27.Encoding get encoding => (super.noSuchMethod(
        Invocation.getter(#encoding),
        returnValue: _FakeEncoding_34(
          this,
          Invocation.getter(#encoding),
        ),
        returnValueForMissingStub: _FakeEncoding_34(
          this,
          Invocation.getter(#encoding),
        ),
      ) as _i27.Encoding);
  @override
  set encoding(_i27.Encoding? _encoding) => super.noSuchMethod(
        Invocation.setter(
          #encoding,
          _encoding,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i22.Future<_i26.HttpClientResponse> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i22.Future<_i26.HttpClientResponse>.value(
            _FakeHttpClientResponse_33(
          this,
          Invocation.method(
            #close,
            [],
          ),
        )),
        returnValueForMissingStub: _i22.Future<_i26.HttpClientResponse>.value(
            _FakeHttpClientResponse_33(
          this,
          Invocation.method(
            #close,
            [],
          ),
        )),
      ) as _i22.Future<_i26.HttpClientResponse>);
  @override
  void abort([
    Object? exception,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #abort,
          [
            exception,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void add(List<int>? data) => super.noSuchMethod(
        Invocation.method(
          #add,
          [data],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void write(Object? object) => super.noSuchMethod(
        Invocation.method(
          #write,
          [object],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void writeAll(
    Iterable<dynamic>? objects, [
    String? separator = r'',
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #writeAll,
          [
            objects,
            separator,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void writeln([Object? object = r'']) => super.noSuchMethod(
        Invocation.method(
          #writeln,
          [object],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void writeCharCode(int? charCode) => super.noSuchMethod(
        Invocation.method(
          #writeCharCode,
          [charCode],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i22.Future<dynamic> addStream(_i22.Stream<List<int>>? stream) =>
      (super.noSuchMethod(
        Invocation.method(
          #addStream,
          [stream],
        ),
        returnValue: _i22.Future<dynamic>.value(),
        returnValueForMissingStub: _i22.Future<dynamic>.value(),
      ) as _i22.Future<dynamic>);
  @override
  _i22.Future<dynamic> flush() => (super.noSuchMethod(
        Invocation.method(
          #flush,
          [],
        ),
        returnValue: _i22.Future<dynamic>.value(),
        returnValueForMissingStub: _i22.Future<dynamic>.value(),
      ) as _i22.Future<dynamic>);
}

/// A class which mocks [HttpClientResponse].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClientResponse extends _i1.Mock
    implements _i26.HttpClientResponse {
  @override
  int get statusCode => (super.noSuchMethod(
        Invocation.getter(#statusCode),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  String get reasonPhrase => (super.noSuchMethod(
        Invocation.getter(#reasonPhrase),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  int get contentLength => (super.noSuchMethod(
        Invocation.getter(#contentLength),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  _i25.HttpClientResponseCompressionState get compressionState =>
      (super.noSuchMethod(
        Invocation.getter(#compressionState),
        returnValue: _i25.HttpClientResponseCompressionState.notCompressed,
        returnValueForMissingStub:
            _i25.HttpClientResponseCompressionState.notCompressed,
      ) as _i25.HttpClientResponseCompressionState);
  @override
  bool get persistentConnection => (super.noSuchMethod(
        Invocation.getter(#persistentConnection),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get isRedirect => (super.noSuchMethod(
        Invocation.getter(#isRedirect),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  List<_i25.RedirectInfo> get redirects => (super.noSuchMethod(
        Invocation.getter(#redirects),
        returnValue: <_i25.RedirectInfo>[],
        returnValueForMissingStub: <_i25.RedirectInfo>[],
      ) as List<_i25.RedirectInfo>);
  @override
  _i25.HttpHeaders get headers => (super.noSuchMethod(
        Invocation.getter(#headers),
        returnValue: _FakeHttpHeaders_32(
          this,
          Invocation.getter(#headers),
        ),
        returnValueForMissingStub: _FakeHttpHeaders_32(
          this,
          Invocation.getter(#headers),
        ),
      ) as _i25.HttpHeaders);
  @override
  List<_i25.Cookie> get cookies => (super.noSuchMethod(
        Invocation.getter(#cookies),
        returnValue: <_i25.Cookie>[],
        returnValueForMissingStub: <_i25.Cookie>[],
      ) as List<_i25.Cookie>);
  @override
  bool get isBroadcast => (super.noSuchMethod(
        Invocation.getter(#isBroadcast),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i22.Future<int> get length => (super.noSuchMethod(
        Invocation.getter(#length),
        returnValue: _i22.Future<int>.value(0),
        returnValueForMissingStub: _i22.Future<int>.value(0),
      ) as _i22.Future<int>);
  @override
  _i22.Future<bool> get isEmpty => (super.noSuchMethod(
        Invocation.getter(#isEmpty),
        returnValue: _i22.Future<bool>.value(false),
        returnValueForMissingStub: _i22.Future<bool>.value(false),
      ) as _i22.Future<bool>);
  @override
  _i22.Future<List<int>> get first => (super.noSuchMethod(
        Invocation.getter(#first),
        returnValue: _i22.Future<List<int>>.value(<int>[]),
        returnValueForMissingStub: _i22.Future<List<int>>.value(<int>[]),
      ) as _i22.Future<List<int>>);
  @override
  _i22.Future<List<int>> get last => (super.noSuchMethod(
        Invocation.getter(#last),
        returnValue: _i22.Future<List<int>>.value(<int>[]),
        returnValueForMissingStub: _i22.Future<List<int>>.value(<int>[]),
      ) as _i22.Future<List<int>>);
  @override
  _i22.Future<List<int>> get single => (super.noSuchMethod(
        Invocation.getter(#single),
        returnValue: _i22.Future<List<int>>.value(<int>[]),
        returnValueForMissingStub: _i22.Future<List<int>>.value(<int>[]),
      ) as _i22.Future<List<int>>);
  @override
  _i22.Future<_i26.HttpClientResponse> redirect([
    String? method,
    Uri? url,
    bool? followLoops,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #redirect,
          [
            method,
            url,
            followLoops,
          ],
        ),
        returnValue: _i22.Future<_i26.HttpClientResponse>.value(
            _FakeHttpClientResponse_33(
          this,
          Invocation.method(
            #redirect,
            [
              method,
              url,
              followLoops,
            ],
          ),
        )),
        returnValueForMissingStub: _i22.Future<_i26.HttpClientResponse>.value(
            _FakeHttpClientResponse_33(
          this,
          Invocation.method(
            #redirect,
            [
              method,
              url,
              followLoops,
            ],
          ),
        )),
      ) as _i22.Future<_i26.HttpClientResponse>);
  @override
  _i22.Future<_i25.Socket> detachSocket() => (super.noSuchMethod(
        Invocation.method(
          #detachSocket,
          [],
        ),
        returnValue: _i22.Future<_i25.Socket>.value(_FakeSocket_35(
          this,
          Invocation.method(
            #detachSocket,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i25.Socket>.value(_FakeSocket_35(
          this,
          Invocation.method(
            #detachSocket,
            [],
          ),
        )),
      ) as _i22.Future<_i25.Socket>);
  @override
  _i22.Stream<List<int>> asBroadcastStream({
    void Function(_i22.StreamSubscription<List<int>>)? onListen,
    void Function(_i22.StreamSubscription<List<int>>)? onCancel,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #asBroadcastStream,
          [],
          {
            #onListen: onListen,
            #onCancel: onCancel,
          },
        ),
        returnValue: _i22.Stream<List<int>>.empty(),
        returnValueForMissingStub: _i22.Stream<List<int>>.empty(),
      ) as _i22.Stream<List<int>>);
  @override
  _i22.StreamSubscription<List<int>> listen(
    void Function(List<int>)? onData, {
    Function? onError,
    void Function()? onDone,
    bool? cancelOnError,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #listen,
          [onData],
          {
            #onError: onError,
            #onDone: onDone,
            #cancelOnError: cancelOnError,
          },
        ),
        returnValue: _FakeStreamSubscription_36<List<int>>(
          this,
          Invocation.method(
            #listen,
            [onData],
            {
              #onError: onError,
              #onDone: onDone,
              #cancelOnError: cancelOnError,
            },
          ),
        ),
        returnValueForMissingStub: _FakeStreamSubscription_36<List<int>>(
          this,
          Invocation.method(
            #listen,
            [onData],
            {
              #onError: onError,
              #onDone: onDone,
              #cancelOnError: cancelOnError,
            },
          ),
        ),
      ) as _i22.StreamSubscription<List<int>>);
  @override
  _i22.Stream<List<int>> where(bool Function(List<int>)? test) =>
      (super.noSuchMethod(
        Invocation.method(
          #where,
          [test],
        ),
        returnValue: _i22.Stream<List<int>>.empty(),
        returnValueForMissingStub: _i22.Stream<List<int>>.empty(),
      ) as _i22.Stream<List<int>>);
  @override
  _i22.Stream<S> map<S>(S Function(List<int>)? convert) => (super.noSuchMethod(
        Invocation.method(
          #map,
          [convert],
        ),
        returnValue: _i22.Stream<S>.empty(),
        returnValueForMissingStub: _i22.Stream<S>.empty(),
      ) as _i22.Stream<S>);
  @override
  _i22.Stream<E> asyncMap<E>(_i22.FutureOr<E> Function(List<int>)? convert) =>
      (super.noSuchMethod(
        Invocation.method(
          #asyncMap,
          [convert],
        ),
        returnValue: _i22.Stream<E>.empty(),
        returnValueForMissingStub: _i22.Stream<E>.empty(),
      ) as _i22.Stream<E>);
  @override
  _i22.Stream<E> asyncExpand<E>(_i22.Stream<E>? Function(List<int>)? convert) =>
      (super.noSuchMethod(
        Invocation.method(
          #asyncExpand,
          [convert],
        ),
        returnValue: _i22.Stream<E>.empty(),
        returnValueForMissingStub: _i22.Stream<E>.empty(),
      ) as _i22.Stream<E>);
  @override
  _i22.Stream<List<int>> handleError(
    Function? onError, {
    bool Function(dynamic)? test,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #handleError,
          [onError],
          {#test: test},
        ),
        returnValue: _i22.Stream<List<int>>.empty(),
        returnValueForMissingStub: _i22.Stream<List<int>>.empty(),
      ) as _i22.Stream<List<int>>);
  @override
  _i22.Stream<S> expand<S>(Iterable<S> Function(List<int>)? convert) =>
      (super.noSuchMethod(
        Invocation.method(
          #expand,
          [convert],
        ),
        returnValue: _i22.Stream<S>.empty(),
        returnValueForMissingStub: _i22.Stream<S>.empty(),
      ) as _i22.Stream<S>);
  @override
  _i22.Future<dynamic> pipe(_i22.StreamConsumer<List<int>>? streamConsumer) =>
      (super.noSuchMethod(
        Invocation.method(
          #pipe,
          [streamConsumer],
        ),
        returnValue: _i22.Future<dynamic>.value(),
        returnValueForMissingStub: _i22.Future<dynamic>.value(),
      ) as _i22.Future<dynamic>);
  @override
  _i22.Stream<S> transform<S>(
          _i22.StreamTransformer<List<int>, S>? streamTransformer) =>
      (super.noSuchMethod(
        Invocation.method(
          #transform,
          [streamTransformer],
        ),
        returnValue: _i22.Stream<S>.empty(),
        returnValueForMissingStub: _i22.Stream<S>.empty(),
      ) as _i22.Stream<S>);
  @override
  _i22.Future<List<int>> reduce(
          List<int> Function(
            List<int>,
            List<int>,
          )? combine) =>
      (super.noSuchMethod(
        Invocation.method(
          #reduce,
          [combine],
        ),
        returnValue: _i22.Future<List<int>>.value(<int>[]),
        returnValueForMissingStub: _i22.Future<List<int>>.value(<int>[]),
      ) as _i22.Future<List<int>>);
  @override
  _i22.Future<S> fold<S>(
    S? initialValue,
    S Function(
      S,
      List<int>,
    )? combine,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fold,
          [
            initialValue,
            combine,
          ],
        ),
        returnValue: _i77.ifNotNull(
              _i77.dummyValueOrNull<S>(
                this,
                Invocation.method(
                  #fold,
                  [
                    initialValue,
                    combine,
                  ],
                ),
              ),
              (S v) => _i22.Future<S>.value(v),
            ) ??
            _FakeFuture_20<S>(
              this,
              Invocation.method(
                #fold,
                [
                  initialValue,
                  combine,
                ],
              ),
            ),
        returnValueForMissingStub: _i77.ifNotNull(
              _i77.dummyValueOrNull<S>(
                this,
                Invocation.method(
                  #fold,
                  [
                    initialValue,
                    combine,
                  ],
                ),
              ),
              (S v) => _i22.Future<S>.value(v),
            ) ??
            _FakeFuture_20<S>(
              this,
              Invocation.method(
                #fold,
                [
                  initialValue,
                  combine,
                ],
              ),
            ),
      ) as _i22.Future<S>);
  @override
  _i22.Future<String> join([String? separator = r'']) => (super.noSuchMethod(
        Invocation.method(
          #join,
          [separator],
        ),
        returnValue: _i22.Future<String>.value(''),
        returnValueForMissingStub: _i22.Future<String>.value(''),
      ) as _i22.Future<String>);
  @override
  _i22.Future<bool> contains(Object? needle) => (super.noSuchMethod(
        Invocation.method(
          #contains,
          [needle],
        ),
        returnValue: _i22.Future<bool>.value(false),
        returnValueForMissingStub: _i22.Future<bool>.value(false),
      ) as _i22.Future<bool>);
  @override
  _i22.Future<void> forEach(void Function(List<int>)? action) =>
      (super.noSuchMethod(
        Invocation.method(
          #forEach,
          [action],
        ),
        returnValue: _i22.Future<void>.value(),
        returnValueForMissingStub: _i22.Future<void>.value(),
      ) as _i22.Future<void>);
  @override
  _i22.Future<bool> every(bool Function(List<int>)? test) =>
      (super.noSuchMethod(
        Invocation.method(
          #every,
          [test],
        ),
        returnValue: _i22.Future<bool>.value(false),
        returnValueForMissingStub: _i22.Future<bool>.value(false),
      ) as _i22.Future<bool>);
  @override
  _i22.Future<bool> any(bool Function(List<int>)? test) => (super.noSuchMethod(
        Invocation.method(
          #any,
          [test],
        ),
        returnValue: _i22.Future<bool>.value(false),
        returnValueForMissingStub: _i22.Future<bool>.value(false),
      ) as _i22.Future<bool>);
  @override
  _i22.Stream<R> cast<R>() => (super.noSuchMethod(
        Invocation.method(
          #cast,
          [],
        ),
        returnValue: _i22.Stream<R>.empty(),
        returnValueForMissingStub: _i22.Stream<R>.empty(),
      ) as _i22.Stream<R>);
  @override
  _i22.Future<List<List<int>>> toList() => (super.noSuchMethod(
        Invocation.method(
          #toList,
          [],
        ),
        returnValue: _i22.Future<List<List<int>>>.value(<List<int>>[]),
        returnValueForMissingStub:
            _i22.Future<List<List<int>>>.value(<List<int>>[]),
      ) as _i22.Future<List<List<int>>>);
  @override
  _i22.Future<Set<List<int>>> toSet() => (super.noSuchMethod(
        Invocation.method(
          #toSet,
          [],
        ),
        returnValue: _i22.Future<Set<List<int>>>.value(<List<int>>{}),
        returnValueForMissingStub:
            _i22.Future<Set<List<int>>>.value(<List<int>>{}),
      ) as _i22.Future<Set<List<int>>>);
  @override
  _i22.Future<E> drain<E>([E? futureValue]) => (super.noSuchMethod(
        Invocation.method(
          #drain,
          [futureValue],
        ),
        returnValue: _i77.ifNotNull(
              _i77.dummyValueOrNull<E>(
                this,
                Invocation.method(
                  #drain,
                  [futureValue],
                ),
              ),
              (E v) => _i22.Future<E>.value(v),
            ) ??
            _FakeFuture_20<E>(
              this,
              Invocation.method(
                #drain,
                [futureValue],
              ),
            ),
        returnValueForMissingStub: _i77.ifNotNull(
              _i77.dummyValueOrNull<E>(
                this,
                Invocation.method(
                  #drain,
                  [futureValue],
                ),
              ),
              (E v) => _i22.Future<E>.value(v),
            ) ??
            _FakeFuture_20<E>(
              this,
              Invocation.method(
                #drain,
                [futureValue],
              ),
            ),
      ) as _i22.Future<E>);
  @override
  _i22.Stream<List<int>> take(int? count) => (super.noSuchMethod(
        Invocation.method(
          #take,
          [count],
        ),
        returnValue: _i22.Stream<List<int>>.empty(),
        returnValueForMissingStub: _i22.Stream<List<int>>.empty(),
      ) as _i22.Stream<List<int>>);
  @override
  _i22.Stream<List<int>> takeWhile(bool Function(List<int>)? test) =>
      (super.noSuchMethod(
        Invocation.method(
          #takeWhile,
          [test],
        ),
        returnValue: _i22.Stream<List<int>>.empty(),
        returnValueForMissingStub: _i22.Stream<List<int>>.empty(),
      ) as _i22.Stream<List<int>>);
  @override
  _i22.Stream<List<int>> skip(int? count) => (super.noSuchMethod(
        Invocation.method(
          #skip,
          [count],
        ),
        returnValue: _i22.Stream<List<int>>.empty(),
        returnValueForMissingStub: _i22.Stream<List<int>>.empty(),
      ) as _i22.Stream<List<int>>);
  @override
  _i22.Stream<List<int>> skipWhile(bool Function(List<int>)? test) =>
      (super.noSuchMethod(
        Invocation.method(
          #skipWhile,
          [test],
        ),
        returnValue: _i22.Stream<List<int>>.empty(),
        returnValueForMissingStub: _i22.Stream<List<int>>.empty(),
      ) as _i22.Stream<List<int>>);
  @override
  _i22.Stream<List<int>> distinct(
          [bool Function(
            List<int>,
            List<int>,
          )? equals]) =>
      (super.noSuchMethod(
        Invocation.method(
          #distinct,
          [equals],
        ),
        returnValue: _i22.Stream<List<int>>.empty(),
        returnValueForMissingStub: _i22.Stream<List<int>>.empty(),
      ) as _i22.Stream<List<int>>);
  @override
  _i22.Future<List<int>> firstWhere(
    bool Function(List<int>)? test, {
    List<int> Function()? orElse,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #firstWhere,
          [test],
          {#orElse: orElse},
        ),
        returnValue: _i22.Future<List<int>>.value(<int>[]),
        returnValueForMissingStub: _i22.Future<List<int>>.value(<int>[]),
      ) as _i22.Future<List<int>>);
  @override
  _i22.Future<List<int>> lastWhere(
    bool Function(List<int>)? test, {
    List<int> Function()? orElse,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #lastWhere,
          [test],
          {#orElse: orElse},
        ),
        returnValue: _i22.Future<List<int>>.value(<int>[]),
        returnValueForMissingStub: _i22.Future<List<int>>.value(<int>[]),
      ) as _i22.Future<List<int>>);
  @override
  _i22.Future<List<int>> singleWhere(
    bool Function(List<int>)? test, {
    List<int> Function()? orElse,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #singleWhere,
          [test],
          {#orElse: orElse},
        ),
        returnValue: _i22.Future<List<int>>.value(<int>[]),
        returnValueForMissingStub: _i22.Future<List<int>>.value(<int>[]),
      ) as _i22.Future<List<int>>);
  @override
  _i22.Future<List<int>> elementAt(int? index) => (super.noSuchMethod(
        Invocation.method(
          #elementAt,
          [index],
        ),
        returnValue: _i22.Future<List<int>>.value(<int>[]),
        returnValueForMissingStub: _i22.Future<List<int>>.value(<int>[]),
      ) as _i22.Future<List<int>>);
  @override
  _i22.Stream<List<int>> timeout(
    Duration? timeLimit, {
    void Function(_i22.EventSink<List<int>>)? onTimeout,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #timeout,
          [timeLimit],
          {#onTimeout: onTimeout},
        ),
        returnValue: _i22.Stream<List<int>>.empty(),
        returnValueForMissingStub: _i22.Stream<List<int>>.empty(),
      ) as _i22.Stream<List<int>>);
}

/// A class which mocks [HttpHeaders].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpHeaders extends _i1.Mock implements _i25.HttpHeaders {
  @override
  set date(DateTime? _date) => super.noSuchMethod(
        Invocation.setter(
          #date,
          _date,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set expires(DateTime? _expires) => super.noSuchMethod(
        Invocation.setter(
          #expires,
          _expires,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set ifModifiedSince(DateTime? _ifModifiedSince) => super.noSuchMethod(
        Invocation.setter(
          #ifModifiedSince,
          _ifModifiedSince,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set host(String? _host) => super.noSuchMethod(
        Invocation.setter(
          #host,
          _host,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set port(int? _port) => super.noSuchMethod(
        Invocation.setter(
          #port,
          _port,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set contentType(_i25.ContentType? _contentType) => super.noSuchMethod(
        Invocation.setter(
          #contentType,
          _contentType,
        ),
        returnValueForMissingStub: null,
      );
  @override
  int get contentLength => (super.noSuchMethod(
        Invocation.getter(#contentLength),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  set contentLength(int? _contentLength) => super.noSuchMethod(
        Invocation.setter(
          #contentLength,
          _contentLength,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get persistentConnection => (super.noSuchMethod(
        Invocation.getter(#persistentConnection),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  set persistentConnection(bool? _persistentConnection) => super.noSuchMethod(
        Invocation.setter(
          #persistentConnection,
          _persistentConnection,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get chunkedTransferEncoding => (super.noSuchMethod(
        Invocation.getter(#chunkedTransferEncoding),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  set chunkedTransferEncoding(bool? _chunkedTransferEncoding) =>
      super.noSuchMethod(
        Invocation.setter(
          #chunkedTransferEncoding,
          _chunkedTransferEncoding,
        ),
        returnValueForMissingStub: null,
      );
  @override
  List<String>? operator [](String? name) => (super.noSuchMethod(
        Invocation.method(
          #[],
          [name],
        ),
        returnValueForMissingStub: null,
      ) as List<String>?);
  @override
  String? value(String? name) => (super.noSuchMethod(
        Invocation.method(
          #value,
          [name],
        ),
        returnValueForMissingStub: null,
      ) as String?);
  @override
  void add(
    String? name,
    Object? value, {
    bool? preserveHeaderCase = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #add,
          [
            name,
            value,
          ],
          {#preserveHeaderCase: preserveHeaderCase},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void set(
    String? name,
    Object? value, {
    bool? preserveHeaderCase = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #set,
          [
            name,
            value,
          ],
          {#preserveHeaderCase: preserveHeaderCase},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void remove(
    String? name,
    Object? value,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #remove,
          [
            name,
            value,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeAll(String? name) => super.noSuchMethod(
        Invocation.method(
          #removeAll,
          [name],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void forEach(
          void Function(
            String,
            List<String>,
          )? action) =>
      super.noSuchMethod(
        Invocation.method(
          #forEach,
          [action],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void noFolding(String? name) => super.noSuchMethod(
        Invocation.method(
          #noFolding,
          [name],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void clear() => super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [InboxApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockInboxApi extends _i1.Mock implements _i83.InboxApi {
  @override
  _i22.Future<List<_i21.Conversation>> getConversations({
    String? scope = null,
    bool? forceRefresh = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getConversations,
          [],
          {
            #scope: scope,
            #forceRefresh: forceRefresh,
          },
        ),
        returnValue:
            _i22.Future<List<_i21.Conversation>>.value(<_i21.Conversation>[]),
        returnValueForMissingStub:
            _i22.Future<List<_i21.Conversation>>.value(<_i21.Conversation>[]),
      ) as _i22.Future<List<_i21.Conversation>>);
  @override
  _i22.Future<_i21.Conversation> getConversation(
    String? id, {
    bool? refresh = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getConversation,
          [id],
          {#refresh: refresh},
        ),
        returnValue: _i22.Future<_i21.Conversation>.value(_FakeConversation_19(
          this,
          Invocation.method(
            #getConversation,
            [id],
            {#refresh: refresh},
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i21.Conversation>.value(_FakeConversation_19(
          this,
          Invocation.method(
            #getConversation,
            [id],
            {#refresh: refresh},
          ),
        )),
      ) as _i22.Future<_i21.Conversation>);
  @override
  _i22.Future<_i28.UnreadCount> getUnreadCount() => (super.noSuchMethod(
        Invocation.method(
          #getUnreadCount,
          [],
        ),
        returnValue: _i22.Future<_i28.UnreadCount>.value(_FakeUnreadCount_37(
          this,
          Invocation.method(
            #getUnreadCount,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i28.UnreadCount>.value(_FakeUnreadCount_37(
          this,
          Invocation.method(
            #getUnreadCount,
            [],
          ),
        )),
      ) as _i22.Future<_i28.UnreadCount>);
  @override
  _i22.Future<_i21.Conversation> addMessage(
    String? conversationId,
    String? body,
    List<String>? recipientIds,
    List<String>? attachmentIds,
    List<String>? includeMessageIds,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addMessage,
          [
            conversationId,
            body,
            recipientIds,
            attachmentIds,
            includeMessageIds,
          ],
        ),
        returnValue: _i22.Future<_i21.Conversation>.value(_FakeConversation_19(
          this,
          Invocation.method(
            #addMessage,
            [
              conversationId,
              body,
              recipientIds,
              attachmentIds,
              includeMessageIds,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i21.Conversation>.value(_FakeConversation_19(
          this,
          Invocation.method(
            #addMessage,
            [
              conversationId,
              body,
              recipientIds,
              attachmentIds,
              includeMessageIds,
            ],
          ),
        )),
      ) as _i22.Future<_i21.Conversation>);
  @override
  _i22.Future<List<_i84.Recipient>> getRecipients(
    String? courseId, {
    bool? forceRefresh = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRecipients,
          [courseId],
          {#forceRefresh: forceRefresh},
        ),
        returnValue:
            _i22.Future<List<_i84.Recipient>>.value(<_i84.Recipient>[]),
        returnValueForMissingStub:
            _i22.Future<List<_i84.Recipient>>.value(<_i84.Recipient>[]),
      ) as _i22.Future<List<_i84.Recipient>>);
  @override
  _i22.Future<_i21.Conversation> createConversation(
    String? courseId,
    List<String>? recipientIds,
    String? subject,
    String? body,
    List<String>? attachmentIds,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createConversation,
          [
            courseId,
            recipientIds,
            subject,
            body,
            attachmentIds,
          ],
        ),
        returnValue: _i22.Future<_i21.Conversation>.value(_FakeConversation_19(
          this,
          Invocation.method(
            #createConversation,
            [
              courseId,
              recipientIds,
              subject,
              body,
              attachmentIds,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i21.Conversation>.value(_FakeConversation_19(
          this,
          Invocation.method(
            #createConversation,
            [
              courseId,
              recipientIds,
              subject,
              body,
              attachmentIds,
            ],
          ),
        )),
      ) as _i22.Future<_i21.Conversation>);
}

/// A class which mocks [NavigatorObserver].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigatorObserver extends _i1.Mock implements _i40.NavigatorObserver {
  @override
  void didPush(
    _i40.Route<dynamic>? route,
    _i40.Route<dynamic>? previousRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #didPush,
          [
            route,
            previousRoute,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void didPop(
    _i40.Route<dynamic>? route,
    _i40.Route<dynamic>? previousRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #didPop,
          [
            route,
            previousRoute,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void didRemove(
    _i40.Route<dynamic>? route,
    _i40.Route<dynamic>? previousRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #didRemove,
          [
            route,
            previousRoute,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void didReplace({
    _i40.Route<dynamic>? newRoute,
    _i40.Route<dynamic>? oldRoute,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #didReplace,
          [],
          {
            #newRoute: newRoute,
            #oldRoute: oldRoute,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  void didStartUserGesture(
    _i40.Route<dynamic>? route,
    _i40.Route<dynamic>? previousRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #didStartUserGesture,
          [
            route,
            previousRoute,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void didStopUserGesture() => super.noSuchMethod(
        Invocation.method(
          #didStopUserGesture,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [NotificationUtil].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotificationUtil extends _i1.Mock implements _i85.NotificationUtil {
  @override
  _i22.Future<void> scheduleReminder(
    _i61.AppLocalizations? l10n,
    String? title,
    String? body,
    _i60.Reminder? reminder,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #scheduleReminder,
          [
            l10n,
            title,
            body,
            reminder,
          ],
        ),
        returnValue: _i22.Future<void>.value(),
        returnValueForMissingStub: _i22.Future<void>.value(),
      ) as _i22.Future<void>);
  @override
  _i22.Future<void> deleteNotification(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteNotification,
          [id],
        ),
        returnValue: _i22.Future<void>.value(),
        returnValueForMissingStub: _i22.Future<void>.value(),
      ) as _i22.Future<void>);
  @override
  _i22.Future<void> deleteNotifications(List<int>? ids) => (super.noSuchMethod(
        Invocation.method(
          #deleteNotifications,
          [ids],
        ),
        returnValue: _i22.Future<void>.value(),
        returnValueForMissingStub: _i22.Future<void>.value(),
      ) as _i22.Future<void>);
}

/// A class which mocks [OAuthApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockOAuthApi extends _i1.Mock implements _i86.OAuthApi {
  @override
  _i22.Future<_i29.AuthenticatedUrl> getAuthenticatedUrl(String? targetUrl) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAuthenticatedUrl,
          [targetUrl],
        ),
        returnValue:
            _i22.Future<_i29.AuthenticatedUrl>.value(_FakeAuthenticatedUrl_38(
          this,
          Invocation.method(
            #getAuthenticatedUrl,
            [targetUrl],
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i29.AuthenticatedUrl>.value(_FakeAuthenticatedUrl_38(
          this,
          Invocation.method(
            #getAuthenticatedUrl,
            [targetUrl],
          ),
        )),
      ) as _i22.Future<_i29.AuthenticatedUrl>);
}

/// A class which mocks [PairingInteractor].
///
/// See the documentation for Mockito's code generation for more information.
class MockPairingInteractor extends _i1.Mock implements _i87.PairingInteractor {
  @override
  _i22.Future<_i30.QRPairingScanResult> scanQRCode() => (super.noSuchMethod(
        Invocation.method(
          #scanQRCode,
          [],
        ),
        returnValue: _i22.Future<_i30.QRPairingScanResult>.value(
            _FakeQRPairingScanResult_39(
          this,
          Invocation.method(
            #scanQRCode,
            [],
          ),
        )),
        returnValueForMissingStub: _i22.Future<_i30.QRPairingScanResult>.value(
            _FakeQRPairingScanResult_39(
          this,
          Invocation.method(
            #scanQRCode,
            [],
          ),
        )),
      ) as _i22.Future<_i30.QRPairingScanResult>);
  @override
  _i22.Future<bool?> pairWithStudent(String? pairingCode) =>
      (super.noSuchMethod(
        Invocation.method(
          #pairWithStudent,
          [pairingCode],
        ),
        returnValue: _i22.Future<bool?>.value(),
        returnValueForMissingStub: _i22.Future<bool?>.value(),
      ) as _i22.Future<bool?>);
}

/// A class which mocks [PageApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockPageApi extends _i1.Mock implements _i88.PageApi {
  @override
  _i22.Future<_i16.CanvasPage> getCourseFrontPage(
    String? courseId, {
    bool? forceRefresh = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCourseFrontPage,
          [courseId],
          {#forceRefresh: forceRefresh},
        ),
        returnValue: _i22.Future<_i16.CanvasPage>.value(_FakeCanvasPage_14(
          this,
          Invocation.method(
            #getCourseFrontPage,
            [courseId],
            {#forceRefresh: forceRefresh},
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i16.CanvasPage>.value(_FakeCanvasPage_14(
          this,
          Invocation.method(
            #getCourseFrontPage,
            [courseId],
            {#forceRefresh: forceRefresh},
          ),
        )),
      ) as _i22.Future<_i16.CanvasPage>);
}

/// A class which mocks [FlutterLocalNotificationsPlugin].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlutterLocalNotificationsPlugin extends _i1.Mock
    implements _i89.FlutterLocalNotificationsPlugin {
  @override
  _i22.Future<bool?> initialize(
    _i89.InitializationSettings? initializationSettings, {
    _i89.DidReceiveNotificationResponseCallback?
        onDidReceiveNotificationResponse,
    _i89.DidReceiveBackgroundNotificationResponseCallback?
        onDidReceiveBackgroundNotificationResponse,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [initializationSettings],
          {
            #onDidReceiveNotificationResponse: onDidReceiveNotificationResponse,
            #onDidReceiveBackgroundNotificationResponse:
                onDidReceiveBackgroundNotificationResponse,
          },
        ),
        returnValue: _i22.Future<bool?>.value(),
        returnValueForMissingStub: _i22.Future<bool?>.value(),
      ) as _i22.Future<bool?>);
  @override
  _i22.Future<_i89.NotificationAppLaunchDetails?>
      getNotificationAppLaunchDetails() => (super.noSuchMethod(
            Invocation.method(
              #getNotificationAppLaunchDetails,
              [],
            ),
            returnValue:
                _i22.Future<_i89.NotificationAppLaunchDetails?>.value(),
            returnValueForMissingStub:
                _i22.Future<_i89.NotificationAppLaunchDetails?>.value(),
          ) as _i22.Future<_i89.NotificationAppLaunchDetails?>);
  @override
  _i22.Future<void> show(
    int? id,
    String? title,
    String? body,
    _i89.NotificationDetails? notificationDetails, {
    String? payload,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #show,
          [
            id,
            title,
            body,
            notificationDetails,
          ],
          {#payload: payload},
        ),
        returnValue: _i22.Future<void>.value(),
        returnValueForMissingStub: _i22.Future<void>.value(),
      ) as _i22.Future<void>);
  @override
  _i22.Future<void> cancel(
    int? id, {
    String? tag,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #cancel,
          [id],
          {#tag: tag},
        ),
        returnValue: _i22.Future<void>.value(),
        returnValueForMissingStub: _i22.Future<void>.value(),
      ) as _i22.Future<void>);
  @override
  _i22.Future<void> cancelAll() => (super.noSuchMethod(
        Invocation.method(
          #cancelAll,
          [],
        ),
        returnValue: _i22.Future<void>.value(),
        returnValueForMissingStub: _i22.Future<void>.value(),
      ) as _i22.Future<void>);
  @override
  _i22.Future<void> zonedSchedule(
    int? id,
    String? title,
    String? body,
    _i90.TZDateTime? scheduledDate,
    _i89.NotificationDetails? notificationDetails, {
    required _i89.UILocalNotificationDateInterpretation?
        uiLocalNotificationDateInterpretation,
    bool? androidAllowWhileIdle = false,
    _i89.AndroidScheduleMode? androidScheduleMode,
    String? payload,
    _i89.DateTimeComponents? matchDateTimeComponents,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #zonedSchedule,
          [
            id,
            title,
            body,
            scheduledDate,
            notificationDetails,
          ],
          {
            #uiLocalNotificationDateInterpretation:
                uiLocalNotificationDateInterpretation,
            #androidAllowWhileIdle: androidAllowWhileIdle,
            #androidScheduleMode: androidScheduleMode,
            #payload: payload,
            #matchDateTimeComponents: matchDateTimeComponents,
          },
        ),
        returnValue: _i22.Future<void>.value(),
        returnValueForMissingStub: _i22.Future<void>.value(),
      ) as _i22.Future<void>);
  @override
  _i22.Future<void> periodicallyShow(
    int? id,
    String? title,
    String? body,
    _i89.RepeatInterval? repeatInterval,
    _i89.NotificationDetails? notificationDetails, {
    String? payload,
    bool? androidAllowWhileIdle = false,
    _i89.AndroidScheduleMode? androidScheduleMode,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #periodicallyShow,
          [
            id,
            title,
            body,
            repeatInterval,
            notificationDetails,
          ],
          {
            #payload: payload,
            #androidAllowWhileIdle: androidAllowWhileIdle,
            #androidScheduleMode: androidScheduleMode,
          },
        ),
        returnValue: _i22.Future<void>.value(),
        returnValueForMissingStub: _i22.Future<void>.value(),
      ) as _i22.Future<void>);
  @override
  _i22.Future<List<_i89.PendingNotificationRequest>>
      pendingNotificationRequests() => (super.noSuchMethod(
            Invocation.method(
              #pendingNotificationRequests,
              [],
            ),
            returnValue:
                _i22.Future<List<_i89.PendingNotificationRequest>>.value(
                    <_i89.PendingNotificationRequest>[]),
            returnValueForMissingStub:
                _i22.Future<List<_i89.PendingNotificationRequest>>.value(
                    <_i89.PendingNotificationRequest>[]),
          ) as _i22.Future<List<_i89.PendingNotificationRequest>>);
  @override
  _i22.Future<List<_i89.ActiveNotification>> getActiveNotifications() =>
      (super.noSuchMethod(
        Invocation.method(
          #getActiveNotifications,
          [],
        ),
        returnValue: _i22.Future<List<_i89.ActiveNotification>>.value(
            <_i89.ActiveNotification>[]),
        returnValueForMissingStub:
            _i22.Future<List<_i89.ActiveNotification>>.value(
                <_i89.ActiveNotification>[]),
      ) as _i22.Future<List<_i89.ActiveNotification>>);
}

/// A class which mocks [PairingUtil].
///
/// See the documentation for Mockito's code generation for more information.
class MockPairingUtil extends _i1.Mock implements _i91.PairingUtil {
  @override
  dynamic pairNewStudent(
    _i40.BuildContext? context,
    dynamic Function()? onSuccess,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #pairNewStudent,
          [
            context,
            onSuccess,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [QuickNav].
///
/// See the documentation for Mockito's code generation for more information.
class MockQuickNav extends _i1.Mock implements _i92.QuickNav {
  @override
  _i22.Future<T> push<T extends Object>(
    _i40.BuildContext? context,
    _i40.Widget? widget,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #push,
          [
            context,
            widget,
          ],
        ),
        returnValue: _i77.ifNotNull(
              _i77.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #push,
                  [
                    context,
                    widget,
                  ],
                ),
              ),
              (T v) => _i22.Future<T>.value(v),
            ) ??
            _FakeFuture_20<T>(
              this,
              Invocation.method(
                #push,
                [
                  context,
                  widget,
                ],
              ),
            ),
        returnValueForMissingStub: _i77.ifNotNull(
              _i77.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #push,
                  [
                    context,
                    widget,
                  ],
                ),
              ),
              (T v) => _i22.Future<T>.value(v),
            ) ??
            _FakeFuture_20<T>(
              this,
              Invocation.method(
                #push,
                [
                  context,
                  widget,
                ],
              ),
            ),
      ) as _i22.Future<T>);
  @override
  _i22.Future<dynamic> pushRoute<T extends Object>(
    _i40.BuildContext? context,
    String? route, {
    _i93.TransitionType? transitionType = _i93.TransitionType.material,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pushRoute,
          [
            context,
            route,
          ],
          {#transitionType: transitionType},
        ),
        returnValue: _i22.Future<dynamic>.value(),
        returnValueForMissingStub: _i22.Future<dynamic>.value(),
      ) as _i22.Future<dynamic>);
  @override
  _i22.Future<T> replaceRoute<T extends Object>(
    _i40.BuildContext? context,
    String? route, {
    _i93.TransitionType? transitionType = _i93.TransitionType.material,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #replaceRoute,
          [
            context,
            route,
          ],
          {#transitionType: transitionType},
        ),
        returnValue: _i77.ifNotNull(
              _i77.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #replaceRoute,
                  [
                    context,
                    route,
                  ],
                  {#transitionType: transitionType},
                ),
              ),
              (T v) => _i22.Future<T>.value(v),
            ) ??
            _FakeFuture_20<T>(
              this,
              Invocation.method(
                #replaceRoute,
                [
                  context,
                  route,
                ],
                {#transitionType: transitionType},
              ),
            ),
        returnValueForMissingStub: _i77.ifNotNull(
              _i77.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #replaceRoute,
                  [
                    context,
                    route,
                  ],
                  {#transitionType: transitionType},
                ),
              ),
              (T v) => _i22.Future<T>.value(v),
            ) ??
            _FakeFuture_20<T>(
              this,
              Invocation.method(
                #replaceRoute,
                [
                  context,
                  route,
                ],
                {#transitionType: transitionType},
              ),
            ),
      ) as _i22.Future<T>);
  @override
  _i22.Future<T> pushRouteAndClearStack<T extends Object>(
    _i40.BuildContext? context,
    String? route, {
    _i93.TransitionType? transitionType = _i93.TransitionType.material,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pushRouteAndClearStack,
          [
            context,
            route,
          ],
          {#transitionType: transitionType},
        ),
        returnValue: _i77.ifNotNull(
              _i77.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #pushRouteAndClearStack,
                  [
                    context,
                    route,
                  ],
                  {#transitionType: transitionType},
                ),
              ),
              (T v) => _i22.Future<T>.value(v),
            ) ??
            _FakeFuture_20<T>(
              this,
              Invocation.method(
                #pushRouteAndClearStack,
                [
                  context,
                  route,
                ],
                {#transitionType: transitionType},
              ),
            ),
        returnValueForMissingStub: _i77.ifNotNull(
              _i77.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #pushRouteAndClearStack,
                  [
                    context,
                    route,
                  ],
                  {#transitionType: transitionType},
                ),
              ),
              (T v) => _i22.Future<T>.value(v),
            ) ??
            _FakeFuture_20<T>(
              this,
              Invocation.method(
                #pushRouteAndClearStack,
                [
                  context,
                  route,
                ],
                {#transitionType: transitionType},
              ),
            ),
      ) as _i22.Future<T>);
  @override
  _i22.Future<dynamic> pushRouteWithCustomTransition<T extends Object>(
    _i40.BuildContext? context,
    String? route,
    bool? clearStack,
    Duration? transitionDuration,
    _i40.RouteTransitionsBuilder? transitionsBuilder, {
    _i93.TransitionType? transitionType = _i93.TransitionType.custom,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pushRouteWithCustomTransition,
          [
            context,
            route,
            clearStack,
            transitionDuration,
            transitionsBuilder,
          ],
          {#transitionType: transitionType},
        ),
        returnValue: _i22.Future<dynamic>.value(),
        returnValueForMissingStub: _i22.Future<dynamic>.value(),
      ) as _i22.Future<dynamic>);
  @override
  _i22.Future<void> routeInternally(
    _i40.BuildContext? context,
    String? url,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #routeInternally,
          [
            context,
            url,
          ],
        ),
        returnValue: _i22.Future<void>.value(),
        returnValueForMissingStub: _i22.Future<void>.value(),
      ) as _i22.Future<void>);
  @override
  _i22.Future<T> showDialog<T>({
    required _i40.BuildContext? context,
    bool? barrierDismissible = true,
    required _i40.WidgetBuilder? builder,
    bool? useRootNavigator = true,
    _i40.RouteSettings? routeSettings,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showDialog,
          [],
          {
            #context: context,
            #barrierDismissible: barrierDismissible,
            #builder: builder,
            #useRootNavigator: useRootNavigator,
            #routeSettings: routeSettings,
          },
        ),
        returnValue: _i77.ifNotNull(
              _i77.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #showDialog,
                  [],
                  {
                    #context: context,
                    #barrierDismissible: barrierDismissible,
                    #builder: builder,
                    #useRootNavigator: useRootNavigator,
                    #routeSettings: routeSettings,
                  },
                ),
              ),
              (T v) => _i22.Future<T>.value(v),
            ) ??
            _FakeFuture_20<T>(
              this,
              Invocation.method(
                #showDialog,
                [],
                {
                  #context: context,
                  #barrierDismissible: barrierDismissible,
                  #builder: builder,
                  #useRootNavigator: useRootNavigator,
                  #routeSettings: routeSettings,
                },
              ),
            ),
        returnValueForMissingStub: _i77.ifNotNull(
              _i77.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #showDialog,
                  [],
                  {
                    #context: context,
                    #barrierDismissible: barrierDismissible,
                    #builder: builder,
                    #useRootNavigator: useRootNavigator,
                    #routeSettings: routeSettings,
                  },
                ),
              ),
              (T v) => _i22.Future<T>.value(v),
            ) ??
            _FakeFuture_20<T>(
              this,
              Invocation.method(
                #showDialog,
                [],
                {
                  #context: context,
                  #barrierDismissible: barrierDismissible,
                  #builder: builder,
                  #useRootNavigator: useRootNavigator,
                  #routeSettings: routeSettings,
                },
              ),
            ),
      ) as _i22.Future<T>);
}

/// A class which mocks [ReminderDb].
///
/// See the documentation for Mockito's code generation for more information.
class MockReminderDb extends _i1.Mock implements _i94.ReminderDb {
  @override
  _i11.Database get db => (super.noSuchMethod(
        Invocation.getter(#db),
        returnValue: _FakeDatabase_9(
          this,
          Invocation.getter(#db),
        ),
        returnValueForMissingStub: _FakeDatabase_9(
          this,
          Invocation.getter(#db),
        ),
      ) as _i11.Database);
  @override
  set db(_i11.Database? _db) => super.noSuchMethod(
        Invocation.setter(
          #db,
          _db,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i22.Future<_i60.Reminder?> insert(_i60.Reminder? data) =>
      (super.noSuchMethod(
        Invocation.method(
          #insert,
          [data],
        ),
        returnValue: _i22.Future<_i60.Reminder?>.value(),
        returnValueForMissingStub: _i22.Future<_i60.Reminder?>.value(),
      ) as _i22.Future<_i60.Reminder?>);
  @override
  _i22.Future<_i60.Reminder?> getById(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getById,
          [id],
        ),
        returnValue: _i22.Future<_i60.Reminder?>.value(),
        returnValueForMissingStub: _i22.Future<_i60.Reminder?>.value(),
      ) as _i22.Future<_i60.Reminder?>);
  @override
  _i22.Future<_i60.Reminder?> getByItem(
    String? userDomain,
    String? userId,
    String? type,
    String? itemId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getByItem,
          [
            userDomain,
            userId,
            type,
            itemId,
          ],
        ),
        returnValue: _i22.Future<_i60.Reminder?>.value(),
        returnValueForMissingStub: _i22.Future<_i60.Reminder?>.value(),
      ) as _i22.Future<_i60.Reminder?>);
  @override
  _i22.Future<int> deleteById(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteById,
          [id],
        ),
        returnValue: _i22.Future<int>.value(0),
        returnValueForMissingStub: _i22.Future<int>.value(0),
      ) as _i22.Future<int>);
  @override
  _i22.Future<int> deleteAllForUser(
    String? userDomain,
    String? userId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteAllForUser,
          [
            userDomain,
            userId,
          ],
        ),
        returnValue: _i22.Future<int>.value(0),
        returnValueForMissingStub: _i22.Future<int>.value(0),
      ) as _i22.Future<int>);
}

/// A class which mocks [FirebaseRemoteConfig].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseRemoteConfig extends _i1.Mock
    implements _i95.FirebaseRemoteConfig {
  @override
  _i24.FirebaseApp get app => (super.noSuchMethod(
        Invocation.getter(#app),
        returnValue: _FakeFirebaseApp_28(
          this,
          Invocation.getter(#app),
        ),
        returnValueForMissingStub: _FakeFirebaseApp_28(
          this,
          Invocation.getter(#app),
        ),
      ) as _i24.FirebaseApp);
  @override
  DateTime get lastFetchTime => (super.noSuchMethod(
        Invocation.getter(#lastFetchTime),
        returnValue: _FakeDateTime_40(
          this,
          Invocation.getter(#lastFetchTime),
        ),
        returnValueForMissingStub: _FakeDateTime_40(
          this,
          Invocation.getter(#lastFetchTime),
        ),
      ) as DateTime);
  @override
  _i31.RemoteConfigFetchStatus get lastFetchStatus => (super.noSuchMethod(
        Invocation.getter(#lastFetchStatus),
        returnValue: _i31.RemoteConfigFetchStatus.noFetchYet,
        returnValueForMissingStub: _i31.RemoteConfigFetchStatus.noFetchYet,
      ) as _i31.RemoteConfigFetchStatus);
  @override
  _i31.RemoteConfigSettings get settings => (super.noSuchMethod(
        Invocation.getter(#settings),
        returnValue: _FakeRemoteConfigSettings_41(
          this,
          Invocation.getter(#settings),
        ),
        returnValueForMissingStub: _FakeRemoteConfigSettings_41(
          this,
          Invocation.getter(#settings),
        ),
      ) as _i31.RemoteConfigSettings);
  @override
  _i22.Stream<_i31.RemoteConfigUpdate> get onConfigUpdated =>
      (super.noSuchMethod(
        Invocation.getter(#onConfigUpdated),
        returnValue: _i22.Stream<_i31.RemoteConfigUpdate>.empty(),
        returnValueForMissingStub: _i22.Stream<_i31.RemoteConfigUpdate>.empty(),
      ) as _i22.Stream<_i31.RemoteConfigUpdate>);
  @override
  Map<dynamic, dynamic> get pluginConstants => (super.noSuchMethod(
        Invocation.getter(#pluginConstants),
        returnValue: <dynamic, dynamic>{},
        returnValueForMissingStub: <dynamic, dynamic>{},
      ) as Map<dynamic, dynamic>);
  @override
  _i22.Future<bool> activate() => (super.noSuchMethod(
        Invocation.method(
          #activate,
          [],
        ),
        returnValue: _i22.Future<bool>.value(false),
        returnValueForMissingStub: _i22.Future<bool>.value(false),
      ) as _i22.Future<bool>);
  @override
  _i22.Future<void> ensureInitialized() => (super.noSuchMethod(
        Invocation.method(
          #ensureInitialized,
          [],
        ),
        returnValue: _i22.Future<void>.value(),
        returnValueForMissingStub: _i22.Future<void>.value(),
      ) as _i22.Future<void>);
  @override
  _i22.Future<void> fetch() => (super.noSuchMethod(
        Invocation.method(
          #fetch,
          [],
        ),
        returnValue: _i22.Future<void>.value(),
        returnValueForMissingStub: _i22.Future<void>.value(),
      ) as _i22.Future<void>);
  @override
  _i22.Future<bool> fetchAndActivate() => (super.noSuchMethod(
        Invocation.method(
          #fetchAndActivate,
          [],
        ),
        returnValue: _i22.Future<bool>.value(false),
        returnValueForMissingStub: _i22.Future<bool>.value(false),
      ) as _i22.Future<bool>);
  @override
  Map<String, _i31.RemoteConfigValue> getAll() => (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
        ),
        returnValue: <String, _i31.RemoteConfigValue>{},
        returnValueForMissingStub: <String, _i31.RemoteConfigValue>{},
      ) as Map<String, _i31.RemoteConfigValue>);
  @override
  bool getBool(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getBool,
          [key],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  int getInt(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getInt,
          [key],
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  double getDouble(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getDouble,
          [key],
        ),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
  @override
  String getString(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getString,
          [key],
        ),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  _i31.RemoteConfigValue getValue(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getValue,
          [key],
        ),
        returnValue: _FakeRemoteConfigValue_42(
          this,
          Invocation.method(
            #getValue,
            [key],
          ),
        ),
        returnValueForMissingStub: _FakeRemoteConfigValue_42(
          this,
          Invocation.method(
            #getValue,
            [key],
          ),
        ),
      ) as _i31.RemoteConfigValue);
  @override
  _i22.Future<void> setConfigSettings(
          _i31.RemoteConfigSettings? remoteConfigSettings) =>
      (super.noSuchMethod(
        Invocation.method(
          #setConfigSettings,
          [remoteConfigSettings],
        ),
        returnValue: _i22.Future<void>.value(),
        returnValueForMissingStub: _i22.Future<void>.value(),
      ) as _i22.Future<void>);
  @override
  _i22.Future<void> setDefaults(Map<String, dynamic>? defaultParameters) =>
      (super.noSuchMethod(
        Invocation.method(
          #setDefaults,
          [defaultParameters],
        ),
        returnValue: _i22.Future<void>.value(),
        returnValueForMissingStub: _i22.Future<void>.value(),
      ) as _i22.Future<void>);
}

/// A class which mocks [FlutterSnackbarVeneer].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlutterSnackbarVeneer extends _i1.Mock
    implements _i96.FlutterSnackbarVeneer {
  @override
  dynamic showSnackBar(
    dynamic context,
    String? message,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #showSnackBar,
          [
            context,
            message,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [StudentAddedNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockStudentAddedNotifier extends _i1.Mock
    implements _i91.StudentAddedNotifier {
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void notify() => super.noSuchMethod(
        Invocation.method(
          #notify,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addListener(_i57.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(_i57.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [UrlLauncher].
///
/// See the documentation for Mockito's code generation for more information.
class MockUrlLauncher extends _i1.Mock implements _i97.UrlLauncher {
  @override
  _i32.MethodChannel get channel => (super.noSuchMethod(
        Invocation.getter(#channel),
        returnValue: _FakeMethodChannel_43(
          this,
          Invocation.getter(#channel),
        ),
        returnValueForMissingStub: _FakeMethodChannel_43(
          this,
          Invocation.getter(#channel),
        ),
      ) as _i32.MethodChannel);
  @override
  set channel(_i32.MethodChannel? _channel) => super.noSuchMethod(
        Invocation.setter(
          #channel,
          _channel,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i22.Future<bool?> canLaunch(
    String? url, {
    bool? excludeInstructure = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #canLaunch,
          [url],
          {#excludeInstructure: excludeInstructure},
        ),
        returnValue: _i22.Future<bool?>.value(),
        returnValueForMissingStub: _i22.Future<bool?>.value(),
      ) as _i22.Future<bool?>);
  @override
  _i22.Future<void> launch(
    String? url, {
    bool? excludeInstructure = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #launch,
          [url],
          {#excludeInstructure: excludeInstructure},
        ),
        returnValue: _i22.Future<void>.value(),
        returnValueForMissingStub: _i22.Future<void>.value(),
      ) as _i22.Future<void>);
  @override
  _i22.Future<void> launchAppStore() => (super.noSuchMethod(
        Invocation.method(
          #launchAppStore,
          [],
        ),
        returnValue: _i22.Future<void>.value(),
        returnValueForMissingStub: _i22.Future<void>.value(),
      ) as _i22.Future<void>);
}

/// A class which mocks [UserColorsDb].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserColorsDb extends _i1.Mock implements _i98.UserColorsDb {
  @override
  _i11.Database get db => (super.noSuchMethod(
        Invocation.getter(#db),
        returnValue: _FakeDatabase_9(
          this,
          Invocation.getter(#db),
        ),
        returnValueForMissingStub: _FakeDatabase_9(
          this,
          Invocation.getter(#db),
        ),
      ) as _i11.Database);
  @override
  set db(_i11.Database? _db) => super.noSuchMethod(
        Invocation.setter(
          #db,
          _db,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i22.Future<_i99.UserColor?> getById(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getById,
          [id],
        ),
        returnValue: _i22.Future<_i99.UserColor?>.value(),
        returnValueForMissingStub: _i22.Future<_i99.UserColor?>.value(),
      ) as _i22.Future<_i99.UserColor?>);
  @override
  _i22.Future<void> insertOrUpdateAll(
    String? domain,
    String? userId,
    _i44.UserColors? colors,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertOrUpdateAll,
          [
            domain,
            userId,
            colors,
          ],
        ),
        returnValue: _i22.Future<void>.value(),
        returnValueForMissingStub: _i22.Future<void>.value(),
      ) as _i22.Future<void>);
  @override
  _i22.Future<_i99.UserColor?> insertOrUpdate(_i99.UserColor? data) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertOrUpdate,
          [data],
        ),
        returnValue: _i22.Future<_i99.UserColor?>.value(),
        returnValueForMissingStub: _i22.Future<_i99.UserColor?>.value(),
      ) as _i22.Future<_i99.UserColor?>);
  @override
  _i22.Future<_i99.UserColor?> getByContext(
    String? userDomain,
    String? userId,
    String? canvasContext,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getByContext,
          [
            userDomain,
            userId,
            canvasContext,
          ],
        ),
        returnValue: _i22.Future<_i99.UserColor?>.value(),
        returnValueForMissingStub: _i22.Future<_i99.UserColor?>.value(),
      ) as _i22.Future<_i99.UserColor?>);
  @override
  _i22.Future<int> deleteById(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteById,
          [id],
        ),
        returnValue: _i22.Future<int>.value(0),
        returnValueForMissingStub: _i22.Future<int>.value(0),
      ) as _i22.Future<int>);
  @override
  _i22.Future<int> deleteAllForUser(
    String? userDomain,
    String? userId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteAllForUser,
          [
            userDomain,
            userId,
          ],
        ),
        returnValue: _i22.Future<int>.value(0),
        returnValueForMissingStub: _i22.Future<int>.value(0),
      ) as _i22.Future<int>);
}

/// A class which mocks [WebLoginInteractor].
///
/// See the documentation for Mockito's code generation for more information.
class MockWebLoginInteractor extends _i1.Mock
    implements _i100.WebLoginInteractor {
  @override
  _i22.Future<_i9.MobileVerifyResult> mobileVerify(String? domain) =>
      (super.noSuchMethod(
        Invocation.method(
          #mobileVerify,
          [domain],
        ),
        returnValue:
            _i22.Future<_i9.MobileVerifyResult>.value(_FakeMobileVerifyResult_7(
          this,
          Invocation.method(
            #mobileVerify,
            [domain],
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i9.MobileVerifyResult>.value(_FakeMobileVerifyResult_7(
          this,
          Invocation.method(
            #mobileVerify,
            [domain],
          ),
        )),
      ) as _i22.Future<_i9.MobileVerifyResult>);
  @override
  _i22.Future<dynamic> performLogin(
    _i9.MobileVerifyResult? result,
    String? oAuthRequest,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #performLogin,
          [
            result,
            oAuthRequest,
          ],
        ),
        returnValue: _i22.Future<dynamic>.value(),
        returnValueForMissingStub: _i22.Future<dynamic>.value(),
      ) as _i22.Future<dynamic>);
}

/// A class which mocks [WebContentInteractor].
///
/// See the documentation for Mockito's code generation for more information.
class MockWebContentInteractor extends _i1.Mock
    implements _i101.WebContentInteractor {
  @override
  _i22.Future<String> getAuthUrl(String? targetUrl) => (super.noSuchMethod(
        Invocation.method(
          #getAuthUrl,
          [targetUrl],
        ),
        returnValue: _i22.Future<String>.value(''),
        returnValueForMissingStub: _i22.Future<String>.value(''),
      ) as _i22.Future<String>);
  @override
  _i22.Future<String?> authContent(
    String? content,
    String? externalToolButtonText,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #authContent,
          [
            content,
            externalToolButtonText,
          ],
        ),
        returnValue: _i22.Future<String?>.value(),
        returnValueForMissingStub: _i22.Future<String?>.value(),
      ) as _i22.Future<String?>);
  @override
  _i33.JavascriptChannel ltiToolPressedChannel(
          _i33.JavascriptMessageHandler? handler) =>
      (super.noSuchMethod(
        Invocation.method(
          #ltiToolPressedChannel,
          [handler],
        ),
        returnValue: _FakeJavascriptChannel_44(
          this,
          Invocation.method(
            #ltiToolPressedChannel,
            [handler],
          ),
        ),
        returnValueForMissingStub: _FakeJavascriptChannel_44(
          this,
          Invocation.method(
            #ltiToolPressedChannel,
            [handler],
          ),
        ),
      ) as _i33.JavascriptChannel);
}

/// A class which mocks [AlertThresholdsInteractor].
///
/// See the documentation for Mockito's code generation for more information.
class MockAlertThresholdsInteractor extends _i1.Mock
    implements _i102.AlertThresholdsInteractor {
  @override
  _i22.Future<List<_i56.AlertThreshold>> getAlertThresholdsForStudent(
    String? studentId, {
    bool? forceRefresh = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAlertThresholdsForStudent,
          [studentId],
          {#forceRefresh: forceRefresh},
        ),
        returnValue: _i22.Future<List<_i56.AlertThreshold>>.value(
            <_i56.AlertThreshold>[]),
        returnValueForMissingStub: _i22.Future<List<_i56.AlertThreshold>>.value(
            <_i56.AlertThreshold>[]),
      ) as _i22.Future<List<_i56.AlertThreshold>>);
  @override
  _i22.Future<_i56.AlertThreshold?> updateAlertThreshold(
    _i35.AlertType? type,
    String? studentId,
    _i56.AlertThreshold? threshold, {
    String? value,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateAlertThreshold,
          [
            type,
            studentId,
            threshold,
          ],
          {#value: value},
        ),
        returnValue: _i22.Future<_i56.AlertThreshold?>.value(),
        returnValueForMissingStub: _i22.Future<_i56.AlertThreshold?>.value(),
      ) as _i22.Future<_i56.AlertThreshold?>);
  @override
  _i22.Future<bool> deleteStudent(String? studentId) => (super.noSuchMethod(
        Invocation.method(
          #deleteStudent,
          [studentId],
        ),
        returnValue: _i22.Future<bool>.value(false),
        returnValueForMissingStub: _i22.Future<bool>.value(false),
      ) as _i22.Future<bool>);
  @override
  _i22.Future<bool> canDeleteStudent(String? studentId) => (super.noSuchMethod(
        Invocation.method(
          #canDeleteStudent,
          [studentId],
        ),
        returnValue: _i22.Future<bool>.value(false),
        returnValueForMissingStub: _i22.Future<bool>.value(false),
      ) as _i22.Future<bool>);
}

/// A class which mocks [AlertsInteractor].
///
/// See the documentation for Mockito's code generation for more information.
class MockAlertsInteractor extends _i1.Mock implements _i34.AlertsInteractor {
  @override
  _i22.Future<_i34.AlertsList> getAlertsForStudent(
    String? studentId,
    bool? forceRefresh,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAlertsForStudent,
          [
            studentId,
            forceRefresh,
          ],
        ),
        returnValue: _i22.Future<_i34.AlertsList>.value(_FakeAlertsList_45(
          this,
          Invocation.method(
            #getAlertsForStudent,
            [
              studentId,
              forceRefresh,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i34.AlertsList>.value(_FakeAlertsList_45(
          this,
          Invocation.method(
            #getAlertsForStudent,
            [
              studentId,
              forceRefresh,
            ],
          ),
        )),
      ) as _i22.Future<_i34.AlertsList>);
  @override
  _i22.Future<_i35.Alert> markAlertRead(
    String? studentId,
    String? alertId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #markAlertRead,
          [
            studentId,
            alertId,
          ],
        ),
        returnValue: _i22.Future<_i35.Alert>.value(_FakeAlert_46(
          this,
          Invocation.method(
            #markAlertRead,
            [
              studentId,
              alertId,
            ],
          ),
        )),
        returnValueForMissingStub: _i22.Future<_i35.Alert>.value(_FakeAlert_46(
          this,
          Invocation.method(
            #markAlertRead,
            [
              studentId,
              alertId,
            ],
          ),
        )),
      ) as _i22.Future<_i35.Alert>);
  @override
  _i22.Future<dynamic> markAlertDismissed(
    String? studentId,
    String? alertId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #markAlertDismissed,
          [
            studentId,
            alertId,
          ],
        ),
        returnValue: _i22.Future<dynamic>.value(),
        returnValueForMissingStub: _i22.Future<dynamic>.value(),
      ) as _i22.Future<dynamic>);
}

/// A class which mocks [AnnouncementDetailsInteractor].
///
/// See the documentation for Mockito's code generation for more information.
class MockAnnouncementDetailsInteractor extends _i1.Mock
    implements _i103.AnnouncementDetailsInteractor {
  @override
  _i22.Future<_i36.AnnouncementViewState> getAnnouncement(
    String? announcementId,
    _i104.AnnouncementType? type,
    String? courseId,
    String? institutionToolbarTitle,
    bool? forceRefresh,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAnnouncement,
          [
            announcementId,
            type,
            courseId,
            institutionToolbarTitle,
            forceRefresh,
          ],
        ),
        returnValue: _i22.Future<_i36.AnnouncementViewState>.value(
            _FakeAnnouncementViewState_47(
          this,
          Invocation.method(
            #getAnnouncement,
            [
              announcementId,
              type,
              courseId,
              institutionToolbarTitle,
              forceRefresh,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i36.AnnouncementViewState>.value(
                _FakeAnnouncementViewState_47(
          this,
          Invocation.method(
            #getAnnouncement,
            [
              announcementId,
              type,
              courseId,
              institutionToolbarTitle,
              forceRefresh,
            ],
          ),
        )),
      ) as _i22.Future<_i36.AnnouncementViewState>);
  @override
  void viewAttachment(
    _i40.BuildContext? context,
    _i39.Attachment? attachment,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #viewAttachment,
          [
            context,
            attachment,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [AnnouncementApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockAnnouncementApi extends _i1.Mock implements _i105.AnnouncementApi {
  @override
  _i22.Future<_i37.Announcement> getCourseAnnouncement(
    String? courseId,
    String? announcementId,
    bool? forceRefresh,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCourseAnnouncement,
          [
            courseId,
            announcementId,
            forceRefresh,
          ],
        ),
        returnValue: _i22.Future<_i37.Announcement>.value(_FakeAnnouncement_48(
          this,
          Invocation.method(
            #getCourseAnnouncement,
            [
              courseId,
              announcementId,
              forceRefresh,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i37.Announcement>.value(_FakeAnnouncement_48(
          this,
          Invocation.method(
            #getCourseAnnouncement,
            [
              courseId,
              announcementId,
              forceRefresh,
            ],
          ),
        )),
      ) as _i22.Future<_i37.Announcement>);
  @override
  _i22.Future<_i38.AccountNotification> getAccountNotification(
    String? accountNotificationId,
    bool? forceRefresh,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAccountNotification,
          [
            accountNotificationId,
            forceRefresh,
          ],
        ),
        returnValue: _i22.Future<_i38.AccountNotification>.value(
            _FakeAccountNotification_49(
          this,
          Invocation.method(
            #getAccountNotification,
            [
              accountNotificationId,
              forceRefresh,
            ],
          ),
        )),
        returnValueForMissingStub: _i22.Future<_i38.AccountNotification>.value(
            _FakeAccountNotification_49(
          this,
          Invocation.method(
            #getAccountNotification,
            [
              accountNotificationId,
              forceRefresh,
            ],
          ),
        )),
      ) as _i22.Future<_i38.AccountNotification>);
}

/// A class which mocks [AcceptableUsePolicyInteractor].
///
/// See the documentation for Mockito's code generation for more information.
class MockAcceptableUsePolicyInteractor extends _i1.Mock
    implements _i106.AcceptableUsePolicyInteractor {
  @override
  _i22.Future<_i2.TermsOfService> getTermsOfService() => (super.noSuchMethod(
        Invocation.method(
          #getTermsOfService,
          [],
        ),
        returnValue:
            _i22.Future<_i2.TermsOfService>.value(_FakeTermsOfService_0(
          this,
          Invocation.method(
            #getTermsOfService,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i2.TermsOfService>.value(_FakeTermsOfService_0(
          this,
          Invocation.method(
            #getTermsOfService,
            [],
          ),
        )),
      ) as _i22.Future<_i2.TermsOfService>);
  @override
  _i22.Future<_i17.User> acceptTermsOfUse() => (super.noSuchMethod(
        Invocation.method(
          #acceptTermsOfUse,
          [],
        ),
        returnValue: _i22.Future<_i17.User>.value(_FakeUser_15(
          this,
          Invocation.method(
            #acceptTermsOfUse,
            [],
          ),
        )),
        returnValueForMissingStub: _i22.Future<_i17.User>.value(_FakeUser_15(
          this,
          Invocation.method(
            #acceptTermsOfUse,
            [],
          ),
        )),
      ) as _i22.Future<_i17.User>);
}

/// A class which mocks [PlannerApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockPlannerApi extends _i1.Mock implements _i107.PlannerApi {
  @override
  _i22.Future<List<_i108.PlannerItem>> getUserPlannerItems(
    String? userId,
    DateTime? startDay,
    DateTime? endDay, {
    Set<String>? contexts = const {},
    bool? forceRefresh = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserPlannerItems,
          [
            userId,
            startDay,
            endDay,
          ],
          {
            #contexts: contexts,
            #forceRefresh: forceRefresh,
          },
        ),
        returnValue:
            _i22.Future<List<_i108.PlannerItem>>.value(<_i108.PlannerItem>[]),
        returnValueForMissingStub:
            _i22.Future<List<_i108.PlannerItem>>.value(<_i108.PlannerItem>[]),
      ) as _i22.Future<List<_i108.PlannerItem>>);
}

/// A class which mocks [HelpScreenInteractor].
///
/// See the documentation for Mockito's code generation for more information.
class MockHelpScreenInteractor extends _i1.Mock
    implements _i109.HelpScreenInteractor {
  @override
  _i22.Future<List<_i110.HelpLink>> getObserverCustomHelpLinks(
          {bool? forceRefresh = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getObserverCustomHelpLinks,
          [],
          {#forceRefresh: forceRefresh},
        ),
        returnValue:
            _i22.Future<List<_i110.HelpLink>>.value(<_i110.HelpLink>[]),
        returnValueForMissingStub:
            _i22.Future<List<_i110.HelpLink>>.value(<_i110.HelpLink>[]),
      ) as _i22.Future<List<_i110.HelpLink>>);
  @override
  bool containsObserverLinks(_i111.BuiltList<_i110.HelpLink>? links) =>
      (super.noSuchMethod(
        Invocation.method(
          #containsObserverLinks,
          [links],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  List<_i110.HelpLink> filterObserverLinks(
          _i111.BuiltList<_i110.HelpLink>? list) =>
      (super.noSuchMethod(
        Invocation.method(
          #filterObserverLinks,
          [list],
        ),
        returnValue: <_i110.HelpLink>[],
        returnValueForMissingStub: <_i110.HelpLink>[],
      ) as List<_i110.HelpLink>);
}

/// A class which mocks [FileApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockFileApi extends _i1.Mock implements _i112.FileApi {
  @override
  _i22.Future<_i39.Attachment> uploadConversationFile(
    _i25.File? file,
    _i4.ProgressCallback? progressCallback,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadConversationFile,
          [
            file,
            progressCallback,
          ],
        ),
        returnValue: _i22.Future<_i39.Attachment>.value(_FakeAttachment_50(
          this,
          Invocation.method(
            #uploadConversationFile,
            [
              file,
              progressCallback,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i39.Attachment>.value(_FakeAttachment_50(
          this,
          Invocation.method(
            #uploadConversationFile,
            [
              file,
              progressCallback,
            ],
          ),
        )),
      ) as _i22.Future<_i39.Attachment>);
  @override
  _i22.Future<_i25.File> downloadFile(
    String? url,
    String? savePath, {
    _i4.CancelToken? cancelToken,
    _i4.ProgressCallback? onProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #downloadFile,
          [
            url,
            savePath,
          ],
          {
            #cancelToken: cancelToken,
            #onProgress: onProgress,
          },
        ),
        returnValue: _i22.Future<_i25.File>.value(_FakeFile_51(
          this,
          Invocation.method(
            #downloadFile,
            [
              url,
              savePath,
            ],
            {
              #cancelToken: cancelToken,
              #onProgress: onProgress,
            },
          ),
        )),
        returnValueForMissingStub: _i22.Future<_i25.File>.value(_FakeFile_51(
          this,
          Invocation.method(
            #downloadFile,
            [
              url,
              savePath,
            ],
            {
              #cancelToken: cancelToken,
              #onProgress: onProgress,
            },
          ),
        )),
      ) as _i22.Future<_i25.File>);
  @override
  _i22.Future<void> deleteFile(String? fileId) => (super.noSuchMethod(
        Invocation.method(
          #deleteFile,
          [fileId],
        ),
        returnValue: _i22.Future<void>.value(),
        returnValueForMissingStub: _i22.Future<void>.value(),
      ) as _i22.Future<void>);
}

/// A class which mocks [PathProviderVeneer].
///
/// See the documentation for Mockito's code generation for more information.
class MockPathProviderVeneer extends _i1.Mock
    implements _i113.PathProviderVeneer {
  @override
  _i22.Future<_i25.Directory> getTemporaryDirectory() => (super.noSuchMethod(
        Invocation.method(
          #getTemporaryDirectory,
          [],
        ),
        returnValue: _i22.Future<_i25.Directory>.value(_FakeDirectory_52(
          this,
          Invocation.method(
            #getTemporaryDirectory,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i25.Directory>.value(_FakeDirectory_52(
          this,
          Invocation.method(
            #getTemporaryDirectory,
            [],
          ),
        )),
      ) as _i22.Future<_i25.Directory>);
  @override
  _i22.Future<_i25.Directory> getApplicationSupportDirectory() =>
      (super.noSuchMethod(
        Invocation.method(
          #getApplicationSupportDirectory,
          [],
        ),
        returnValue: _i22.Future<_i25.Directory>.value(_FakeDirectory_52(
          this,
          Invocation.method(
            #getApplicationSupportDirectory,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i25.Directory>.value(_FakeDirectory_52(
          this,
          Invocation.method(
            #getApplicationSupportDirectory,
            [],
          ),
        )),
      ) as _i22.Future<_i25.Directory>);
  @override
  _i22.Future<_i25.Directory> getLibraryDirectory() => (super.noSuchMethod(
        Invocation.method(
          #getLibraryDirectory,
          [],
        ),
        returnValue: _i22.Future<_i25.Directory>.value(_FakeDirectory_52(
          this,
          Invocation.method(
            #getLibraryDirectory,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i25.Directory>.value(_FakeDirectory_52(
          this,
          Invocation.method(
            #getLibraryDirectory,
            [],
          ),
        )),
      ) as _i22.Future<_i25.Directory>);
  @override
  _i22.Future<_i25.Directory> getApplicationDocumentsDirectory() =>
      (super.noSuchMethod(
        Invocation.method(
          #getApplicationDocumentsDirectory,
          [],
        ),
        returnValue: _i22.Future<_i25.Directory>.value(_FakeDirectory_52(
          this,
          Invocation.method(
            #getApplicationDocumentsDirectory,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i25.Directory>.value(_FakeDirectory_52(
          this,
          Invocation.method(
            #getApplicationDocumentsDirectory,
            [],
          ),
        )),
      ) as _i22.Future<_i25.Directory>);
  @override
  _i22.Future<_i25.Directory?> getExternalStorageDirectory() =>
      (super.noSuchMethod(
        Invocation.method(
          #getExternalStorageDirectory,
          [],
        ),
        returnValue: _i22.Future<_i25.Directory?>.value(),
        returnValueForMissingStub: _i22.Future<_i25.Directory?>.value(),
      ) as _i22.Future<_i25.Directory?>);
  @override
  _i22.Future<List<_i25.Directory>?> getExternalCacheDirectories() =>
      (super.noSuchMethod(
        Invocation.method(
          #getExternalCacheDirectories,
          [],
        ),
        returnValue: _i22.Future<List<_i25.Directory>?>.value(),
        returnValueForMissingStub: _i22.Future<List<_i25.Directory>?>.value(),
      ) as _i22.Future<List<_i25.Directory>?>);
  @override
  _i22.Future<List<_i25.Directory>?> getExternalStorageDirectories(
          {_i114.StorageDirectory? type}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getExternalStorageDirectories,
          [],
          {#type: type},
        ),
        returnValue: _i22.Future<List<_i25.Directory>?>.value(),
        returnValueForMissingStub: _i22.Future<List<_i25.Directory>?>.value(),
      ) as _i22.Future<List<_i25.Directory>?>);
}

/// A class which mocks [InboxCountNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockInboxCountNotifier extends _i1.Mock
    implements _i41.InboxCountNotifier {
  @override
  int get value => (super.noSuchMethod(
        Invocation.getter(#value),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  set value(int? newValue) => super.noSuchMethod(
        Invocation.setter(
          #value,
          newValue,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void addListener(_i57.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(_i57.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [BuildContext].
///
/// See the documentation for Mockito's code generation for more information.
class MockBuildContext extends _i1.Mock implements _i40.BuildContext {
  @override
  _i40.Widget get widget => (super.noSuchMethod(
        Invocation.getter(#widget),
        returnValue: _FakeWidget_53(
          this,
          Invocation.getter(#widget),
        ),
        returnValueForMissingStub: _FakeWidget_53(
          this,
          Invocation.getter(#widget),
        ),
      ) as _i40.Widget);
  @override
  bool get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get debugDoingBuild => (super.noSuchMethod(
        Invocation.getter(#debugDoingBuild),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i40.InheritedWidget dependOnInheritedElement(
    _i40.InheritedElement? ancestor, {
    Object? aspect,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #dependOnInheritedElement,
          [ancestor],
          {#aspect: aspect},
        ),
        returnValue: _FakeInheritedWidget_54(
          this,
          Invocation.method(
            #dependOnInheritedElement,
            [ancestor],
            {#aspect: aspect},
          ),
        ),
        returnValueForMissingStub: _FakeInheritedWidget_54(
          this,
          Invocation.method(
            #dependOnInheritedElement,
            [ancestor],
            {#aspect: aspect},
          ),
        ),
      ) as _i40.InheritedWidget);
  @override
  void visitAncestorElements(_i40.ConditionalElementVisitor? visitor) =>
      super.noSuchMethod(
        Invocation.method(
          #visitAncestorElements,
          [visitor],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void visitChildElements(_i40.ElementVisitor? visitor) => super.noSuchMethod(
        Invocation.method(
          #visitChildElements,
          [visitor],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispatchNotification(_i40.Notification? notification) =>
      super.noSuchMethod(
        Invocation.method(
          #dispatchNotification,
          [notification],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i26.DiagnosticsNode describeElement(
    String? name, {
    _i26.DiagnosticsTreeStyle? style = _i26.DiagnosticsTreeStyle.errorProperty,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeElement,
          [name],
          {#style: style},
        ),
        returnValue: _FakeDiagnosticsNode_55(
          this,
          Invocation.method(
            #describeElement,
            [name],
            {#style: style},
          ),
        ),
        returnValueForMissingStub: _FakeDiagnosticsNode_55(
          this,
          Invocation.method(
            #describeElement,
            [name],
            {#style: style},
          ),
        ),
      ) as _i26.DiagnosticsNode);
  @override
  _i26.DiagnosticsNode describeWidget(
    String? name, {
    _i26.DiagnosticsTreeStyle? style = _i26.DiagnosticsTreeStyle.errorProperty,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeWidget,
          [name],
          {#style: style},
        ),
        returnValue: _FakeDiagnosticsNode_55(
          this,
          Invocation.method(
            #describeWidget,
            [name],
            {#style: style},
          ),
        ),
        returnValueForMissingStub: _FakeDiagnosticsNode_55(
          this,
          Invocation.method(
            #describeWidget,
            [name],
            {#style: style},
          ),
        ),
      ) as _i26.DiagnosticsNode);
  @override
  List<_i26.DiagnosticsNode> describeMissingAncestor(
          {required Type? expectedAncestorType}) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeMissingAncestor,
          [],
          {#expectedAncestorType: expectedAncestorType},
        ),
        returnValue: <_i26.DiagnosticsNode>[],
        returnValueForMissingStub: <_i26.DiagnosticsNode>[],
      ) as List<_i26.DiagnosticsNode>);
  @override
  _i26.DiagnosticsNode describeOwnershipChain(String? name) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeOwnershipChain,
          [name],
        ),
        returnValue: _FakeDiagnosticsNode_55(
          this,
          Invocation.method(
            #describeOwnershipChain,
            [name],
          ),
        ),
        returnValueForMissingStub: _FakeDiagnosticsNode_55(
          this,
          Invocation.method(
            #describeOwnershipChain,
            [name],
          ),
        ),
      ) as _i26.DiagnosticsNode);
}

/// A class which mocks [ConversationDetailsInteractor].
///
/// See the documentation for Mockito's code generation for more information.
class MockConversationDetailsInteractor extends _i1.Mock
    implements _i115.ConversationDetailsInteractor {
  @override
  _i22.Future<_i21.Conversation> getConversation(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getConversation,
          [id],
        ),
        returnValue: _i22.Future<_i21.Conversation>.value(_FakeConversation_19(
          this,
          Invocation.method(
            #getConversation,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i21.Conversation>.value(_FakeConversation_19(
          this,
          Invocation.method(
            #getConversation,
            [id],
          ),
        )),
      ) as _i22.Future<_i21.Conversation>);
  @override
  _i22.Future<_i21.Conversation?> addReply(
    _i40.BuildContext? context,
    _i21.Conversation? conversation,
    _i116.Message? message,
    bool? replyAll,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addReply,
          [
            context,
            conversation,
            message,
            replyAll,
          ],
        ),
        returnValue: _i22.Future<_i21.Conversation?>.value(),
        returnValueForMissingStub: _i22.Future<_i21.Conversation?>.value(),
      ) as _i22.Future<_i21.Conversation?>);
  @override
  _i22.Future<void> viewAttachment(
    _i40.BuildContext? context,
    _i39.Attachment? attachment,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #viewAttachment,
          [
            context,
            attachment,
          ],
        ),
        returnValue: _i22.Future<void>.value(),
        returnValueForMissingStub: _i22.Future<void>.value(),
      ) as _i22.Future<void>);
}

/// A class which mocks [ConversationListInteractor].
///
/// See the documentation for Mockito's code generation for more information.
class MockConversationListInteractor extends _i1.Mock
    implements _i117.ConversationListInteractor {
  @override
  _i22.Future<List<_i21.Conversation>> getConversations(
          {bool? forceRefresh = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getConversations,
          [],
          {#forceRefresh: forceRefresh},
        ),
        returnValue:
            _i22.Future<List<_i21.Conversation>>.value(<_i21.Conversation>[]),
        returnValueForMissingStub:
            _i22.Future<List<_i21.Conversation>>.value(<_i21.Conversation>[]),
      ) as _i22.Future<List<_i21.Conversation>>);
  @override
  _i22.Future<List<_i12.Course>> getCoursesForCompose() => (super.noSuchMethod(
        Invocation.method(
          #getCoursesForCompose,
          [],
        ),
        returnValue: _i22.Future<List<_i12.Course>>.value(<_i12.Course>[]),
        returnValueForMissingStub:
            _i22.Future<List<_i12.Course>>.value(<_i12.Course>[]),
      ) as _i22.Future<List<_i12.Course>>);
  @override
  _i22.Future<List<_i71.Enrollment>> getStudentEnrollments() =>
      (super.noSuchMethod(
        Invocation.method(
          #getStudentEnrollments,
          [],
        ),
        returnValue:
            _i22.Future<List<_i71.Enrollment>>.value(<_i71.Enrollment>[]),
        returnValueForMissingStub:
            _i22.Future<List<_i71.Enrollment>>.value(<_i71.Enrollment>[]),
      ) as _i22.Future<List<_i71.Enrollment>>);
  @override
  List<_i118.Tuple2<_i17.User, _i12.Course>> combineEnrollmentsAndCourses(
    List<_i12.Course>? courses,
    List<_i71.Enrollment>? enrollments,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #combineEnrollmentsAndCourses,
          [
            courses,
            enrollments,
          ],
        ),
        returnValue: <_i118.Tuple2<_i17.User, _i12.Course>>[],
        returnValueForMissingStub: <_i118.Tuple2<_i17.User, _i12.Course>>[],
      ) as List<_i118.Tuple2<_i17.User, _i12.Course>>);
}

/// A class which mocks [ConversationReplyInteractor].
///
/// See the documentation for Mockito's code generation for more information.
class MockConversationReplyInteractor extends _i1.Mock
    implements _i119.ConversationReplyInteractor {
  @override
  _i22.Future<_i21.Conversation> createReply(
    _i21.Conversation? conversation,
    _i116.Message? message,
    String? body,
    List<String>? attachmentIds,
    bool? replyAll,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createReply,
          [
            conversation,
            message,
            body,
            attachmentIds,
            replyAll,
          ],
        ),
        returnValue: _i22.Future<_i21.Conversation>.value(_FakeConversation_19(
          this,
          Invocation.method(
            #createReply,
            [
              conversation,
              message,
              body,
              attachmentIds,
              replyAll,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i21.Conversation>.value(_FakeConversation_19(
          this,
          Invocation.method(
            #createReply,
            [
              conversation,
              message,
              body,
              attachmentIds,
              replyAll,
            ],
          ),
        )),
      ) as _i22.Future<_i21.Conversation>);
  @override
  _i22.Future<_i76.AttachmentHandler?> addAttachment(
          _i40.BuildContext? context) =>
      (super.noSuchMethod(
        Invocation.method(
          #addAttachment,
          [context],
        ),
        returnValue: _i22.Future<_i76.AttachmentHandler?>.value(),
        returnValueForMissingStub: _i22.Future<_i76.AttachmentHandler?>.value(),
      ) as _i22.Future<_i76.AttachmentHandler?>);
  @override
  String getCurrentUserId() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentUserId,
          [],
        ),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
}

/// A class which mocks [DomainSearchInteractor].
///
/// See the documentation for Mockito's code generation for more information.
class MockDomainSearchInteractor extends _i1.Mock
    implements _i120.DomainSearchInteractor {
  @override
  _i22.Future<List<_i50.SchoolDomain>> performSearch(String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #performSearch,
          [query],
        ),
        returnValue:
            _i22.Future<List<_i50.SchoolDomain>>.value(<_i50.SchoolDomain>[]),
        returnValueForMissingStub:
            _i22.Future<List<_i50.SchoolDomain>>.value(<_i50.SchoolDomain>[]),
      ) as _i22.Future<List<_i50.SchoolDomain>>);
}

/// A class which mocks [DashboardInteractor].
///
/// See the documentation for Mockito's code generation for more information.
class MockDashboardInteractor extends _i1.Mock
    implements _i121.DashboardInteractor {
  @override
  _i22.Future<List<_i17.User>> getStudents({bool? forceRefresh = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getStudents,
          [],
          {#forceRefresh: forceRefresh},
        ),
        returnValue: _i22.Future<List<_i17.User>>.value(<_i17.User>[]),
        returnValueForMissingStub:
            _i22.Future<List<_i17.User>>.value(<_i17.User>[]),
      ) as _i22.Future<List<_i17.User>>);
  @override
  _i22.Future<_i17.User?> getSelf({dynamic app}) => (super.noSuchMethod(
        Invocation.method(
          #getSelf,
          [],
          {#app: app},
        ),
        returnValue: _i22.Future<_i17.User?>.value(),
        returnValueForMissingStub: _i22.Future<_i17.User?>.value(),
      ) as _i22.Future<_i17.User?>);
  @override
  List<_i17.User> filterStudents(List<_i71.Enrollment>? enrollments) =>
      (super.noSuchMethod(
        Invocation.method(
          #filterStudents,
          [enrollments],
        ),
        returnValue: <_i17.User>[],
        returnValueForMissingStub: <_i17.User>[],
      ) as List<_i17.User>);
  @override
  void sortUsers(List<_i17.User>? users) => super.noSuchMethod(
        Invocation.method(
          #sortUsers,
          [users],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i41.InboxCountNotifier getInboxCountNotifier() => (super.noSuchMethod(
        Invocation.method(
          #getInboxCountNotifier,
          [],
        ),
        returnValue: _FakeInboxCountNotifier_56(
          this,
          Invocation.method(
            #getInboxCountNotifier,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeInboxCountNotifier_56(
          this,
          Invocation.method(
            #getInboxCountNotifier,
            [],
          ),
        ),
      ) as _i41.InboxCountNotifier);
  @override
  _i42.AlertCountNotifier getAlertCountNotifier() => (super.noSuchMethod(
        Invocation.method(
          #getAlertCountNotifier,
          [],
        ),
        returnValue: _FakeAlertCountNotifier_57(
          this,
          Invocation.method(
            #getAlertCountNotifier,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeAlertCountNotifier_57(
          this,
          Invocation.method(
            #getAlertCountNotifier,
            [],
          ),
        ),
      ) as _i42.AlertCountNotifier);
  @override
  _i22.Future<bool> shouldShowOldReminderMessage() => (super.noSuchMethod(
        Invocation.method(
          #shouldShowOldReminderMessage,
          [],
        ),
        returnValue: _i22.Future<bool>.value(false),
        returnValueForMissingStub: _i22.Future<bool>.value(false),
      ) as _i22.Future<bool>);
}

/// A class which mocks [QRLoginTutorialScreenInteractor].
///
/// See the documentation for Mockito's code generation for more information.
class MockQRLoginTutorialScreenInteractor extends _i1.Mock
    implements _i43.QRLoginTutorialScreenInteractor {
  @override
  _i22.Future<_i43.BarcodeScanResult> scan() => (super.noSuchMethod(
        Invocation.method(
          #scan,
          [],
        ),
        returnValue:
            _i22.Future<_i43.BarcodeScanResult>.value(_FakeBarcodeScanResult_58(
          this,
          Invocation.method(
            #scan,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i43.BarcodeScanResult>.value(_FakeBarcodeScanResult_58(
          this,
          Invocation.method(
            #scan,
            [],
          ),
        )),
      ) as _i22.Future<_i43.BarcodeScanResult>);
}

/// A class which mocks [ManageStudentsInteractor].
///
/// See the documentation for Mockito's code generation for more information.
class MockManageStudentsInteractor extends _i1.Mock
    implements _i122.ManageStudentsInteractor {
  @override
  _i22.Future<List<_i17.User>> getStudents({bool? forceRefresh = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getStudents,
          [],
          {#forceRefresh: forceRefresh},
        ),
        returnValue: _i22.Future<List<_i17.User>>.value(<_i17.User>[]),
        returnValueForMissingStub:
            _i22.Future<List<_i17.User>>.value(<_i17.User>[]),
      ) as _i22.Future<List<_i17.User>>);
  @override
  List<_i17.User> filterStudents(List<_i71.Enrollment>? enrollments) =>
      (super.noSuchMethod(
        Invocation.method(
          #filterStudents,
          [enrollments],
        ),
        returnValue: <_i17.User>[],
        returnValueForMissingStub: <_i17.User>[],
      ) as List<_i17.User>);
  @override
  void sortUsers(List<_i17.User>? users) => super.noSuchMethod(
        Invocation.method(
          #sortUsers,
          [users],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [StudentColorPickerInteractor].
///
/// See the documentation for Mockito's code generation for more information.
class MockStudentColorPickerInteractor extends _i1.Mock
    implements _i123.StudentColorPickerInteractor {
  @override
  _i22.Future<void> save(
    String? studentId,
    _i57.Color? newColor,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #save,
          [
            studentId,
            newColor,
          ],
        ),
        returnValue: _i22.Future<void>.value(),
        returnValueForMissingStub: _i22.Future<void>.value(),
      ) as _i22.Future<void>);
}

/// A class which mocks [UserApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserApi extends _i1.Mock implements _i124.UserApi {
  @override
  _i22.Future<_i17.User> getSelf() => (super.noSuchMethod(
        Invocation.method(
          #getSelf,
          [],
        ),
        returnValue: _i22.Future<_i17.User>.value(_FakeUser_15(
          this,
          Invocation.method(
            #getSelf,
            [],
          ),
        )),
        returnValueForMissingStub: _i22.Future<_i17.User>.value(_FakeUser_15(
          this,
          Invocation.method(
            #getSelf,
            [],
          ),
        )),
      ) as _i22.Future<_i17.User>);
  @override
  _i22.Future<_i17.User> getUserForDomain(
    String? domain,
    String? userId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserForDomain,
          [
            domain,
            userId,
          ],
        ),
        returnValue: _i22.Future<_i17.User>.value(_FakeUser_15(
          this,
          Invocation.method(
            #getUserForDomain,
            [
              domain,
              userId,
            ],
          ),
        )),
        returnValueForMissingStub: _i22.Future<_i17.User>.value(_FakeUser_15(
          this,
          Invocation.method(
            #getUserForDomain,
            [
              domain,
              userId,
            ],
          ),
        )),
      ) as _i22.Future<_i17.User>);
  @override
  _i22.Future<_i17.UserPermission?> getSelfPermissions() => (super.noSuchMethod(
        Invocation.method(
          #getSelfPermissions,
          [],
        ),
        returnValue: _i22.Future<_i17.UserPermission?>.value(),
        returnValueForMissingStub: _i22.Future<_i17.UserPermission?>.value(),
      ) as _i22.Future<_i17.UserPermission?>);
  @override
  _i22.Future<_i44.UserColors> getUserColors({bool? refresh = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserColors,
          [],
          {#refresh: refresh},
        ),
        returnValue: _i22.Future<_i44.UserColors>.value(_FakeUserColors_59(
          this,
          Invocation.method(
            #getUserColors,
            [],
            {#refresh: refresh},
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i44.UserColors>.value(_FakeUserColors_59(
          this,
          Invocation.method(
            #getUserColors,
            [],
            {#refresh: refresh},
          ),
        )),
      ) as _i22.Future<_i44.UserColors>);
  @override
  _i22.Future<_i17.User> acceptUserTermsOfUse() => (super.noSuchMethod(
        Invocation.method(
          #acceptUserTermsOfUse,
          [],
        ),
        returnValue: _i22.Future<_i17.User>.value(_FakeUser_15(
          this,
          Invocation.method(
            #acceptUserTermsOfUse,
            [],
          ),
        )),
        returnValueForMissingStub: _i22.Future<_i17.User>.value(_FakeUser_15(
          this,
          Invocation.method(
            #acceptUserTermsOfUse,
            [],
          ),
        )),
      ) as _i22.Future<_i17.User>);
  @override
  _i22.Future<_i45.ColorChangeResponse> setUserColor(
    String? contextId,
    _i57.Color? color,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setUserColor,
          [
            contextId,
            color,
          ],
        ),
        returnValue: _i22.Future<_i45.ColorChangeResponse>.value(
            _FakeColorChangeResponse_60(
          this,
          Invocation.method(
            #setUserColor,
            [
              contextId,
              color,
            ],
          ),
        )),
        returnValueForMissingStub: _i22.Future<_i45.ColorChangeResponse>.value(
            _FakeColorChangeResponse_60(
          this,
          Invocation.method(
            #setUserColor,
            [
              contextId,
              color,
            ],
          ),
        )),
      ) as _i22.Future<_i45.ColorChangeResponse>);
}

/// A class which mocks [MasqueradeScreenInteractor].
///
/// See the documentation for Mockito's code generation for more information.
class MockMasqueradeScreenInteractor extends _i1.Mock
    implements _i125.MasqueradeScreenInteractor {
  @override
  _i22.Future<bool> startMasquerading(
    String? masqueradingUserId,
    String? masqueradingDomain,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #startMasquerading,
          [
            masqueradingUserId,
            masqueradingDomain,
          ],
        ),
        returnValue: _i22.Future<bool>.value(false),
        returnValueForMissingStub: _i22.Future<bool>.value(false),
      ) as _i22.Future<bool>);
  @override
  String sanitizeDomain(String? domain) => (super.noSuchMethod(
        Invocation.method(
          #sanitizeDomain,
          [domain],
        ),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
}

/// A class which mocks [SettingsInteractor].
///
/// See the documentation for Mockito's code generation for more information.
class MockSettingsInteractor extends _i1.Mock
    implements _i126.SettingsInteractor {
  @override
  bool isDebugMode() => (super.noSuchMethod(
        Invocation.method(
          #isDebugMode,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void routeToThemeViewer(_i40.BuildContext? context) => super.noSuchMethod(
        Invocation.method(
          #routeToThemeViewer,
          [context],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void routeToRemoteConfig(_i40.BuildContext? context) => super.noSuchMethod(
        Invocation.method(
          #routeToRemoteConfig,
          [context],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void toggleDarkMode(
    dynamic context,
    dynamic anchorKey,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #toggleDarkMode,
          [
            context,
            anchorKey,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void toggleHCMode(dynamic context) => super.noSuchMethod(
        Invocation.method(
          #toggleHCMode,
          [context],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void showAboutDialog(dynamic context) => super.noSuchMethod(
        Invocation.method(
          #showAboutDialog,
          [context],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [FeaturesApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockFeaturesApi extends _i1.Mock implements _i127.FeaturesApi {
  @override
  _i22.Future<_i46.FeatureFlags> getFeatureFlags() => (super.noSuchMethod(
        Invocation.method(
          #getFeatureFlags,
          [],
        ),
        returnValue: _i22.Future<_i46.FeatureFlags>.value(_FakeFeatureFlags_61(
          this,
          Invocation.method(
            #getFeatureFlags,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i46.FeatureFlags>.value(_FakeFeatureFlags_61(
          this,
          Invocation.method(
            #getFeatureFlags,
            [],
          ),
        )),
      ) as _i22.Future<_i46.FeatureFlags>);
}

/// A class which mocks [SplashScreenInteractor].
///
/// See the documentation for Mockito's code generation for more information.
class MockSplashScreenInteractor extends _i1.Mock
    implements _i47.SplashScreenInteractor {
  @override
  _i22.Future<_i47.SplashScreenData> getData({String? qrLoginUrl}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getData,
          [],
          {#qrLoginUrl: qrLoginUrl},
        ),
        returnValue:
            _i22.Future<_i47.SplashScreenData>.value(_FakeSplashScreenData_62(
          this,
          Invocation.method(
            #getData,
            [],
            {#qrLoginUrl: qrLoginUrl},
          ),
        )),
        returnValueForMissingStub:
            _i22.Future<_i47.SplashScreenData>.value(_FakeSplashScreenData_62(
          this,
          Invocation.method(
            #getData,
            [],
            {#qrLoginUrl: qrLoginUrl},
          ),
        )),
      ) as _i22.Future<_i47.SplashScreenData>);
  @override
  _i22.Future<void> updateUserColors() => (super.noSuchMethod(
        Invocation.method(
          #updateUserColors,
          [],
        ),
        returnValue: _i22.Future<void>.value(),
        returnValueForMissingStub: _i22.Future<void>.value(),
      ) as _i22.Future<void>);
  @override
  _i22.Future<int> getCameraCount() => (super.noSuchMethod(
        Invocation.method(
          #getCameraCount,
          [],
        ),
        returnValue: _i22.Future<int>.value(0),
        returnValueForMissingStub: _i22.Future<int>.value(0),
      ) as _i22.Future<int>);
  @override
  _i22.Future<bool> isTermsAcceptanceRequired() => (super.noSuchMethod(
        Invocation.method(
          #isTermsAcceptanceRequired,
          [],
        ),
        returnValue: _i22.Future<bool>.value(false),
        returnValueForMissingStub: _i22.Future<bool>.value(false),
      ) as _i22.Future<bool>);
}

/// A class which mocks [AttachmentFetcherInteractor].
///
/// See the documentation for Mockito's code generation for more information.
class MockAttachmentFetcherInteractor extends _i1.Mock
    implements _i128.AttachmentFetcherInteractor {
  @override
  _i22.Future<_i25.File> fetchAttachmentFile(
    _i39.Attachment? attachment,
    _i4.CancelToken? cancelToken,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchAttachmentFile,
          [
            attachment,
            cancelToken,
          ],
        ),
        returnValue: _i22.Future<_i25.File>.value(_FakeFile_51(
          this,
          Invocation.method(
            #fetchAttachmentFile,
            [
              attachment,
              cancelToken,
            ],
          ),
        )),
        returnValueForMissingStub: _i22.Future<_i25.File>.value(_FakeFile_51(
          this,
          Invocation.method(
            #fetchAttachmentFile,
            [
              attachment,
              cancelToken,
            ],
          ),
        )),
      ) as _i22.Future<_i25.File>);
  @override
  _i22.Future<String> getAttachmentSavePath(_i39.Attachment? attachment) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAttachmentSavePath,
          [attachment],
        ),
        returnValue: _i22.Future<String>.value(''),
        returnValueForMissingStub: _i22.Future<String>.value(''),
      ) as _i22.Future<String>);
  @override
  _i4.CancelToken generateCancelToken() => (super.noSuchMethod(
        Invocation.method(
          #generateCancelToken,
          [],
        ),
        returnValue: _FakeCancelToken_63(
          this,
          Invocation.method(
            #generateCancelToken,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeCancelToken_63(
          this,
          Invocation.method(
            #generateCancelToken,
            [],
          ),
        ),
      ) as _i4.CancelToken);
}

/// A class which mocks [CancelToken].
///
/// See the documentation for Mockito's code generation for more information.
class MockCancelToken extends _i1.Mock implements _i4.CancelToken {
  @override
  set requestOptions(_i4.RequestOptions? _requestOptions) => super.noSuchMethod(
        Invocation.setter(
          #requestOptions,
          _requestOptions,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get isCancelled => (super.noSuchMethod(
        Invocation.getter(#isCancelled),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i22.Future<_i4.DioException> get whenCancel => (super.noSuchMethod(
        Invocation.getter(#whenCancel),
        returnValue: _i22.Future<_i4.DioException>.value(_FakeDioException_64(
          this,
          Invocation.getter(#whenCancel),
        )),
        returnValueForMissingStub:
            _i22.Future<_i4.DioException>.value(_FakeDioException_64(
          this,
          Invocation.getter(#whenCancel),
        )),
      ) as _i22.Future<_i4.DioException>);
  @override
  void cancel([Object? reason]) => super.noSuchMethod(
        Invocation.method(
          #cancel,
          [reason],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [AudioVideoAttachmentViewerInteractor].
///
/// See the documentation for Mockito's code generation for more information.
class MockAudioVideoAttachmentViewerInteractor extends _i1.Mock
    implements _i129.AudioVideoAttachmentViewerInteractor {
  @override
  _i48.VideoPlayerController? makeController(String? url) =>
      (super.noSuchMethod(
        Invocation.method(
          #makeController,
          [url],
        ),
        returnValueForMissingStub: null,
      ) as _i48.VideoPlayerController?);
}

/// A class which mocks [VideoPlayerController].
///
/// See the documentation for Mockito's code generation for more information.
class MockVideoPlayerController extends _i1.Mock
    implements _i48.VideoPlayerController {
  @override
  String get dataSource => (super.noSuchMethod(
        Invocation.getter(#dataSource),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  Map<String, String> get httpHeaders => (super.noSuchMethod(
        Invocation.getter(#httpHeaders),
        returnValue: <String, String>{},
        returnValueForMissingStub: <String, String>{},
      ) as Map<String, String>);
  @override
  _i48.DataSourceType get dataSourceType => (super.noSuchMethod(
        Invocation.getter(#dataSourceType),
        returnValue: _i48.DataSourceType.asset,
        returnValueForMissingStub: _i48.DataSourceType.asset,
      ) as _i48.DataSourceType);
  @override
  int get textureId => (super.noSuchMethod(
        Invocation.getter(#textureId),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  _i22.Future<Duration?> get position => (super.noSuchMethod(
        Invocation.getter(#position),
        returnValue: _i22.Future<Duration?>.value(),
        returnValueForMissingStub: _i22.Future<Duration?>.value(),
      ) as _i22.Future<Duration?>);
  @override
  _i48.VideoPlayerValue get value => (super.noSuchMethod(
        Invocation.getter(#value),
        returnValue: _FakeVideoPlayerValue_65(
          this,
          Invocation.getter(#value),
        ),
        returnValueForMissingStub: _FakeVideoPlayerValue_65(
          this,
          Invocation.getter(#value),
        ),
      ) as _i48.VideoPlayerValue);
  @override
  set value(_i48.VideoPlayerValue? newValue) => super.noSuchMethod(
        Invocation.setter(
          #value,
          newValue,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i22.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i22.Future<void>.value(),
        returnValueForMissingStub: _i22.Future<void>.value(),
      ) as _i22.Future<void>);
  @override
  _i22.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i22.Future<void>.value(),
        returnValueForMissingStub: _i22.Future<void>.value(),
      ) as _i22.Future<void>);
  @override
  _i22.Future<void> play() => (super.noSuchMethod(
        Invocation.method(
          #play,
          [],
        ),
        returnValue: _i22.Future<void>.value(),
        returnValueForMissingStub: _i22.Future<void>.value(),
      ) as _i22.Future<void>);
  @override
  _i22.Future<void> setLooping(bool? looping) => (super.noSuchMethod(
        Invocation.method(
          #setLooping,
          [looping],
        ),
        returnValue: _i22.Future<void>.value(),
        returnValueForMissingStub: _i22.Future<void>.value(),
      ) as _i22.Future<void>);
  @override
  _i22.Future<void> pause() => (super.noSuchMethod(
        Invocation.method(
          #pause,
          [],
        ),
        returnValue: _i22.Future<void>.value(),
        returnValueForMissingStub: _i22.Future<void>.value(),
      ) as _i22.Future<void>);
  @override
  _i22.Future<void> seekTo(Duration? position) => (super.noSuchMethod(
        Invocation.method(
          #seekTo,
          [position],
        ),
        returnValue: _i22.Future<void>.value(),
        returnValueForMissingStub: _i22.Future<void>.value(),
      ) as _i22.Future<void>);
  @override
  _i22.Future<void> setVolume(double? volume) => (super.noSuchMethod(
        Invocation.method(
          #setVolume,
          [volume],
        ),
        returnValue: _i22.Future<void>.value(),
        returnValueForMissingStub: _i22.Future<void>.value(),
      ) as _i22.Future<void>);
  @override
  _i22.Future<void> setPlaybackSpeed(double? speed) => (super.noSuchMethod(
        Invocation.method(
          #setPlaybackSpeed,
          [speed],
        ),
        returnValue: _i22.Future<void>.value(),
        returnValueForMissingStub: _i22.Future<void>.value(),
      ) as _i22.Future<void>);
  @override
  void setCaptionOffset(Duration? offset) => super.noSuchMethod(
        Invocation.method(
          #setCaptionOffset,
          [offset],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i22.Future<void> setClosedCaptionFile(
          _i22.Future<_i48.ClosedCaptionFile>? closedCaptionFile) =>
      (super.noSuchMethod(
        Invocation.method(
          #setClosedCaptionFile,
          [closedCaptionFile],
        ),
        returnValue: _i22.Future<void>.value(),
        returnValueForMissingStub: _i22.Future<void>.value(),
      ) as _i22.Future<void>);
  @override
  void removeListener(_i57.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addListener(_i57.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [PermissionHandler].
///
/// See the documentation for Mockito's code generation for more information.
class MockPermissionHandler extends _i1.Mock
    implements _i130.PermissionHandler {
  @override
  _i22.Future<_i131.PermissionStatus> checkPermissionStatus(
          _i131.Permission? permission) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkPermissionStatus,
          [permission],
        ),
        returnValue: _i22.Future<_i131.PermissionStatus>.value(
            _i131.PermissionStatus.denied),
        returnValueForMissingStub: _i22.Future<_i131.PermissionStatus>.value(
            _i131.PermissionStatus.denied),
      ) as _i22.Future<_i131.PermissionStatus>);
  @override
  _i22.Future<_i131.PermissionStatus> requestPermission(
          _i131.Permission? permission) =>
      (super.noSuchMethod(
        Invocation.method(
          #requestPermission,
          [permission],
        ),
        returnValue: _i22.Future<_i131.PermissionStatus>.value(
            _i131.PermissionStatus.denied),
        returnValueForMissingStub: _i22.Future<_i131.PermissionStatus>.value(
            _i131.PermissionStatus.denied),
      ) as _i22.Future<_i131.PermissionStatus>);
}

/// A class which mocks [FlutterDownloaderVeneer].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlutterDownloaderVeneer extends _i1.Mock
    implements _i132.FlutterDownloaderVeneer {
  @override
  _i22.Future<String?> enqueue({
    required String? url,
    required String? savedDir,
    String? fileName,
    bool? showNotification = true,
    bool? openFileFromNotification = true,
    bool? requiresStorageNotLow = true,
    bool? saveInPublicStorage = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #enqueue,
          [],
          {
            #url: url,
            #savedDir: savedDir,
            #fileName: fileName,
            #showNotification: showNotification,
            #openFileFromNotification: openFileFromNotification,
            #requiresStorageNotLow: requiresStorageNotLow,
            #saveInPublicStorage: saveInPublicStorage,
          },
        ),
        returnValue: _i22.Future<String?>.value(),
        returnValueForMissingStub: _i22.Future<String?>.value(),
      ) as _i22.Future<String?>);
  @override
  _i22.Future<List<_i133.DownloadTask>?> loadTasks() => (super.noSuchMethod(
        Invocation.method(
          #loadTasks,
          [],
        ),
        returnValue: _i22.Future<List<_i133.DownloadTask>?>.value(),
        returnValueForMissingStub:
            _i22.Future<List<_i133.DownloadTask>?>.value(),
      ) as _i22.Future<List<_i133.DownloadTask>?>);
}

/// A class which mocks [ViewAttachmentInteractor].
///
/// See the documentation for Mockito's code generation for more information.
class MockViewAttachmentInteractor extends _i1.Mock
    implements _i134.ViewAttachmentInteractor {
  @override
  _i22.Future<void> openExternally(_i39.Attachment? attachment) =>
      (super.noSuchMethod(
        Invocation.method(
          #openExternally,
          [attachment],
        ),
        returnValue: _i22.Future<void>.value(),
        returnValueForMissingStub: _i22.Future<void>.value(),
      ) as _i22.Future<void>);
  @override
  _i22.Future<void> downloadFile(_i39.Attachment? attachment) =>
      (super.noSuchMethod(
        Invocation.method(
          #downloadFile,
          [attachment],
        ),
        returnValue: _i22.Future<void>.value(),
        returnValueForMissingStub: _i22.Future<void>.value(),
      ) as _i22.Future<void>);
  @override
  _i22.Future<bool> checkStoragePermission() => (super.noSuchMethod(
        Invocation.method(
          #checkStoragePermission,
          [],
        ),
        returnValue: _i22.Future<bool>.value(false),
        returnValueForMissingStub: _i22.Future<bool>.value(false),
      ) as _i22.Future<bool>);
}

/*
 * Copyright (C) 2017 - present Instructure, Inc.
 *
 *     Licensed under the Apache License, Version 2.0 (the "License");
 *     you may not use this file except in compliance with the License.
 *     You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *     Unless required by applicable law or agreed to in writing, software
 *     distributed under the License is distributed on an "AS IS" BASIS,
 *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *     See the License for the specific language governing permissions and
 *     limitations under the License.
 */

buildscript {
    // Define this once here because it will need to be reused later
    // This needs to be the same as for consuming code, or else you will get a compilation error.
    ext.kotlinVersion = "1.3.20"

    repositories {
        jcenter()
        google()
    }

    dependencies {
        classpath "com.android.tools.build:gradle:3.3.0"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.1'
        classpath 'digital.wup:android-maven-publish:3.6.2'
    }
}

plugins {
    id("com.jfrog.bintray") version "1.8.4"
}

allprojects {
    repositories {
        jcenter()
        google()
    }
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'com.github.dcendents.android-maven'

// This plugin, along with the publishing{} section below, allows us to generate a
// pom file WITH DEPENDENCIES without running "./gradlew install".  It was thought,
// at one point, that running "./gradlew install" in our jitpack.yml script was messing up our
// multiple-artifact-mono-repo strategy, but that may not be the case after all.
// (What was messing us up was providing the same pom.xml file to both
// artifacts, which essentially made them the same artifact.)
//
// So, at some point, we may want to get rid of this plugin and accompanying publishing{}
// logic, and just go with "./gradlew clean build install" in our jitpack.yml script and then
// reference the alternate-location pom-default.xml in our script commands.
apply plugin: 'digital.wup.android-maven-publish'

group = 'com.github.instructure'
version = System.getenv("MVN_VERSION") ?: "snapshot"

android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'

    defaultConfig {
        minSdkVersion 17
        targetSdkVersion 28

        def dittoMode = findProperty("dittoMode") ?: "play"
        buildConfigField "String", "GLOBAL_DITTO_MODE", "\"$dittoMode\""
    }

    buildTypes {
        debug {
            minifyEnabled false
            shrinkResources false
        }
        release {
            minifyEnabled false
            shrinkResources false
        }
    }

    lintOptions {
        abortOnError false
    }

    packagingOptions {
        // Required for Espresso.
        exclude 'META-INF/maven/com.google.guava/guava/pom.properties'
        exclude 'META-INF/maven/com.google.guava/guava/pom.xml'
    }

    // Android Studio doesn't pick up kotlin folder automatically
    // https://kotlinlang.org/docs/reference/using-gradle.html
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }
}

dependencies {
    // last update: Sept 30 2017
    // old versions: $ANDROID_HOME/extras/android/m2repository/com/android/support/test/
    // new versions: https://maven.google.com
    //
    // match versions from:
    // https://developer.android.com/topic/libraries/testing-support-library/release-notes.html
    //
    // https://maven.google.com/com/android/support/test/espresso/espresso-core/3.0.0/espresso-core-3.0.0.pom

    def runnerVersion = "1.1.1"
    def rulesVersion = "1.1.1"
    def espressoVersion = "3.1.1"
    def junitVersion = "4.12"
    def okReplayVersion = "1.4.0"

    // Update exclusions based on ./gradlew :app:androidDependencies
    implementation("androidx.test:runner:$runnerVersion") {
        exclude module: 'support-annotations'
    }

    implementation("androidx.test.espresso.idling:idling-concurrent:$espressoVersion") {
        exclude module: 'support-annotations'
    }
    implementation("androidx.test.espresso.idling:idling-net:$espressoVersion") {
        exclude module: 'support-annotations'
    }

    implementation "com.google.android.material:material:1.0.0"

    implementation 'com.google.code.gson:gson:2.8.0'

    api "androidx.test.espresso:espresso-accessibility:$espressoVersion"

    /* OkHttp Idling Resource */
    implementation('com.jakewharton.espresso:okhttp3-idling-resource:1.0.0') {
        exclude module: 'espresso-idling-resource'
    }

    /* OkReplay VCR */
    api("com.airbnb.okreplay:okreplay:$okReplayVersion") {
        exclude module: 'snakeyaml'
        exclude module: 'jsr305'
    }
    api("com.airbnb.okreplay:espresso:$okReplayVersion") {
        exclude module: 'snakeyaml'
        exclude module: 'jsr305'
    }

    api("androidx.test:rules:$rulesVersion") {
        exclude module: 'support-annotations'
    }
    api("androidx.test.espresso:espresso-core:$espressoVersion") {
        exclude module: 'support-annotations'
    }

    // Fix IncompatibleClassChangeError https://code.google.com/p/android/issues/detail?id=183454
    api("androidx.test.espresso:espresso-contrib:$espressoVersion") {
        exclude module: 'design'
        exclude module: 'recyclerview-v7'
        exclude module: 'support-v4'
        exclude module: 'support-annotations'
        exclude module: 'support-core-utils'
        exclude module: 'support-compat'
    }
    implementation("androidx.test.espresso:espresso-idling-resource:$espressoVersion")
    api("androidx.test.espresso:espresso-intents:$espressoVersion") {
        exclude module: 'support-annotations'
    }
    api("androidx.test.espresso:espresso-web:$espressoVersion") {
        exclude module: 'support-annotations'
    }
    api("junit:junit:$junitVersion")
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"

    api('com.schibsted.spain:barista:2.4.0') {
        exclude group: 'com.android.support'
        exclude group: 'org.jetbrains.kotlin'
    }
}

// For publishing pom file, which we need to do for this module on jitpack
publishing {
    publications {
        mavenAar(MavenPublication) {
            from components.android
        }
    }
}

// https://github.com/bintray/gradle-bintray-plugin#readme
bintray {
    user = System.getenv("MVN_USER")
    key = System.getenv("MVN_KEY")
    publish = true
    publications = ['mavenAar']

    pkg {
        repo = "maven"
        name = "espresso"
        userOrg = "instructure"
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/instructure/mobile-shared.git'

        version {
            name = System.getenv("MVN_VERSION")
            vcsTag = System.getenv("MVN_REVISION")
            released = new Date().toString()
        }
    }
}

/*
 * Copyright (C) 2017 - present Instructure, Inc.
 *
 *     Licensed under the Apache License, Version 2.0 (the "License");
 *     you may not use this file except in compliance with the License.
 *     You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *     Unless required by applicable law or agreed to in writing, software
 *     distributed under the License is distributed on an "AS IS" BASIS,
 *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *     See the License for the specific language governing permissions and
 *     limitations under the License.
 *
 */

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-parcelize'
apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'

static String isTesting() {
    if ( System.getenv("IS_TESTING") == "true" ) {
        "true"
    } else {
        "false"
    }
}

android {
    compileSdkVersion Versions.COMPILE_SDK
    buildToolsVersion Versions.BUILD_TOOLS

    defaultConfig {
        minSdkVersion Versions.MIN_SDK
        targetSdkVersion Versions.TARGET_SDK
        buildConfigField "boolean", "IS_TESTING", isTesting()
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testApplicationId System.getProperty("testApplicationId", "com.instructure.pandautils.test")
        javaCompileOptions {
            annotationProcessorOptions {
                compilerArgumentProviders(
                        new RoomSchemaArgProvider(new File(projectDir, "schemas"))
                )
            }
        }
    }

    buildTypes {
        debug{
            debuggable true
            minifyEnabled false
            shrinkResources false
            buildConfigField 'boolean', 'IS_DEBUG', 'true'
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release{
            debuggable false
            minifyEnabled false
            shrinkResources false
            buildConfigField 'boolean', 'IS_DEBUG', 'false'
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'LICENSE.txt'
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.includeAndroidResources = true
    }

    buildFeatures {
        dataBinding true
        viewBinding true
        compose true
    }

    hilt {
        enableAggregatingTask = false
        enableExperimentalClasspathAggregation = true
    }

    sourceSets {
        debug.assets.srcDirs += files("$projectDir/schemas".toString())
    }

    composeOptions {
        kotlinCompilerExtensionVersion = Versions.KOTLIN_COMPOSE_COMPILER_VERSION
    }
}

tasks.withType(Test) {
    android.sourceSets.main.res.srcDirs += 'src/test/res'
}

configurations {
    all*.exclude group: 'commons-logging', module: 'commons-logging'
    all*.exclude group: 'org.apache.httpcomponents', module: 'httpclient'

    all*.resolutionStrategy {
        force Libs.KOTLIN_STD_LIB
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    /* Modules */
    api project(path: ':blueprint')
    api project(path: ':interactions')

    implementation Libs.CAMERA_VIEW

    implementation Libs.LOTTIE

    /* Kotlin */
    implementation Libs.KOTLIN_STD_LIB
    implementation Libs.ANDROIDX_BROWSER
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation Libs.LIVE_DATA
    implementation Libs.VIEW_MODEL
    implementation project(':rceditor')

    /* Test Dependencies */
    testImplementation Libs.JUNIT
    testImplementation Libs.MOCKK
    testImplementation Libs.KOTLIN_COROUTINES_TEST
    testImplementation Libs.ANDROIDX_CORE_TESTING
    testImplementation Libs.THREETEN_BP

    testImplementation project(path: ':pandautils')

    /* Media handling */
    api(Libs.GLIDE) {
        exclude group: "com.android.support"
    }
    api (Libs.GLIDE_OKHTTP) {
        exclude group: "com.android.support"
    }
    kapt Libs.GLIDE_COMPILER

    api Libs.ANDROID_SVG

    api Libs.EXOPLAYER
    api (Libs.SCALE_IMAGE_VIEW) {
        exclude group: "androidx.exifinterface"
    }

    implementation platform(Libs.FIREBASE_BOM) {
        exclude group: 'com.google.firebase', module: 'firebase-analytics'
    }
    implementation Libs.FIREBASE_MESSAGING
    implementation (Libs.FIREBASE_CRASHLYTICS) {
        transitive = true
    }

    /* Support Dependencies */
    implementation Libs.ANDROIDX_ANNOTATION
    implementation Libs.ANDROIDX_APPCOMPAT
    implementation Libs.ANDROIDX_CARDVIEW
    implementation Libs.ANDROIDX_DESIGN
    implementation Libs.ANDROIDX_EXIF
    implementation Libs.ANDROIDX_SWIPE_REFRESH_LAYOUT
    implementation Libs.ANDROIDX_CONSTRAINT_LAYOUT
    implementation Libs.ANDROIDX_WEBKIT
    implementation Libs.PLAY_IN_APP_UPDATES

    /* Work Manager */
    implementation Libs.ANDROIDX_WORK_MANAGER
    implementation Libs.ANDROIDX_WORK_MANAGER_KTX

    /* DI */
    implementation Libs.HILT
    kapt Libs.HILT_COMPILER
    implementation Libs.HILT_ANDROIDX_WORK
    kapt Libs.HILT_ANDROIDX_COMPILER

    /* AAC */
    implementation Libs.VIEW_MODEL
    implementation Libs.LIVE_DATA
    implementation Libs.VIEW_MODE_SAVED_STATE
    implementation Libs.FRAGMENT_KTX
    kapt Libs.LIFECYCLE_COMPILER

    /* ROOM */
    implementation Libs.ROOM
    kapt Libs.ROOM_COMPILER
    implementation Libs.ROOM_COROUTINES

    /* Compose */
    def composeBom = platform(Libs.COMPOSE_BOM)
    implementation composeBom
    androidTestImplementation composeBom

    implementation Libs.COMPOSE_BOM
    implementation Libs.COMPOSE_MATERIAL
    implementation Libs.COMPOSE_PREVIEW
    debugImplementation Libs.COMPOSE_TOOLING
    implementation Libs.COMPOSE_VIEW_MODEL
    implementation Libs.COMPOSE_UI
    implementation Libs.COMPOSE_ACTIVITY

    implementation Libs.FLEXBOX_LAYOUT

    implementation Libs.RRULE

    // We need to add this dependency if we update ExoPlayer to 2.12.0
    // More details here: classpath https://github.com/google/ExoPlayer/issues/7905
    implementation 'com.google.guava:guava:29.0-android'

    kaptTest Libs.ANDROIDX_DATABINDING_COMPILER

    androidTestImplementation Libs.KOTLIN_COROUTINES_TEST
    androidTestImplementation (project(':espresso')) {
        exclude group: 'org.checkerframework', module: 'checker'
    }
    androidTestImplementation Libs.ANDROIDX_TEST_JUNIT
    androidTestImplementation Libs.ANDROIDX_CORE_TESTING
    androidTestImplementation Libs.ROOM_TEST

    androidTestImplementation Libs.COMPOSE_UI_TEST
    debugImplementation Libs.COMPOSE_UI_TEST_MANIFEST
}

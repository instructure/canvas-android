/*
 * Copyright (C) 2017 - present Instructure, Inc.
 *
 *     Licensed under the Apache License, Version 2.0 (the "License");
 *     you may not use this file except in compliance with the License.
 *     You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *     Unless required by applicable law or agreed to in writing, software
 *     distributed under the License is distributed on an "AS IS" BASIS,
 *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *     See the License for the specific language governing permissions and
 *     limitations under the License.
 *
 */

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'

static String isTesting() {
    if ( System.getenv("IS_TESTING") == "true" ) {
        "true"
    } else {
        "false"
    }
}

android {
    compileSdkVersion Versions.COMPILE_SDK
    buildToolsVersion Versions.BUILD_TOOLS

    defaultConfig {
        minSdkVersion Versions.MIN_SDK
        targetSdkVersion Versions.TARGET_SDK
        buildConfigField "boolean", "IS_TESTING", isTesting()
    }

    buildTypes {
        debug{
            debuggable true
            minifyEnabled false
            shrinkResources false
            buildConfigField 'boolean', 'IS_DEBUG', 'true'
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release{
            debuggable false
            minifyEnabled false
            shrinkResources false
            buildConfigField 'boolean', 'IS_DEBUG', 'false'
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'LICENSE.txt'
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    buildFeatures {
        dataBinding true
    }
}

configurations {
    all*.exclude group: 'commons-logging', module: 'commons-logging'
    all*.exclude group: 'org.apache.httpcomponents', module: 'httpclient'
}

androidExtensions {
    experimental = true
}

ext {
    glideVersion = "4.9.0"
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    /* Modules */
    api project(path: ':blueprint')
    api project(path: ':interactions')

    implementation 'com.wonderkiln:camerakit:0.13.4'

    /* Kotlin */
    implementation Libs.KOTLIN_STD_LIB

    /* Custom Views */
    api 'com.getbase:floatingactionbutton:1.10.1'

    /* Test Dependencies */
    testImplementation Libs.JUNIT
    testImplementation Libs.MOCKK
    testImplementation Libs.KOTLIN_COROUTINES_TEST
    testImplementation Libs.ANDROIDX_CORE_TESTING
    testImplementation Libs.THREETEN_BP

    /* Media handling */
    api("com.github.bumptech.glide:glide:$glideVersion") {
        exclude group: "com.android.support"
    }
    api ("com.github.bumptech.glide:okhttp3-integration:$glideVersion") {
        exclude group: "com.android.support"
    }
    kapt "com.github.bumptech.glide:compiler:$glideVersion"

    api Libs.ANDROID_SVG
    api 'com.squareup.picasso:picasso:2.5.2'
    api 'de.hdodenhof:circleimageview:3.0.0'
    api Libs.EXOPLAYER
    api ('com.davemorrissey.labs:subsampling-scale-image-view:3.9.0') {
        exclude group: "androidx.exifinterface"
    }

    implementation (Libs.FIREBASE_ANALYTICS) {
        transitive = true
    }

    implementation (Libs.FIREBASE_CRASHLYTICS) {
        transitive = true
    }

    /* Support Dependencies */
    implementation Libs.ANDROIDX_ANNOTATION
    implementation Libs.ANDROIDX_APPCOMPAT
    implementation Libs.ANDROIDX_CARDVIEW
    implementation Libs.ANDROIDX_DESIGN
    implementation Libs.ANDROIDX_EXIF
    implementation Libs.FIREBASE_MESSAGING
    implementation Libs.ANDROIDX_SWIPE_REFRESH_LAYOUT
    implementation Libs.ANDROIDX_CONSTRAINT_LAYOUT
    implementation Libs.PLAY_CORE_KTX

    /* Job Scheduler */
    implementation Libs.FIREBASE_JOB_DISPATCHER

    /* DI */
    implementation Libs.HILT
    kapt Libs.HILT_COMPILER

    /* AAC */
    implementation Libs.VIEW_MODEL
    implementation Libs.LIVE_DATA
    implementation Libs.VIEW_MODE_SAVED_STATE
    implementation Libs.FRAGMENT_KTX
    kapt Libs.LIFECYCLE_COMPILER
}

/*
 * Copyright (C) 2017 - present Instructure, Inc.
 *
 *     Licensed under the Apache License, Version 2.0 (the "License");
 *     you may not use this file except in compliance with the License.
 *     You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *     Unless required by applicable law or agreed to in writing, software
 *     distributed under the License is distributed on an "AS IS" BASIS,
 *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *     See the License for the specific language governing permissions and
 *     limitations under the License.
 *
 */

apply plugin: 'com.android.library'
apply plugin: 'com.apollographql.apollo'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-parcelize'
apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'

def pineDebugBaseUrl = "https://pine-api-dev.domain-svcs.nonprod.inseng.io"
def pineReleaseBaseUrl = "https://pine-api-production.us-east-1.temp.prod.inseng.io"

def cedarDebugBaseUrl = "https://cedar-api-dev.domain-svcs.nonprod.inseng.io"
def cedarReleaseBaseUrl = "https://cedar-api-production.us-east-1.temp.prod.inseng.io"

def redwoodDebugBaseUrl = "https://redwood-api-dev.domain-svcs.nonprod.inseng.io"
def redwoodReleaseBaseUrl = "https://redwood-api-production.us-east-1.temp.prod.inseng.io"


static String isTesting() {
    if ( System.getenv("IS_TESTING") == "true" ) {
        "true"
    } else {
        "false"
    }
}

buildscript {
    repositories {
        mavenCentral()
    }
}

android {
    namespace 'com.instructure.canvasapi2'
    compileSdkVersion Versions.COMPILE_SDK
    buildToolsVersion Versions.BUILD_TOOLS

    defaultConfig {
        minSdkVersion Versions.MIN_SDK
        targetSdkVersion Versions.TARGET_SDK
        buildConfigField "boolean", "IS_TESTING", isTesting()
    }

    buildTypes {
        debug {
            buildConfigField "String", "PINE_BASE_URL", "\"$pineDebugBaseUrl\""
            buildConfigField "String", "CEDAR_BASE_URL", "\"$cedarDebugBaseUrl\""
            buildConfigField "String", "REDWOOD_BASE_URL", "\"$redwoodDebugBaseUrl\""
        }
        release {
            buildConfigField "String", "PINE_BASE_URL", "\"$pineReleaseBaseUrl\""
            buildConfigField "String", "CEDAR_BASE_URL", "\"$cedarReleaseBaseUrl\""
            buildConfigField "String", "REDWOOD_BASE_URL", "\"$redwoodReleaseBaseUrl\""

            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_11.toString()
    }

    hilt {
        enableAggregatingTask = false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17
    }

    lintOptions {
        abortOnError false
    }
}

apollo {
    service("canvas") {
        setSourceFolder("com/instructure/canvasapi2")
        packageName.set("com.instructure.canvasapi2")
        mapScalar("URL", "kotlin.String")
        mapScalar("DateTime", "java.util.Date")
        mapScalar("ID", "kotlin.String")
    }
    service("cedar") {
        setSourceFolder("com/instructure/cedar")
        packageName.set("com.instructure.cedar")
        mapScalar("ID", "kotlin.String")
    }
    service("pine") {
        setSourceFolder("com/instructure/pine")
        packageName.set("com.instructure.pine")
        mapScalar("ID", "kotlin.String")
    }
    service("redwood") {
        setSourceFolder("com/instructure/redwood")
        packageName.set("com.instructure.redwood")
        mapScalar("DateTime", "java.util.Date")
        mapScalar("ID", "kotlin.String")
    }
}

dependencies {
    api project(path: ':pandares')

    /* Kotlin */
    implementation Libs.KOTLIN_STD_LIB
    api Libs.KOTLIN_COROUTINES_CORE
    api Libs.KOTLIN_COROUTINES_ANDROID
    testImplementation Libs.KOTLIN_COROUTINES_TEST

    /* Retrofit / GSON */
    api(Libs.RETROFIT) {
        exclude module: 'okhttp'
    }
    implementation Libs.GSON
    api Libs.RETROFIT_GSON_ADAPTER
    implementation(Libs.RETROFIT_XML_ADAPTER) {
        exclude module: 'stax-api'
        exclude module: 'stax'
        exclude module: 'xpp3'
    }

    /* OKHttp */
    implementation Libs.OKHTTP
    implementation Libs.OKHTTP_LOGGING
    implementation Libs.OKHTTP_URL_CONNECTION
    implementation Libs.OKIO

    /* GraphQL */
    /* NOTE: Newer versions of OkHttp affect the encoding of square brackets in @Query names. We're excluding the
    * okhttp module here to avoid updating to a newer version until we're ready to handle the change. */
    api(Libs.APOLLO_RUNTIME) {
        exclude module: 'okhttp'
    }
    api (Libs.APOLLO_API) {
        exclude module: 'okhttp'
    }
    implementation (Libs.APOLLO_HTTP_CACHE) {
        exclude module: 'okhttp'
    }

    /* EventBus */
    api Libs.EVENTBUS

    /* Date/time/calendar */
    api Libs.JW_THREETEN_BP

    api Libs.PROCESS_PHOENIX

    /* Test Dependencies */
    testImplementation Libs.JUNIT
    testImplementation Libs.MOCKK
    testImplementation "org.mockito:mockito-inline:2.25.0"
    testImplementation group: 'org.slf4j', name: 'slf4j-nop', version: '1.7.26'

    /* Support Libs */
    implementation Libs.ANDROIDX_APPCOMPAT
    implementation Libs.ANDROIDX_ANNOTATION

    // Firebase
    implementation platform(Libs.FIREBASE_BOM) {
        exclude group: 'com.google.firebase', module: 'firebase-analytics'
    }
    implementation Libs.FIREBASE_CONFIG

    implementation Libs.HILT
    kapt Libs.HILT_COMPILER

    implementation Libs.ROOM
    kapt Libs.ROOM_COMPILER

    implementation Libs.PENDO

    implementation Libs.ANDROIDX_WORK_MANAGER
    implementation Libs.ANDROIDX_WORK_MANAGER_KTX

    implementation Libs.JAVA_JWT
}

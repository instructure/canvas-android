#
# Copyright (C) 2018 - present Instructure, Inc.
#
#     Licensed under the Apache License, Version 2.0 (the "License");
#     you may not use this file except in compliance with the License.
#     You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
#     Unless required by applicable law or agreed to in writing, software
#     distributed under the License is distributed on an "AS IS" BASIS,
#     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#     See the License for the specific language governing permissions and
#     limitations under the License.
#

query StudentContextCard($courseId: ID!, $studentId: ID!, $pageSize: Int!, $nextCursor: String) {
  course: legacyNode(type: Course, _id: $courseId) {
    ... on Course {
      id: _id
      name
      permissions {
        becomeUser
        manageGrades
        sendMessages
        viewAllGrades
        viewAnalytics
      }
      users: usersConnection(userIds: [$studentId]) {
        edges {
          user: node {
            id: _id
              name
              shortName
              pronouns
              avatarUrl
              email
              enrollments(courseId: $courseId) {
                lastActivityAt
                type
                section {
                  name
                }
                grades {
                  overrideGrade
                  overrideScore
                  currentGrade
                  currentScore
                  finalGrade
                  finalScore
                  unpostedCurrentGrade
                  unpostedCurrentScore
                  unpostedFinalGrade
                  unpostedFinalScore
                }
              }
              analytics: summaryAnalytics(courseId: $courseId) {
                pageViews {
                  total
                  max
                  level
                }
                participations {
                  total
                  max
                  level
                }
                tardinessBreakdown {
                  late
                  missing
                  onTime
                }
              }
          }
        }
      }
      submissions: submissionsConnection(
        first: $pageSize,
        after: $nextCursor,
        orderBy: [{field: gradedAt, direction: descending}]
        studentIds: [$studentId]
      ) {
        pageInfo {
          endCursor
          startCursor
          hasNextPage
          hasPreviousPage
        }
        edges {
          submission: node {
            id
            score
            grade
            excused
            submissionStatus
            gradingStatus
            posted
            postedAt
            user {
              id: _id
            }
            assignment {
              id: _id
              name
              htmlUrl
              pointsPossible
              state
              gradingType
              submissionTypes
            }
          }
        }
      }
    }
  }
}
